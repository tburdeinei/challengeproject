{"version":3,"sources":["../src/observable/BoundCallbackObservable.ts","../src/observable/bindCallback.ts","../src/add/observable/bindCallback.ts","../src/observable/BoundNodeCallbackObservable.ts","../src/observable/bindNodeCallback.ts","../src/add/observable/bindNodeCallback.ts","../src/observable/combineLatest.ts","../src/add/observable/combineLatest.ts","../src/add/observable/concat.ts","../src/observable/DeferObservable.ts","../src/observable/defer.ts","../src/add/observable/defer.ts","../src/observable/empty.ts","../src/add/observable/empty.ts","../src/observable/ForkJoinObservable.ts","../src/observable/forkJoin.ts","../src/add/observable/forkJoin.ts","../src/add/observable/from.ts","../src/observable/FromEventObservable.ts","../src/observable/fromEvent.ts","../src/add/observable/fromEvent.ts","../src/observable/FromEventPatternObservable.ts","../src/observable/fromEventPattern.ts","../src/add/observable/fromEventPattern.ts","../src/observable/fromPromise.ts","../src/add/observable/fromPromise.ts","../src/observable/GenerateObservable.ts","../src/observable/generate.ts","../src/add/observable/generate.ts","../src/observable/IfObservable.ts","../src/observable/if.ts","../src/add/observable/if.ts","../src/observable/IntervalObservable.ts","../src/observable/interval.ts","../src/add/observable/interval.ts","../src/add/observable/merge.ts","../src/add/observable/race.ts","../src/observable/NeverObservable.ts","../src/observable/never.ts","../src/add/observable/never.ts","../src/add/observable/of.ts","../src/observable/onErrorResumeNext.ts","../src/add/observable/onErrorResumeNext.ts","../src/observable/PairsObservable.ts","../src/observable/pairs.ts","../src/add/observable/pairs.ts","../src/observable/RangeObservable.ts","../src/observable/range.ts","../src/add/observable/range.ts","../src/observable/UsingObservable.ts","../src/observable/using.ts","../src/add/observable/using.ts","../src/observable/ErrorObservable.ts","../src/observable/throw.ts","../src/add/observable/throw.ts","../src/add/observable/timer.ts","../src/observable/zip.ts","../src/add/observable/zip.ts","../src/observable/dom/ajax.ts","../src/add/observable/dom/ajax.ts","../src/util/assign.ts","../src/observable/dom/WebSocketSubject.ts","../src/observable/dom/webSocket.ts","../src/add/observable/dom/webSocket.ts","../src/operator/buffer.ts","../src/add/operator/buffer.ts","../src/operator/bufferCount.ts","../src/add/operator/bufferCount.ts","../src/operator/bufferTime.ts","../src/add/operator/bufferTime.ts","../src/operator/bufferToggle.ts","../src/add/operator/bufferToggle.ts","../src/operator/bufferWhen.ts","../src/add/operator/bufferWhen.ts","../src/operator/catch.ts","../src/add/operator/catch.ts","../src/operator/combineAll.ts","../src/add/operator/combineAll.ts","../src/operator/combineLatest.ts","../src/add/operator/combineLatest.ts","../src/operator/concat.ts","../src/add/operator/concat.ts","../src/operator/concatAll.ts","../src/add/operator/concatAll.ts","../src/operator/concatMap.ts","../src/add/operator/concatMap.ts","../src/operator/concatMapTo.ts","../src/add/operator/concatMapTo.ts","../src/operator/count.ts","../src/add/operator/count.ts","../src/operator/dematerialize.ts","../src/add/operator/dematerialize.ts","../src/operator/debounce.ts","../src/add/operator/debounce.ts","../src/operator/debounceTime.ts","../src/add/operator/debounceTime.ts","../src/operator/defaultIfEmpty.ts","../src/add/operator/defaultIfEmpty.ts","../src/operator/delay.ts","../src/add/operator/delay.ts","../src/operator/delayWhen.ts","../src/add/operator/delayWhen.ts","../src/operator/distinct.ts","../src/add/operator/distinct.ts","../src/operator/distinctUntilChanged.ts","../src/add/operator/distinctUntilChanged.ts","../src/operator/distinctUntilKeyChanged.ts","../src/add/operator/distinctUntilKeyChanged.ts","../src/operator/do.ts","../src/add/operator/do.ts","../src/operator/exhaust.ts","../src/add/operator/exhaust.ts","../src/operator/exhaustMap.ts","../src/add/operator/exhaustMap.ts","../src/operator/expand.ts","../src/add/operator/expand.ts","../src/operator/elementAt.ts","../src/add/operator/elementAt.ts","../src/operator/filter.ts","../src/add/operator/filter.ts","../src/operator/finally.ts","../src/add/operator/finally.ts","../src/operator/find.ts","../src/add/operator/find.ts","../src/operator/findIndex.ts","../src/add/operator/findIndex.ts","../src/operator/first.ts","../src/add/operator/first.ts","../src/operator/groupBy.ts","../src/add/operator/groupBy.ts","../src/operator/ignoreElements.ts","../src/add/operator/ignoreElements.ts","../src/operator/isEmpty.ts","../src/add/operator/isEmpty.ts","../src/operator/audit.ts","../src/add/operator/audit.ts","../src/operator/auditTime.ts","../src/add/operator/auditTime.ts","../src/operator/last.ts","../src/add/operator/last.ts","../src/operator/let.ts","../src/add/operator/let.ts","../src/operator/every.ts","../src/add/operator/every.ts","../src/operator/map.ts","../src/add/operator/map.ts","../src/operator/mapTo.ts","../src/add/operator/mapTo.ts","../src/operator/materialize.ts","../src/add/operator/materialize.ts","../src/operator/max.ts","../src/add/operator/max.ts","../src/operator/merge.ts","../src/add/operator/merge.ts","../src/operator/mergeAll.ts","../src/add/operator/mergeAll.ts","../src/operator/mergeMap.ts","../src/add/operator/mergeMap.ts","../src/operator/mergeMapTo.ts","../src/add/operator/mergeMapTo.ts","../src/operator/mergeScan.ts","../src/add/operator/mergeScan.ts","../src/operator/min.ts","../src/add/operator/min.ts","../src/operator/multicast.ts","../src/add/operator/multicast.ts","../src/operator/observeOn.ts","../src/add/operator/observeOn.ts","../src/operator/onErrorResumeNext.ts","../src/add/operator/onErrorResumeNext.ts","../src/operator/pairwise.ts","../src/add/operator/pairwise.ts","../src/operator/partition.ts","../src/add/operator/partition.ts","../src/operator/pluck.ts","../src/add/operator/pluck.ts","../src/operator/publish.ts","../src/add/operator/publish.ts","../src/operator/publishBehavior.ts","../src/add/operator/publishBehavior.ts","../src/operator/publishReplay.ts","../src/add/operator/publishReplay.ts","../src/operator/publishLast.ts","../src/add/operator/publishLast.ts","../src/operator/race.ts","../src/add/operator/race.ts","../src/operator/reduce.ts","../src/add/operator/reduce.ts","../src/operator/repeat.ts","../src/add/operator/repeat.ts","../src/operator/repeatWhen.ts","../src/add/operator/repeatWhen.ts","../src/operator/retry.ts","../src/add/operator/retry.ts","../src/operator/retryWhen.ts","../src/add/operator/retryWhen.ts","../src/operator/sample.ts","../src/add/operator/sample.ts","../src/operator/sampleTime.ts","../src/add/operator/sampleTime.ts","../src/operator/scan.ts","../src/add/operator/scan.ts","../src/operator/sequenceEqual.ts","../src/add/operator/sequenceEqual.ts","../src/operator/share.ts","../src/add/operator/share.ts","../src/operator/shareReplay.ts","../src/add/operator/shareReplay.ts","../src/operator/single.ts","../src/add/operator/single.ts","../src/operator/skip.ts","../src/add/operator/skip.ts","../src/operator/skipLast.ts","../src/add/operator/skipLast.ts","../src/operator/skipUntil.ts","../src/add/operator/skipUntil.ts","../src/operator/skipWhile.ts","../src/add/operator/skipWhile.ts","../src/operator/startWith.ts","../src/add/operator/startWith.ts","../src/observable/SubscribeOnObservable.ts","../src/operators/subscribeOn.ts","../src/operator/subscribeOn.ts","../src/add/operator/subscribeOn.ts","../src/operator/switch.ts","../src/add/operator/switch.ts","../src/operator/switchMap.ts","../src/add/operator/switchMap.ts","../src/operator/switchMapTo.ts","../src/add/operator/switchMapTo.ts","../src/operator/take.ts","../src/add/operator/take.ts","../src/operator/takeLast.ts","../src/add/operator/takeLast.ts","../src/operator/takeUntil.ts","../src/add/operator/takeUntil.ts","../src/operator/takeWhile.ts","../src/add/operator/takeWhile.ts","../src/operator/throttle.ts","../src/add/operator/throttle.ts","../src/operator/throttleTime.ts","../src/add/operator/throttleTime.ts","../src/add/operator/timeInterval.ts","../src/operator/timeout.ts","../src/add/operator/timeout.ts","../src/operator/timeoutWith.ts","../src/add/operator/timeoutWith.ts","../src/operator/timestamp.ts","../src/add/operator/timestamp.ts","../src/operator/toArray.ts","../src/add/operator/toArray.ts","../src/operator/window.ts","../src/add/operator/window.ts","../src/operator/windowCount.ts","../src/add/operator/windowCount.ts","../src/operator/windowTime.ts","../src/add/operator/windowTime.ts","../src/operator/windowToggle.ts","../src/add/operator/windowToggle.ts","../src/operator/windowWhen.ts","../src/add/operator/windowWhen.ts","../src/operator/withLatestFrom.ts","../src/add/operator/withLatestFrom.ts","../src/operator/zip.ts","../src/add/operator/zip.ts","../src/operator/zipAll.ts","../src/add/operator/zipAll.ts","../src/operator/timeInterval.ts","../src/testing/ColdObservable.ts","../src/testing/SubscriptionLoggable.ts","../src/util/applyMixins.ts","../src/testing/HotObservable.ts","../src/testing/SubscriptionLog.ts","../src/testing/TestScheduler.ts","../src/scheduler/VirtualTimeScheduler.ts","../src/observable/dom/AjaxObservable.ts","../src/util/Immediate.ts","../src/scheduler/AsapAction.ts","../src/scheduler/AsapScheduler.ts","../src/scheduler/asap.ts","../src/util/AnimationFrame.ts","../src/scheduler/AnimationFrameAction.ts","../src/scheduler/AnimationFrameScheduler.ts","../src/scheduler/animationFrame.ts","../src/operators/audit.ts","../src/observable/TimerObservable.ts","../src/observable/timer.ts","../src/operators/auditTime.ts","../src/operators/buffer.ts","../src/operators/bufferCount.ts","../src/operators/bufferTime.ts","../src/operators/bufferToggle.ts","../src/operators/bufferWhen.ts","../src/operators/catchError.ts","../src/operators/combineAll.ts","../src/operators/combineLatest.ts","../src/operators/concat.ts","../src/operators/concatMap.ts","../src/operators/concatMapTo.ts","../src/operators/count.ts","../src/operators/debounce.ts","../src/operators/debounceTime.ts","../src/operators/delay.ts","../src/operators/delayWhen.ts","../src/operators/dematerialize.ts","../src/util/Set.ts","../src/operators/distinct.ts","../src/operators/distinctUntilChanged.ts","../src/operators/distinctUntilKeyChanged.ts","../src/operators/elementAt.ts","../src/operators/every.ts","../src/operators/exhaust.ts","../src/operators/exhaustMap.ts","../src/operators/expand.ts","../src/operators/finalize.ts","../src/operators/find.ts","../src/operators/findIndex.ts","../src/operators/first.ts","../src/util/MapPolyfill.ts","../src/util/Map.ts","../src/util/FastMap.ts","../src/operators/groupBy.ts","../src/operators/ignoreElements.ts","../src/operators/isEmpty.ts","../src/operators/last.ts","../src/operators/mapTo.ts","../src/operators/materialize.ts","../src/operators/max.ts","../src/observable/merge.ts","../src/operators/merge.ts","../src/operators/mergeMapTo.ts","../src/operators/mergeScan.ts","../src/operators/min.ts","../src/operators/onErrorResumeNext.ts","../src/operators/pairwise.ts","../src/util/not.ts","../src/operators/filter.ts","../src/operators/partition.ts","../src/operators/pluck.ts","../src/operators/publish.ts","../src/BehaviorSubject.ts","../src/operators/publishBehavior.ts","../src/AsyncSubject.ts","../src/operators/publishLast.ts","../src/operators/publishReplay.ts","../src/observable/race.ts","../src/operators/race.ts","../src/operators/repeat.ts","../src/operators/repeatWhen.ts","../src/operators/retry.ts","../src/operators/retryWhen.ts","../src/operators/sample.ts","../src/operators/sampleTime.ts","../src/operators/sequenceEqual.ts","../src/observable/ConnectableObservable.ts","../src/operators/multicast.ts","../src/operators/refCount.ts","../src/operators/share.ts","../src/scheduler/QueueAction.ts","../src/scheduler/QueueScheduler.ts","../src/scheduler/queue.ts","../src/ReplaySubject.ts","../src/operators/shareReplay.ts","../src/util/EmptyError.ts","../src/operators/single.ts","../src/operators/skip.ts","../src/operators/skipLast.ts","../src/operators/skipUntil.ts","../src/operators/skipWhile.ts","../src/observable/of.ts","../src/observable/PromiseObservable.ts","../src/observable/IteratorObservable.ts","../src/observable/ArrayLikeObservable.ts","../src/Notification.ts","../src/operators/observeOn.ts","../src/observable/FromObservable.ts","../src/observable/from.ts","../src/operators/mergeMap.ts","../src/operators/mergeAll.ts","../src/operators/concatAll.ts","../src/observable/concat.ts","../src/operators/startWith.ts","../src/util/identity.ts","../src/operators/switchAll.ts","../src/operators/switchMap.ts","../src/operators/switchMapTo.ts","../src/operators/take.ts","../src/operators/takeUntil.ts","../src/operators/takeWhile.ts","../src/operators/tap.ts","../src/operators/throttle.ts","../src/operators/throttleTime.ts","../src/operators/timeInterval.ts","../src/util/TimeoutError.ts","../src/operators/timeout.ts","../src/util/isDate.ts","../src/operators/timeoutWith.ts","../src/operators/map.ts","../src/operators/timestamp.ts","../src/operators/scan.ts","../src/util/ArgumentOutOfRangeError.ts","../src/operators/takeLast.ts","../src/operators/defaultIfEmpty.ts","../src/operators/reduce.ts","../src/operators/toArray.ts","../src/operators/window.ts","../src/operators/windowCount.ts","../src/scheduler/Action.ts","../src/scheduler/AsyncAction.ts","../src/Scheduler.ts","../src/scheduler/AsyncScheduler.ts","../src/scheduler/async.ts","../src/util/isNumeric.ts","../src/operators/windowTime.ts","../src/operators/windowToggle.ts","../src/util/ObjectUnsubscribedError.ts","../src/SubjectSubscription.ts","../src/Subject.ts","../src/operators/windowWhen.ts","../src/operators/withLatestFrom.ts","../src/observable/ScalarObservable.ts","../src/observable/EmptyObservable.ts","../src/util/isScheduler.ts","../src/observable/ArrayObservable.ts","../src/OuterSubscriber.ts","../src/util/isArrayLike.ts","../src/util/isPromise.ts","../src/util/toSubscriber.ts","../src/util/noop.ts","../src/util/pipe.ts","../src/Observable.ts","../src/util/isArray.ts","../src/util/isObject.ts","../src/util/isFunction.ts","../src/util/tryCatch.ts","../src/util/errorObject.ts","../src/util/UnsubscriptionError.ts","../src/Subscription.ts","../src/Observer.ts","../src/symbol/rxSubscriber.ts","../src/Subscriber.ts","../src/InnerSubscriber.ts","../src/symbol/observable.ts","../src/util/subscribeToResult.ts","../src/util/root.ts","../src/symbol/iterator.ts","../src/operators/zip.ts","../src/operators/zipAll.ts","../src/operators.ts","../src/Rx.ts"],"names":["dispatchNext","arg","value","subject","next","complete","dispatchError","err","error","Observable_1","$__require","tryCatch_1","errorObject_1","AsyncSubject_1","BoundCallbackObservable","_super","callbackFunc","selector","args","context","scheduler","call","this","__extends","create","func","undefined","_i","arguments","length","prototype","_subscribe","subscriber","schedule","dispatch","source","AsyncSubject","handler","handlerFn","innerArgs","result_1","tryCatch","apply","errorObject","e","concat","subscribe","state","self","result_2","add","Observable","exports","BoundCallbackObservable_1","bindCallback","bindCallback_1","_a","shift","BoundNodeCallbackObservable","BoundNodeCallbackObservable_1","bindNodeCallback","bindNodeCallback_1","combineLatest","observables","project","isScheduler_1","isScheduler","pop","isArray_1","isArray","ArrayObservable_1","ArrayObservable","lift","combineLatest_1","CombineLatestOperator","concat_1","subscribeToResult_1","OuterSubscriber_1","DeferObservable","observableFactory","DeferSubscriber","destination","factory","tryDefer","_callFactory","_error","result","subscribeToResult","OuterSubscriber","DeferObservable_1","defer","defer_1","EmptyObservable_1","empty","EmptyObservable","empty_1","ForkJoinObservable","sources","resultSelector","ForkJoinSubscriber","completed","haveValues","len","total","values","Array","i","innerSubscription","outerIndex","notifyNext","outerValue","innerValue","innerIndex","innerSub","_hasValue","notifyComplete","ForkJoinObservable_1","forkJoin","forkJoin_1","from_1","from","isNodeStyleEventEmitter","sourceObj","addListener","removeListener","isJQueryStyleEventEmitter","on","off","isNodeList","toString","isHTMLCollection","isEventTarget","addEventListener","removeEventListener","isFunction_1","Subscription_1","Object","FromEventObservable","eventName","options","target","isFunction","setupSubscription","unsubscribe","source_1","source_2","TypeError","source_3","Subscription","FromEventObservable_1","fromEvent","fromEvent_1","FromEventPatternObservable","addHandler","removeHandler","_this","_callSelector","retValue","_callAddHandler","errorSubscriber","FromEventPatternObservable_1","fromEventPattern","fromEventPattern_1","PromiseObservable_1","fromPromise","PromiseObservable","fromPromise_1","selfSelector","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","closed","needIterate","GenerateObservable_1","generate","generate_1","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","_complete","IfObservable_1","_if","if_1","if","isNumeric_1","async_1","IntervalObservable","period","async","isNumeric","index","IntervalObservable_1","interval","interval_1","merge_1","merge","race_1","race","noop_1","NeverObservable","noop","NeverObservable_1","never","never_1","of_1","of","onErrorResumeNext_1","onErrorResumeNext","onErrorResumeNextStatic","obj","keys","key","PairsObservable","idx","PairsObservable_1","pairs","pairs_1","RangeObservable","start","count","_count","RangeObservable_1","range","range_1","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","UsingObservable_1","using","using_1","ErrorObservable","syncErrorThrowable","ErrorObservable_1","_throw","throw_1","throw","timer_1","timer","zip_1","zip","zipStatic","AjaxObservable_1","ajax","AjaxObservable","ajax_1","assignImpl","k","hasOwnProperty","getAssign","root","assign","root_1","Subject_1","Subscriber_1","ReplaySubject_1","assign_1","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","Subject","url","Error","ReplaySubject","JSON","parse","data","operator","sock","_resetState","socket","multiplex","subMsg","unsubMsg","messageFilter","observer","subscription","x","_connectSocket","protocol","binaryType","readyState","close","onopen","openObserver","queue","Subscriber","send","closingObserver","code","reason","onerror","onclose","closeObserver","wasClean","onmessage","observers","AnonymousSubject","WebSocketSubject_1","webSocket","webSocket_1","buffer","closingNotifier","buffer_1","bufferCount","bufferSize","startBufferEvery","bufferCount_1","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","Number","POSITIVE_INFINITY","bufferTime_1","bufferToggle","openings","closingSelector","bufferToggle_1","bufferWhen","bufferWhen_1","_catch","catchError_1","catchError","catch_1","catch","combineAll","combineAll_1","concat_2","concatStatic","concatAll","concatAll_1","concatMap","concatMap_1","concatMapTo","innerObservable","concatMapTo_1","predicate","count_1","dematerialize","dematerialize_1","debounce","durationSelector","debounce_1","debounceTime","dueTime","debounceTime_1","defaultIfEmpty","defaultValue","defaultIfEmpty_1","delay","delay_1","delayWhen","delayDurationSelector","subscriptionDelay","delayWhen_1","distinct","keySelector","flushes","distinct_1","distinctUntilChanged","compare","distinctUntilChanged_1","distinctUntilKeyChanged","distinctUntilKeyChanged_1","_do","nextOrObserver","tap_1","tap","do_1","do","exhaust","exhaust_1","exhaustMap","exhaustMap_1","expand","concurrent","expand_1","elementAt","elementAt_1","filter","thisArg","filter_1","_finally","callback","finalize_1","finalize","finally_1","finally","find","find_1","findIndex","findIndex_1","first","first_1","groupBy","elementSelector","subjectSelector","groupBy_1","GroupedObservable","ignoreElements","ignoreElements_1","isEmpty","isEmpty_1","audit","audit_1","auditTime","duration","auditTime_1","last","last_1","letProto","let_1","let","letBind","every","every_1","map","map_1","mapTo","mapTo_1","materialize","materialize_1","max","comparer","max_1","merge_2","mergeStatic","mergeAll","mergeAll_1","mergeMap","mergeMap_1","flatMap","mergeMapTo","mergeMapTo_1","flatMapTo","mergeScan","accumulator","seed","mergeScan_1","min","min_1","multicast","subjectOrSubjectFactory","multicast_1","observeOn","observeOn_1","nextSources","pairwise","pairwise_1","partition","partition_1","pluck","properties","pluck_1","publish","publish_1","publishBehavior","publishBehavior_1","publishReplay","windowTime","selectorOrScheduler","publishReplay_1","publishLast","publishLast_1","race_2","raceStatic","reduce","reduce_1","repeat","repeat_1","repeatWhen","notifier","repeatWhen_1","retry","retry_1","retryWhen","retryWhen_1","sample","sample_1","sampleTime","sampleTime_1","scan","scan_1","sequenceEqual","compareTo","comparor","sequenceEqual_1","share","share_1","shareReplay","shareReplay_1","single","single_1","skip","skip_1","skipLast","skipLast_1","skipUntil","skipUntil_1","skipWhile","skipWhile_1","startWith","array","startWith_1","asap_1","SubscribeOnObservable","delayTime","asap","subscribeOn","SubscribeOnOperator","SubscribeOnObservable_1","subscribeOn_1","_switch","switchAll_1","switchAll","switch_1","switch","switchMap","switchMap_1","switchMapTo","switchMapTo_1","take","take_1","takeLast","takeLast_1","takeUntil","takeUntil_1","takeWhile","takeWhile_1","throttle","config","throttle_1","defaultThrottleConfig","throttleTime","throttleTime_1","timeInterval_1","timeInterval","timeout","due","timeout_1","timeoutWith","withObservable","timeoutWith_1","timestamp","timestamp_1","toArray","toArray_1","window","windowBoundaries","window_1","windowCount","windowSize","startWindowEvery","windowCount_1","windowTimeSpan","windowCreationInterval","maxWindowSize","windowTime_1","windowToggle","windowToggle_1","windowWhen","windowWhen_1","withLatestFrom","withLatestFrom_1","zipProto","zipAll","zipAll_1","TimeInterval","SubscriptionLoggable_1","applyMixins_1","ColdObservable","messages","observable","logSubscribedFrame","logUnsubscribedFrame","scheduleMessages","subscriptions","messagesLength","message","notification","observe","frame","applyMixins","SubscriptionLoggable","SubscriptionLog_1","push","SubscriptionLog","now","subscriptionLogs","oldSubscriptionLog","subscribedFrame","derivedCtor","baseCtors","baseCtor","propertyKeys","getOwnPropertyNames","j","len2","name_1","HotObservable","setup","unsubscribedFrame","Notification_1","ColdObservable_1","HotObservable_1","VirtualTimeScheduler_1","defaultMaxFrame","TestScheduler","assertDeepEqual","VirtualAction","hotObservables","coldObservables","flushTests","createTime","marbles","indexOf","frameTimeFactor","createColdObservable","parseMarbles","cold","createHotObservable","materializeInnerObservable","outerFrame","Notification","createNext","createError","createComplete","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","errorValue","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","flush","readyFlushTests","test","groupStart","subscriptionFrame","c","materializeInnerObservables","testMessages","subIndex","frameOffset","getValue","VirtualTimeScheduler","AsyncAction_1","AsyncScheduler_1","SchedulerAction","maxFrames","action","actions","execute","AsyncScheduler","work","active","id","requestAsyncId","sort","sortActions","recycleAsyncId","_execute","a","b","AsyncAction","getCORSRequest","XMLHttpRequest","XDomainRequest","getXMLHttpRequest","progId","progIds","ActiveXObject","ajaxGet","headers","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxPatch","ajaxGetJSON","mapResponse","responseType","parseXhrResponse","xhr","response","responseText","responseXML","urlOrRequest","request","createXHR","crossDomain","withCredentials","prop","AjaxSubscriber","get","post","delete","put","patch","getJSON","done","FormData","serializeBody","AjaxResponse","_b","user","password","setupEvents","open","setHeaders","contentType","splitIndex","substring","encodeURI","join","stringify","setRequestHeader","xhrTimeout","progressSubscriber","AjaxTimeoutError","xhrReadyStateChange","status_1","status","AjaxError","ontimeout","upload","xhrProgress_1","onprogress","xhrError_1","onreadystatechange","abort","originalEvent","ImmediateDefinition","setImmediate","bind","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","o","process","Boolean","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","fn","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","Math","random","onGlobalMessage","globalMessageHandler","event","slice","setTimeout","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","Immediate","Immediate_1","AsapAction","scheduled","AsapScheduler","AsapAction_1","AsapScheduler_1","RequestAnimationFrameDefinition","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","cb","AnimationFrame","AnimationFrame_1","AnimationFrameAction","AnimationFrameScheduler","AnimationFrameAction_1","AnimationFrameScheduler_1","animationFrame","AuditOperator","AuditSubscriber","hasValue","_next","throttled","clearThrottle","remove","isDate_1","TimerObservable","isDate","initialDelay","TimerObservable_1","BufferOperator","BufferSubscriber","BufferCountOperator","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","buffers","splice","BufferTimeOperator","dispatchBufferTimeSpanOnly","prevContext","closeContext","openContext","closeAction","dispatchBufferCreation","dispatchBufferClose","BufferTimeSubscriber","Context","contexts","timespanOnly","timeSpanOnlyState","closeState","creationState","filledBufferContext","onBufferFull","_unsubscribe","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","CatchOperator","caught","CatchSubscriber","isStopped","err2","_unsubscribeAndRecycle","none","CombineLatestSubscriber","toRespond","unused","oldVal","_tryProject","CountOperator","CountSubscriber","_tryPredicate","DebounceOperator","DebounceSubscriber","durationSubscription","_tryNext","emitValue","DebounceTimeOperator","debouncedNext","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","absoluteDelay","delayFor","abs","DelayOperator","DelaySubscriber","errored","time","_schedule","scheduleNotification","DelayMessage","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","notifyError","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","parent","sourceSubscribed","subscribeToSource","DeMaterializeOperator","DeMaterializeSubscriber","minimalSetImpl","MinimalSet","_values","has","defineProperty","clear","Set","DistinctOperator","Set_1","DistinctSubscriber","_useKeySelector","_finalizeNext","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","ElementAtOperator","ArgumentOutOfRangeError_1","ArgumentOutOfRangeError","ElementAtSubscriber","EveryOperator","EverySubscriber","everyValueMatch","SwitchFirstOperator","SwitchFirstSubscriber","hasCompleted","hasSubscription","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","ExpandOperator","ExpandSubscriber","subscribeToProjection","FinallyOperator","FinallySubscriber","FindValueOperator","yieldIndex","FindValueSubscriber","FirstOperator","EmptyError_1","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","EmptyError","MapPolyfill","size","_keys","set","forEach","MapPolyfill_1","Map","FastMap","GroupByOperator","Map_1","FastMap_1","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","element","group","groupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","IgnoreElementsOperator","IgnoreElementsSubscriber","IsEmptyOperator","IsEmptySubscriber","LastOperator","LastSubscriber","MapToOperator","MapToSubscriber","MaterializeOperator","MaterializeSubscriber","MergeMapToOperator","ish","MergeMapToSubscriber","_innerSub","MergeScanOperator","MergeScanSubscriber","acc","OnErrorResumeNextOperator","FromObservable_1","FromObservable","OnErrorResumeNextSubscriber","subscribeToNextSource","PairwiseOperator","PairwiseSubscriber","hasPrev","prev","not","pred","notPred","FilterOperator","FilterSubscriber","not_1","plucker","props","currentProp","p","ObjectUnsubscribedError_1","BehaviorSubject","_value","hasError","thrownError","ObjectUnsubscribedError","BehaviorSubject_1","hasNext","EMPTY","RaceOperator","RaceSubscriber","hasFirst","RepeatOperator","RepeatSubscriber","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","RetryOperator","RetrySubscriber","RetryWhenOperator","RetryWhenSubscriber","errors","SampleOperator","sampleSubscriber","SampleSubscriber","SampleTimeOperator","dispatchNotification","SampleTimeSubscriber","SequenceEqualOperator","SequenceEqualSubscriber","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","_c","areEqual","nextB","refCount_1","ConnectableObservable","subjectFactory","_refCount","_isComplete","getSubject","_subject","connect","connection","_connection","ConnectableSubscriber","refCount","connectableProto","connectableObservableDescriptor","writable","connectable","SubjectSubscriber","RefCountSubscriber","RefCountOperator","refCounter","sharedConnection","MulticastOperator","ConnectableObservable_1","shareSubjectFactory","QueueAction","QueueScheduler","QueueAction_1","QueueScheduler_1","queue_1","SubjectSubscription_1","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","SubjectSubscription","ObserveOnSubscriber","eventsCount","spliceCount","shareReplayOperator","isComplete","name","stack","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","SkipOperator","SkipSubscriber","SkipLastOperator","_skipCount","SkipLastSubscriber","_ring","skipCount","currentIndex","ring","oldValue","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","promise","_isScalar","then","getIterator","iterator_1","iterator","StringIterator","ArrayIterator","toLength","isNaN","numberIsFinite","sign","floor","maxSafeInteger","isFinite","valueAsNumber","IteratorObservable","return","str","charAt","arr","pow","ScalarObservable_1","ArrayLikeObservable","arrayLike","ScalarObservable","kind","accept","toObservable","undefinedValueNotification","completeNotification","ObserveOnOperator","scheduleMessage","ObserveOnMessage","isArrayLike_1","isPromise_1","IteratorObservable_1","ArrayLikeObservable_1","observable_1","isPromise","isArrayLike","MergeMapOperator","MergeMapSubscriber","_notifyResultSelector","identity_1","identity","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","TakeOperator","TakeSubscriber","TakeUntilOperator","TakeUntilSubscriber","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","DoOperator","DoSubscriber","safeSubscriber","syncErrorThrown","syncErrorValue","ThrottleOperator","leading","trailing","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","_trailingValue","tryDurationSelector","_sendTrailing","ThrottleTimeOperator","ThrottleTimeSubscriber","TimeIntervalOperator","TimeIntervalSubscriber","lastTime","span","TimeoutError","absoluteTimeout","waitFor","TimeoutOperator","TimeoutError_1","errorInstance","TimeoutSubscriber","scheduleTimeout","dispatchTimeout","Date","TimeoutWithOperator","TimeoutWithSubscriber","MapOperator","MapSubscriber","Timestamp","hasSeed","ScanOperator","ScanSubscriber","_seed","TakeLastOperator","TakeLastSubscriber","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","pipe_1","pipe","toArrayReducer","item","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","WindowCountOperator","WindowCountSubscriber","windows","Action","Action_1","pending","setInterval","clearInterval","Scheduler","Scheduler_1","val","parseFloat","WindowTimeOperator","dispatchWindowTimeSpanOnly","closeWindow","dispatchWindowCreation","timeSpanState","dispatchWindowClose","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","numberOfNextedValues","window_2","WindowToggleOperator","WindowToggleSubscriber","openSubscription","subscriberIndex","rxSubscriber_1","rxSubscriber","copy","_trySubscribe","asObservable","unsubscribeClosingNotification","closingNotification","WithLatestFromOperator","WithLatestFromSubscriber","found","toSubscriber","Observer_1","fns","pipeFromArray","input","toSubscriber_1","observerOrNext","sink","PromiseCtor","Rx","Promise","resolve","reject","operations","toPromise","isObject","tryCatcher","tryCatchTarget","UnsubscriptionError","flattenUnsubscriptionErrors","errs","UnsubscriptionError_1","isObject_1","_parent","_parents","_subscriptions","hasErrors","trial","sub","teardown","_addParent","tmp","subscriptionIndex","Symbol","for","$$rxSubscriber","destinationOrNext","SafeSubscriber","_parentSubscriber","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","InnerSubscriber","getSymbolObservable","$$observable","outerSubscriber","InnerSubscriber_1","obs","msg","__window","__self","WorkerGlobalScope","__global","global","_root","symbolIteratorPonyfill","$$iterator","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","mergeMap_2","TestScheduler_1","animationFrame_1","_operators","operators"],"mappings":"yMA2QA,SAAAA,cAAyBC,KACf,GAAAC,OAAAD,IAAKC,MAAEC,QAAAF,IAAOE,OACtBA,SAAQC,KAAKF,OACbC,QAAQE,WAOV,QAAAC,eAA0BL,KAChB,GAAAM,KAAAN,IAAGM,GAAEN,KAAOE,QACZK,MAAMD,oOAvRhBE,aAAAC,WAA2B,mBAI3BC,WAAAD,WAAyB,sBACzBE,cAAAF,WAA4B,yBAC5BG,eAAAH,WAA6B,qBAO7BI,wBAAA,SAAAC,QAsKE,QAAAD,yBAAoBE,aACAC,SACAC,KACAC,QACAC,WAClBL,OAAAM,KAAOC,MALWA,KAAYN,aAAZA,aACAM,KAAQL,SAARA,SACAK,KAAIJ,KAAJA,KACAI,KAAOH,QAAPA,QACAG,KAASF,UAATA,UA8EtB,MAxPgDG,WAAAT,wBAAaC,QA8JpDD,wBAAMU,OAAb,SAAiBC,KACAR,SACAG,WACf,WAFe,KAAAH,WAAAA,aAAqCS,IAE7C,eAAoB,GAAAR,SAAAS,GAAc,EAAdA,GAAAC,UAAcC,OAAdF,KAAAT,KAAAS,GAAA,GAAAC,UAAcD,GACvC,OAAO,IAAIb,yBAA2BW,KAAWR,SAAUC,KAAMI,KAAMF,aAYjEN,wBAAAgB,UAAUC,WAApB,SAAqBC,YACnB,GAAMhB,cAAeM,KAAKN,aACpBE,KAAOI,KAAKJ,KACZE,UAAYE,KAAKF,UACnBjB,QAAUmB,KAAKnB,OAEnB,IAAKiB,UA6BH,MAAOA,WAAUa,SAASnB,wBAAwBoB,SAAU,GAAKC,OAAQb,KAAMU,WAAUA,WAAEb,QAASG,KAAKH,SA5BzG,KAAKhB,QAAS,CACZA,QAAUmB,KAAKnB,QAAU,GAAIU,gBAAYuB,YACzC,IAAMC,SAAU,QAAAC,iBAA8B,GAAAC,cAAAZ,GAAmB,EAAnBA,GAAAC,UAAmBC,OAAnBF,KAAAY,UAAAZ,GAAA,GAAAC,UAAmBD,GAC/D,IAAMQ,QAAeG,UAAWH,OACxBlB,SAAAkB,OAAQlB,SAAEd,QAAAgC,OAAOhC,OACzB,IAAIc,SAAU,CACZ,GAAMuB,UAAS7B,WAAQ8B,SAACxB,UAAUyB,MAAMpB,KAAMiB,UAC1CC,YAAW5B,cAAW+B,YACxBxC,QAAQK,MAAMI,cAAW+B,YAACC,IAE1BzC,QAAQC,KAAKoC,UACbrC,QAAQE,gBAGVF,SAAQC,KAAKmC,UAAUV,QAAU,EAAIU,UAAU,GAAKA,WACpDpC,QAAQE,WAINgC,SAASF,OAASb,IAETX,YAAQ8B,SAACzB,cAAc0B,MAAMpB,KAAKH,QAASD,KAAK2B,OAAOR,YACvDzB,cAAW+B,aACxBxC,QAAQK,MAAMI,cAAW+B,YAACC,GAG9B,MAAOzC,SAAQ2C,UAAUd,aAMtBlB,wBAAQoB,SAAf,SAAmBa,OACjB,GAAMC,MAA2B1B,KACzBa,OAAAY,MAAMZ,OAAEH,WAAAe,MAAUf,WAAEb,QAAA4B,MAAO5B,QAC3BH,aAAAmB,OAAYnB,aAAEE,KAAAiB,OAAIjB,KAAEE,UAAAe,OAASf,UACjCjB,QAAUgC,OAAOhC,OAErB,KAAKA,QAAS,CACZA,QAAUgC,OAAOhC,QAAU,GAAIU,gBAAYuB,YAE3C,IAAMC,SAAU,QAAAC,iBAA8B,GAAAC,cAAAZ,GAAmB,EAAnBA,GAAAC,UAAmBC,OAAnBF,KAAAY,UAAAZ,GAAA,GAAAC,UAAmBD,GAC/D,IAAMQ,QAAeG,UAAWH,OACxBlB,SAAAkB,OAAQlB,SAAEd,QAAAgC,OAAOhC,OACzB,IAAIc,SAAU,CACZ,GAAMgC,UAAStC,WAAQ8B,SAACxB,UAAUyB,MAAMpB,KAAMiB,UAC1CU,YAAWrC,cAAW+B,YACxBK,KAAKE,IAAI9B,UAAUa,SAAS3B,cAAe,GAAKC,IAAKK,cAAW+B,YAACC,EAAGzC,QAAOA,WAE3E6C,KAAKE,IAAI9B,UAAUa,SAASjC,aAAc,GAAKE,MAAO+C,SAAQ9C,QAAOA,eAElE,CACL,GAAMD,OAAQqC,UAAUV,QAAU,EAAIU,UAAU,GAAKA,SACrDS,MAAKE,IAAI9B,UAAUa,SAASjC,aAAc,GAAKE,MAAKA,MAAEC,QAAOA,YAI3DkC,SAASF,OAASA,MAETxB,YAAQ8B,SAACzB,cAAc0B,MAAMvB,QAASD,KAAK2B,OAAOR,YAClDzB,cAAW+B,aACxBxC,QAAQK,MAAMI,cAAW+B,YAACC,GAI9BI,KAAKE,IAAI/C,QAAQ2C,UAAUd,cAE/BlB,yBAxPgDL,aAAU0C,WAA7CC,SAAuBtC,wBAwPnCA,mLCrQDuC,uCAAA3C,WAA0C,2CAE7B0C,SAAYE,aAAGD,0BAAuBvC,wBAACU,6KCFpDf,0BAAAC,WAA2B,oBAC3B6C,eAAA7C,WAAmD,+BAEnDD,cAAU0C,WAACG,aAAeC,eAAkBD,4NCyN5C,SAAApB,UAAqDa,OACnD,GAAMC,MAAuB1B,KACrBa,OAAAY,MAAMZ,OAAEH,WAAAe,MAAUf,WAAEb,QAAA4B,MAAO5B,QAEnCqC,GAAuDrB,OAA/CnB,aAAAwC,GAAYxC,aAAEE,KAAAsC,GAAItC,KAAEE,UAAAoC,GAASpC,UACjCjB,QAAUgC,OAAOhC,OAErB,KAAKA,QAAS,CACZA,QAAUgC,OAAOhC,QAAU,GAAIU,gBAAYuB,YAE3C,IAAMC,SAAU,QAAAC,iBAA8B,GAAAC,cAAAZ,GAAmB,EAAnBA,GAAAC,UAAmBC,OAAnBF,KAAAY,UAAAZ,GAAA,GAAAC,UAAmBD,GAC/D,IAAMQ,QAAeG,UAAWH,OACxBlB,SAAAkB,OAAQlB,SAAEd,QAAAgC,OAAOhC,QACnBI,IAAMgC,UAAUkB,OAEtB,IAAIlD,IACFyC,KAAKE,IAAI9B,UAAUa,SAAS3B,cAAe,GAAKC,IAAGA,IAAEJ,QAAOA,eAC7D,IAAUc,SAAU,CACnB,GAAMgC,UAAStC,WAAQ8B,SAACxB,UAAUyB,MAAMpB,KAAMiB,UAC1CU,YAAWrC,cAAW+B,YACxBK,KAAKE,IAAI9B,UAAUa,SAAS3B,cAAe,GAAKC,IAAKK,cAAW+B,YAACC,EAAGzC,QAAOA,WAE3E6C,KAAKE,IAAI9B,UAAUa,SAASjC,aAAc,GAAKE,MAAO+C,SAAQ9C,QAAOA,eAElE,CACL,GAAMD,OAAQqC,UAAUV,QAAU,EAAIU,UAAU,GAAKA,SACrDS,MAAKE,IAAI9B,UAAUa,SAASjC,aAAc,GAAKE,MAAKA,MAAEC,QAAOA,YAI3DkC,SAASF,OAASA,MAETxB,YAAQ8B,SAACzB,cAAc0B,MAAMvB,QAASD,KAAK2B,OAAOR,YAClDzB,cAAW+B,aACxBK,KAAKE,IAAI9B,UAAUa,SAAS3B,cAAe,GAAKC,IAAKK,cAAW+B,YAACC,EAAGzC,QAAOA,WAI/E6C,KAAKE,IAAI/C,QAAQ2C,UAAUd,aAO7B,QAAAhC,cAAyBC,KACf,GAAAC,OAAAD,IAAKC,MAAEC,QAAAF,IAAOE,OACtBA,SAAQC,KAAKF,OACbC,QAAQE,WAOV,QAAAC,eAA0BL,KAChB,GAAAM,KAAAN,IAAGM,GAAEN,KAAOE,QACZK,MAAMD,oOArRhBE,aAAAC,WAA2B,mBAK3BC,WAAAD,WAAyB,sBACzBE,cAAAF,WAA4B,yBAC5BG,eAAAH,WAA6B,qBAO7BgD,4BAAA,SAAA3C,QAoJE,QAAA2C,6BAAoB1C,aACAC,SACAC,KACAC,QACDC,WACjBL,OAAAM,KAAOC,MALWA,KAAYN,aAAZA,aACAM,KAAQL,SAARA,SACAK,KAAIJ,KAAJA,KACAI,KAAOH,QAAPA,QACDG,KAASF,UAATA,UA8CrB,MAtMoDG,WAAAmC,4BAAa3C,QA4IxD2C,4BAAMlC,OAAb,SAAiBC,KACAR,SACAG,WACf,WAFe,KAAAH,WAAAA,aAAqCS,IAE7C,eAAoB,GAAAR,SAAAS,GAAc,EAAdA,GAAAC,UAAcC,OAAdF,KAAAT,KAAAS,GAAA,GAAAC,UAAcD,GACvC,OAAO,IAAI+B,6BAA+BjC,KAAWR,SAAUC,KAAMI,KAAMF,aAYrEsC,4BAAA5B,UAAUC,WAApB,SAAqBC,YACnB,GAAMhB,cAAeM,KAAKN,aACpBE,KAAOI,KAAKJ,KACZE,UAAYE,KAAKF,UACnBjB,QAAUmB,KAAKnB,OAEnB,IAAKiB,UAiCH,MAAOA,WAAUa,SAASC,SAAU,GAAKC,OAAQb,KAAMU,WAAUA,WAAEb,QAASG,KAAKH,SAhCjF,KAAKhB,QAAS,CACZA,QAAUmB,KAAKnB,QAAU,GAAIU,gBAAYuB,YACzC,IAAMC,SAAU,QAAAC,iBAA8B,GAAAC,cAAAZ,GAAmB,EAAnBA,GAAAC,UAAmBC,OAAnBF,KAAAY,UAAAZ,GAAA,GAAAC,UAAmBD,GAC/D,IAAMQ,QAAeG,UAAWH,OACxBlB,SAAAkB,OAAQlB,SAAEd,QAAAgC,OAAOhC,QACnBI,IAAMgC,UAAUkB,OAEtB,IAAIlD,IACFJ,QAAQK,MAAMD,SACf,IAAUU,SAAU,CACnB,GAAMuB,UAAS7B,WAAQ8B,SAACxB,UAAUyB,MAAMpB,KAAMiB,UAC1CC,YAAW5B,cAAW+B,YACxBxC,QAAQK,MAAMI,cAAW+B,YAACC,IAE1BzC,QAAQC,KAAKoC,UACbrC,QAAQE,gBAGVF,SAAQC,KAAKmC,UAAUV,QAAU,EAAIU,UAAU,GAAKA,WACpDpC,QAAQE,WAINgC,SAASF,OAASb,IAETX,YAAQ8B,SAACzB,cAAc0B,MAAMpB,KAAKH,QAASD,KAAK2B,OAAOR,YACvDzB,cAAW+B,aACxBxC,QAAQK,MAAMI,cAAW+B,YAACC,GAG9B,MAAOzC,SAAQ2C,UAAUd,aAK/B0B,6BAtMoDjD,aAAU0C,WAAjDC,SAA2BM,4BAsMvCA,+LCpNDC,2CAAAjD,WAA8C,+CAEjC0C,SAAgBQ,iBAAGD,8BAA2BD,4BAAClC,qLCF5Df,0BAAAC,WAA2B,oBAC3BmD,mBAAAnD,WAA2D,mCAE3DD,cAAU0C,WAACS,iBAAmBC,mBAAsBD,4OCuIpD,SAAAE,qBAAoC,GAAAC,gBAAApC,GAG2B,EAH3BA,GAAAC,UAG2BC,OAH3BF,KAAAoC,YAAApC,GAAA,GAAAC,UAG2BD,GAC7D,IAAIqC,SAAyC,KACzC5C,UAAwB,IAgB5B,OAdI6C,eAAWC,YAACH,YAAYA,YAAYlC,OAAS,MAC/CT,UAAwB2C,YAAYI,OAGa,kBAAxCJ,aAAYA,YAAYlC,OAAS,KAC1CmC,QAAwCD,YAAYI,OAK3B,IAAvBJ,YAAYlC,QAAgBuC,UAAOC,QAACN,YAAY,MAClDA,YAAsCA,YAAY,IAG7C,GAAIO,mBAAeC,gBAACR,YAAa3C,WAAWoD,KAAK,GAAIC,iBAAqBC,sBAAOV,aA7J1FC,2BAAAvD,WAA8B,0BAC9B0D,UAAA1D,WAA0B,qBAC1B4D,kBAAA5D,WAAkC,mCAClC+D,gBAAA/D,WAAwC,+BAqIxB0C,SAAaU,cAsB5BA,sLChKDrD,0BAAAC,WAA2B,oBAC3B+D,gBAAA/D,WAAqD,gCAErDD,cAAU0C,WAACW,cAAgBW,gBAAmBX,wKCH9CrD,0BAAAC,WAA2B,oBAC3BiE,SAAAjE,WAAuC,yBAEvCD,cAAU0C,WAACN,OAAS8B,SAAY9B,8ZCHhCpC,aAAAC,WAAkD,mBAIlDkE,oBAAAlE,WAAkC,+BAClCmE,kBAAAnE,WAAgC,wBAMhCoE,gBAAA,SAAA/D,QAoDE,QAAA+D,iBAAoBC,mBAClBhE,OAAAM,KAAOC,MADWA,KAAiByD,kBAAjBA,kBAOtB,MA3DwCxD,WAAAuD,gBAAa/D,QAgD5C+D,gBAAMtD,OAAb,SAAiBuD,mBACf,MAAO,IAAID,iBAAgBC,oBAOnBD,gBAAAhD,UAAUC,WAApB,SAAqBC,YACnB,MAAO,IAAIgD,iBAAgBhD,WAAYV,KAAKyD,oBAEhDD,iBA3DwCrE,aAAU0C,WAArCC,SAAe0B,gBA2D3BA,eAED,IAAAE,iBAAA,SAAAjE,QACE,QAAAiE,iBAAYC,YACQC,SAClBnE,OAAAM,KAAAC,KAAM2D,aADY3D,KAAO4D,QAAPA,QAElB5D,KAAK6D,WAiBT,MArBiC5D,WAAAyD,gBAAqBjE,QAO5CiE,gBAAAlD,UAAQqD,SAAhB,WACE,IACE7D,KAAK8D,eACL,MAAO7E,KACPe,KAAK+D,OAAO9E,OAIRyE,gBAAAlD,UAAYsD,aAApB,WACE,GAAME,QAAShE,KAAK4D,SAChBI,SACFhE,KAAK4B,IAAI0B,oBAAiBW,kBAACjE,KAAMgE,UAGvCN,iBArBiCH,kBAAeW,6JCxEhDC,+BAAA/E,WAAkC,mCAErB0C,SAAKsC,MAAGD,kBAAeX,gBAACtD,+JCFrCf,0BAAAC,WAA2B,oBAC3BiF,QAAAjF,WAAqC,wBAErCD,cAAU0C,WAACuC,MAAQC,QAAWD,kJCH9BE,+BAAAlF,WAAkC,mCAErB0C,SAAKyC,MAAGD,kBAAeE,gBAACtE,+JCFrCf,0BAAAC,WAA2B,oBAC3BqF,QAAArF,WAAqC,wBAErCD,cAAU0C,WAAC0C,MAAQE,QAAWF,sdCH9BpF,aAAAC,WAAkD,mBAGlDkF,kBAAAlF,WAAgC,mCAChC0D,UAAA1D,WAAwB,qBAExBkE,oBAAAlE,WAAkC,+BAClCmE,kBAAAnE,WAAgC,wBAQhCsF,mBAAA,SAAAjF,QACE,QAAAiF,oBAAoBC,QACAC,gBAClBnF,OAAAM,KAAOC,MAFWA,KAAO2E,QAAPA,QACA3E,KAAc4E,eAAdA,eAqJtB,MAvJ2C3E,WAAAyE,mBAAajF,QA2H/CiF,mBAAMxE,OAAb,eAAiB,GAAAyE,YAAAtE,GAEgD,EAFhDA,GAAAC,UAEgDC,OAFhDF,KAAAsE,QAAAtE,GAAA,GAAAC,UAEgDD,GAC/D,IAAgB,OAAZsE,SAAyC,IAArBrE,UAAUC,OAChC,MAAO,IAAI+D,mBAAeE,eAG5B,IAAII,gBAAiD,IAWrD,OAV2C,kBAAhCD,SAAQA,QAAQpE,OAAS,KAClCqE,eAAiDD,QAAQ9B,OAKpC,IAAnB8B,QAAQpE,QAAgBuC,UAAOC,QAAC4B,QAAQ,MAC1CA,QAA6CA,QAAQ,IAGhC,IAAnBA,QAAQpE,OACH,GAAI+D,mBAAeE,gBAGrB,GAAIE,oBAAsDC,QAASC,iBAGlEF,mBAAAlE,UAAUC,WAApB,SAAqBC,YACnB,MAAO,IAAImE,oBAAmBnE,WAAYV,KAAK2E,QAAS3E,KAAK4E,iBAEjEF,oBAvJ2CvF,aAAU0C,WAAxCC,SAAkB4C,mBAuJ9BA,kBAOD,IAAAG,oBAAA,SAAApF,QAME,QAAAoF,oBAAYlB,YACQgB,QACAC,gBAClBnF,OAAAM,KAAAC,KAAM2D,aAFY3D,KAAO2E,QAAPA,QACA3E,KAAc4E,eAAdA,eAPZ5E,KAAS8E,UAAG,EAGZ9E,KAAU+E,WAAG,CAOnB,IAAMC,KAAML,QAAQpE,MACpBP,MAAKiF,MAAQD,IACbhF,KAAKkF,OAAS,GAAIC,OAAMH,IAExB,KAAK,GAAII,GAAI,EAAGA,EAAIJ,IAAKI,IAAK,CAC5B,GAAMvE,QAAS8D,QAAQS,GACjBC,kBAAoB/B,oBAAiBW,kBAACjE,KAAMa,OAAQ,KAAMuE,EAE5DC,qBACKA,kBAAmBC,WAAaF,EACvCpF,KAAK4B,IAAIyD,qBAsCjB,MA3DoCpF,WAAA4E,mBAAqBpF,QA0BvDoF,mBAAArE,UAAU+E,WAAV,SAAWC,WAAiBC,WACjBH,WAAoBI,WACpBC,UACT3F,KAAKkF,OAAOI,YAAcG,WACfE,SAAUC,YACbD,SAAUC,WAAY,EAC5B5F,KAAK+E,eAITF,mBAAArE,UAAcqF,eAAd,SAAeF,UACb,GAAMhC,aAAc3D,KAAK2D,YACzBzB,GAAmDlC,KAA3C+E,WAAA7C,GAAU6C,WAAEH,eAAA1C,GAAc0C,eAAEM,OAAAhD,GAAMgD,OACpCF,IAAME,OAAO3E,MAEnB,KAAWoF,SAAUC,UAEnB,WADAjC,aAAY5E,UAMd,MAFAiB,KAAK8E,YAEkBE,IAAvB,CAIA,GAAID,aAAeC,IAAK,CACtB,GAAMpG,OAAQgG,eAAiBA,eAAexD,MAAMpB,KAAMkF,QAAUA,MACpEvB,aAAY7E,KAAKF,OAGnB+E,YAAY5E,aAEhB8F,oBA3DoCtB,kBAAeW,mKC7KnD4B,kCAAA1G,WAAqC,sCAExB0C,SAAQiE,SAAGD,qBAAkBpB,mBAACxE,qKCF3Cf,0BAAAC,WAA2B,oBAC3B4G,WAAA5G,WAA2C,2BAE3CD,cAAU0C,WAACkE,SAAWC,WAAcD,+JCHpC5G,0BAAAC,WAA2B,oBAC3B6G,OAAA7G,WAAmC,uBAEnCD,cAAU0C,WAACqE,KAAOD,OAAUC,mOCU5B,SAAAC,yBAAiCC,WAC/B,QAASA,WAA8C,kBAA1BA,WAAUC,aAAkE,kBAA7BD,WAAUE,eAOxF,QAAAC,2BAAmCH,WACjC,QAASA,WAAqC,kBAAjBA,WAAUI,IAA8C,kBAAlBJ,WAAUK,IAG/E,QAAAC,YAAoBN,WAClB,QAASA,WAA0C,sBAA7BO,SAAS5G,KAAKqG,WAGtC,QAAAQ,kBAA0BR,WACxB,QAASA,WAA0C,4BAA7BO,SAAS5G,KAAKqG,WAGtC,QAAAS,eAAuBT,WACrB,QAASA,WAAmD,kBAA/BA,WAAUU,kBAA4E,kBAAlCV,WAAUW,mPAlC7F5H,aAAAC,WAA2B,mBAC3BC,WAAAD,WAAyB,sBACzB4H,aAAA5H,WAA2B,wBAC3BE,cAAAF,WAA4B,yBAC5B6H,eAAA7H,WAA6B,qBAGvBuH,SAAqBO,OAAO1G,UAAUmG,SA6C5CQ,oBAAA,SAAA1H,QAwIE,QAAA0H,qBAAoBf,UACAgB,UACAzH,SACA0H,SAClB5H,OAAAM,KAAOC,MAJWA,KAASoG,UAATA,UACApG,KAASoH,UAATA,UACApH,KAAQL,SAARA,SACAK,KAAOqH,QAAPA,QAiDtB,MA5L4CpH,WAAAkH,oBAAa1H,QA6HhD0H,oBAAMjH,OAAb,SAAiBoH,OACAF,UACAC,QACA1H,UAKf,MAJIqH,cAAUO,WAACF,WACb1H,SAAgB0H,QAChBA,YAAUjH,IAEL,GAAI+G,qBAAoBG,OAAQF,UAAWzH,SAAU0H,UAU/CF,oBAAiBK,kBAAhC,SAAoCpB,UACAgB,UACArG,QACAL,WACA2G,SAClC,GAAII,YACJ,IAAIf,WAAWN,YAAcQ,iBAAiBR,WAC5C,IAAK,GAAIhB,GAAI,EAAGJ,IAAMoB,UAAU7F,OAAQ6E,EAAIJ,IAAKI,IAC/C+B,oBAAoBK,kBAAkBpB,UAAUhB,GAAIgC,UAAWrG,QAASL,WAAY2G,aAEvF,IAAUR,cAAcT,WAAY,CACnC,GAAMsB,UAAStB,SACfA,WAAUU,iBAAiBM,UAA0BrG,QAAkBsG,SACvEI,YAAc,WAAM,MAAAC,UAAOX,oBAAoBK,UAA3BrG,cAHf,IAIIwF,0BAA0BH,WAAY,CAC/C,GAAMuB,UAASvB,SACfA,WAAUI,GAAGY,UAAWrG,SACxB0G,YAAc,WAAM,MAAAE,UAAOlB,IAAIW,UAAXrG,cAHf,CAAA,IAIIoF,wBAAwBC,WAKjC,KAAM,IAAIwB,WAAU,uBAJpB,IAAMC,UAASzB,SACfA,WAAUC,YAAYe,UAAWrG,SACjC0G,YAAc,WAAM,MAAAI,UAAOvB,eAAec,UAAtBrG,UAKtBL,WAAWkB,IAAI,GAAIqF,gBAAYa,aAACL,eAGxBN,oBAAA3G,UAAUC,WAApB,SAAqBC,YACnB,GAAM0F,WAAYpG,KAAKoG,UACjBgB,UAAYpH,KAAKoH,UACjBC,QAAUrH,KAAKqH,QACf1H,SAAWK,KAAKL,SAClBoB,QAAApB,SAAqB,eAAC,GAAAC,SAAAS,GAAc,EAAdA,GAAAC,UAAcC,OAAdF,KAAAT,KAAAS,GAAA,GAAAC,UAAcD,GACtC,IAAI2D,QAAS3E,WAAQ8B,SAACxB,UAAAyB,UAAA,GAAaxB,KAC/BoE,UAAW1E,cAAW+B,YACxBX,WAAWxB,MAAMI,cAAW+B,YAACC,GAE7BZ,WAAW5B,KAAKkF,SAEhB,SAAC1C,GAAW,MAAAZ,YAAW5B,KAAXwC,GAEhB6F,qBAAoBK,kBAAkBpB,UAAWgB,UAAWrG,QAASL,WAAY2G,UAErFF,qBA5L4ChI,aAAU0C,WAAzCC,SAAmBqF,oBA4L/BA,wKChPDY,mCAAA3I,WAAsC,uCAEzB0C,SAASkG,UAAGD,sBAAmBZ,oBAACjH,uKCF7Cf,0BAAAC,WAA2B,oBAC3B6I,YAAA7I,WAA6C,4BAE7CD,cAAU0C,WAACmG,UAAYC,YAAeD,kaCHtChB,aAAA5H,WAA2B,wBAC3BD,aAAAC,WAA2B,mBAC3B6H,eAAA7H,WAA6B,qBAQ7B8I,2BAAA,SAAAzI,QAwDE,QAAAyI,4BAAoBC,WACAC,cACAzI,UAClBF,OAAAM,KAAOC,MAHWA,KAAUmI,WAAVA,WACAnI,KAAaoI,cAAbA,cACApI,KAAQL,SAARA,SAyCtB,MAnGmDM,WAAAiI,2BAAazI,QAkDvDyI,2BAAMhI,OAAb,SAAiBiI,WACAC,cACAzI,UACf,MAAO,IAAIuI,4BAA2BC,WAAYC,cAAezI,WASzDuI,2BAAA1H,UAAUC,WAApB,SAAqBC,YAArB,GAAA2H,OAiBCrI,KAhBOoI,cAAgBpI,KAAKoI,cAErBrH,QAAYf,KAAKL,SAAW,eAAC,GAAAC,SAAAS,GAAmB,EAAnBA,GAAAC,UAAmBC,OAAnBF,KAAAT,KAAAS,GAAA,GAAAC,UAAmBD,GACpDgI,OAAKC,cAAc5H,WAAYd,OAC7B,SAAS0B,GAAUZ,WAAW5B,KAAKwC,IAEjCiH,SAAWvI,KAAKwI,gBAAgBzH,QAASL,WAE1CsG,cAAUO,WAACa,gBAIhB1H,WAAWkB,IAAA,GAAQqF,gBAAYa,aAAC,WAE9BM,cAAcrH,QAASwH,cAInBL,2BAAA1H,UAAa8H,cAArB,SAAsB5H,WAA2Bd,MAC/C,IACE,GAAMoE,QAAYhE,KAAKL,SAAAyB,MAALpB,KAAiBJ,KACnCc,YAAW5B,KAAKkF,QAElB,MAAO1C,GACLZ,WAAWxB,MAAMoC,KAIb4G,2BAAA1H,UAAegI,gBAAvB,SAAwBzH,QAA2B0H,iBACjD,IACE,MAAOzI,MAAKmI,WAAWpH,UAAY,KAErC,MAAOO,GACLmH,gBAAgBvJ,MAAMoC,KAG5B4G,4BAnGmD/I,aAAU0C,WAAhDC,SAA0BoG,2BAmGtCA,6LC7GDQ,0CAAAtJ,WAA6C,8CAEhC0C,SAAgB6G,iBAAGD,6BAA0BR,2BAAChI,qLCF3Df,0BAAAC,WAA2B,oBAC3BwJ,mBAAAxJ,WAA2D,mCAE3DD,cAAU0C,WAAC8G,iBAAmBC,mBAAsBD,qKCHpDE,iCAAAzJ,WAAoC,qCAEvB0C,SAAWgH,YAAGD,oBAAiBE,kBAAC7I,2KCF7Cf,0BAAAC,WAA2B,oBAC3B4J,cAAA5J,WAAiD,8BAEjDD,cAAU0C,WAACiH,YAAcE,cAAiBF,yYCD1C3J,aAAAC,WAA2B,mBAG3BuD,cAAAvD,WAA4B,yBAEtB6J,aAAe,SAAIrK,OAAa,MAAAA,QAiDtCsK,mBAAA,SAAAzJ,QACE,QAAAyJ,oBAAoBC,aACAC,UACAC,QACAzE,eACA9E,WAChBL,OAAAM,KAAOC,MALSA,KAAYmJ,aAAZA,aACAnJ,KAASoJ,UAATA,UACApJ,KAAOqJ,QAAPA,QACArJ,KAAc4E,eAAdA,eACA5E,KAASF,UAATA,UAyOtB,MA9O8CG,WAAAiJ,mBAAazJ,QAmHlDyJ,mBAAMhJ,OAAb,SAAoBoJ,sBACAF,UACAC,QACAE,2BACAzJ,WAClB,MAAwB,IAApBQ,UAAUC,OACL,GAAI2I,oBACeI,sBAAuBH,aACvBG,sBAAuBF,UACvBE,sBAAuBD,QACvBC,sBAAuB1E,gBAAkBqE,aACzCK,sBAAuBxJ,eAGhBM,KAA/BmJ,4BAA4C5G,cAAWC,YAAC2G,4BACnD,GAAIL,oBACNI,sBACHF,UACAC,QACAJ,aACYM,4BAGT,GAAIL,oBACNI,sBACHF,UACAC,QACkBE,2BACNzJ,YAGNoJ,mBAAA1I,UAAUC,WAApB,SAAqBC,YACnB,GAAIe,OAAQzB,KAAKmJ,YACjB,IAAInJ,KAAKF,UACP,MAAOE,MAAKF,UAAUa,SAA+BuI,mBAAmBtI,SAAU,GAChFF,WAAUA,WACV2I,QAASrJ,KAAKqJ,QACdD,UAAWpJ,KAAKoJ,UAChBxE,eAAgB5E,KAAK4E,eACrBnD,MAAKA,OAGT,KADA,GAAAS,IAAmDlC,KAA3CoJ,UAAAlH,GAASkH,UAAExE,eAAA1C,GAAc0C,eAAEyE,QAAAnH,GAAOmH,UACvC,CACD,GAAID,UAAW,CACb,GAAII,qBAAA,EACJ,KACEA,gBAAkBJ,UAAU3H,OAC5B,MAAOxC,KAEP,WADAyB,YAAWxB,MAAMD,KAGnB,IAAKuK,gBAAiB,CACpB9I,WAAW3B,UACX,QAGJ,GAAIH,WAAA,EACJ,KACEA,MAAQgG,eAAenD,OACvB,MAAOxC,KAEP,WADAyB,YAAWxB,MAAMD,KAInB,GADAyB,WAAW5B,KAAKF,OACZ8B,WAAW+I,OACb,KAEF,KACEhI,MAAQ4H,QAAQ5H,OAChB,MAAOxC,KAEP,WADAyB,YAAWxB,MAAMD,QAMRiK,mBAAQtI,SAAvB,SAA8Ba,OACpB,GAAAf,YAAAe,MAAUf,WAAE0I,UAAA3H,MAAS2H,SAC7B,KAAI1I,WAAW+I,OAAf,CAGA,GAAIhI,MAAMiI,YACR,IACEjI,MAAMA,MAAQA,MAAM4H,QAAQ5H,MAAMA,OAClC,MAAOxC,KAEP,WADAyB,YAAWxB,MAAMD,SAInBwC,OAAMiI,aAAc,CAEtB,IAAIN,UAAW,CACb,GAAII,qBAAA,EACJ,KACEA,gBAAkBJ,UAAU3H,MAAMA,OAClC,MAAOxC,KAEP,WADAyB,YAAWxB,MAAMD,KAGnB,IAAKuK,gBAEH,WADA9I,YAAW3B,UAGb,IAAI2B,WAAW+I,OACb,OAGJ,GAAI7K,MACJ,KACEA,MAAQ6C,MAAMmD,eAAenD,MAAMA,OACnC,MAAOxC,KAEP,WADAyB,YAAWxB,MAAMD,KAGnB,IAAIyB,WAAW+I,SAGf/I,WAAW5B,KAAKF,QACZ8B,WAAW+I,QAGf,MAA2CzJ,MAAMW,SAASc,SAE9DyH,oBA9O8C/J,aAAU0C,WAA3CC,SAAkBoH,mBA8O9BA,qKCtSDS,kCAAAvK,WAAmC,sCAEtB0C,SAAQ8H,SAAGD,qBAAkBT,mBAAChJ,qKCF3Cf,0BAAAC,WAA2B,oBAC3ByK,WAAAzK,WAA2C,2BAE3CD,cAAU0C,WAAC+H,SAAWC,WAAcD,6ZCHpCzK,aAAAC,WAAkD,mBAIlDkE,oBAAAlE,WAAkC,+BAClCmE,kBAAAnE,WAAgC,wBAMhC0K,aAAA,SAAArK,QAQE,QAAAqK,cAAoBV,UACAW,WACAC,YAClBvK,OAAAM,KAAOC,MAHWA,KAASoJ,UAATA,UACApJ,KAAU+J,WAAVA,WACA/J,KAAUgK,WAAVA,WAStB,MAnBwC/J,WAAA6J,aAAarK,QAE5CqK,aAAM5J,OAAb,SAAoBkJ,UACAW,WACAC,YAClB,MAAO,IAAIF,cAAaV,UAAWW,WAAYC,aASvCF,aAAAtJ,UAAUC,WAApB,SAAqBC,YACnB,GAAAwB,IAAkDlC,KAA1CoJ,UAAAlH,GAASkH,UAAEW,WAAA7H,GAAU6H,WAAEC,WAAA9H,GAAU8H,UAEzC,OAAO,IAAIC,cAAavJ,WAAY0I,UAAWW,WAAYC,aAE/DF,cAnBwC3K,aAAU0C,WAArCC,SAAYgI,aAmBxBA,YAED,IAAAG,cAAA,SAAAxK,QACE,QAAAwK,cAAYtG,YACQyF,UACAW,WACAC,YAClBvK,OAAAM,KAAAC,KAAM2D,aAHY3D,KAASoJ,UAATA,UACApJ,KAAU+J,WAAVA,WACA/J,KAAUgK,WAAVA,WAElBhK,KAAKkK,QAoBT,MA1BiCjK,WAAAgK,aAAqBxK,QAS5CwK,aAAAzJ,UAAK0J,MAAb,WACE,GAEIlG,QAFJ9B,GAAkDlC,KAA1CoJ,UAAAlH,GAASkH,UAAEW,WAAA7H,GAAU6H,WAAEC,WAAA9H,GAAU8H,UAGzC,KACEhG,OAAkBoF,WAClB,IAAMvI,QAASmD,OAAS+F,WAAaC,UAEjCnJ,QACFb,KAAK4B,IAAI0B,oBAAiBW,kBAACjE,KAAMa,SAEjCb,KAAKmK,YAEP,MAAOlL,KACPe,KAAK+D,OAAO9E,OAGlBgL,cA1BiC1G,kBAAeW,uJChChDkG,4BAAAhL,WAA+B,gCAElB0C,SAAGuI,IAAGD,eAAYN,aAAC5J,yJCFhCf,0BAAAC,WAA2B,oBAC3BkL,KAAAlL,WAAoB,qBAEpBD,cAAU0C,WAAC0I,GAAKD,KAAGD,sZCFnBG,YAAApL,WAA0B,uBAE1BD,aAAAC,WAA2B,mBAC3BqL,QAAArL,WAAsB,wBAOtBsL,mBAAA,SAAAjL,QAqDE,QAAAiL,oBAAoBC,OACA7K,eADR,KAAA6K,SAAAA,OAA0B,OAC1B,KAAA7K,YAAAA,UAAA2K,QAAqCG,OAC/CnL,OAAAM,KAAOC,MAFWA,KAAM2K,OAANA,OACA3K,KAASF,UAATA,YAEb0K,YAASK,UAACF,SAAWA,OAAS,KACjC3K,KAAK2K,OAAS,GAEX7K,WAA2C,kBAAvBA,WAAUa,WACjCX,KAAKF,UAAY2K,QAAKG,OAa5B,MAzEwC3K,WAAAyK,mBAAkBjL,QAkCjDiL,mBAAMxK,OAAb,SAAcyK,OACA7K,WACZ,WAFY,KAAA6K,SAAAA,OAAkB,OAClB,KAAA7K,YAAAA,UAAA2K,QAA6BG,OAClC,GAAIF,oBAAmBC,OAAQ7K,YAGjC4K,mBAAQ9J,SAAf,SAAgBa,OACN,GAAAqJ,OAAArJ,MAAKqJ,MAAEpK,WAAAe,MAAUf,WAAEiK,OAAAlJ,MAAMkJ,MAEjCjK,YAAW5B,KAAKgM,OAEZpK,WAAW+I,SAIfhI,MAAMqJ,OAAS,EAER9K,KAAMW,SAASc,MAAOkJ,UAcrBD,mBAAAlK,UAAUC,WAApB,SAAqBC,YACnB,GACMiK,QAAS3K,KAAK2K,OACd7K,UAAYE,KAAKF,SAEvBY,YAAWkB,IAAA9B,UAAca,SAAS+J,mBAAmB9J,SAAU+J,QAC7DG,MALY,EAKLpK,WAAUA,WAAEiK,OAAMA,WAG/BD,oBAzEwCvL,aAAU0C,WAArCC,SAAkB4I,mBAyE9BA,qKCpFDK,kCAAA3L,WAAqC,sCAExB0C,SAAQkJ,SAAGD,qBAAkBL,mBAACxK,qKCF3Cf,0BAAAC,WAA2B,oBAC3B6L,WAAA7L,WAA2C,2BAE3CD,cAAU0C,WAACmJ,SAAWC,WAAcD,iKCHpC7L,0BAAAC,WAA2B,oBAC3B8L,QAAA9L,WAAqC,wBAErCD,cAAU0C,WAACsJ,MAAQD,QAAWC,4JCH9BhM,0BAAAC,WAA2B,oBAC3BgM,OAAAhM,WAAmC,uBAEnCD,cAAU0C,WAACwJ,KAAOD,OAAUC,wXCH5BlM,aAAAC,WAA2B,mBAE3BkM,OAAAlM,WAAqB,kBAOrBmM,gBAAA,SAAA9L,QAoCE,QAAA8L,mBACE9L,OAAAM,KAAOC,MAMX,MA3CwCC,WAAAsL,gBAAa9L,QAgC5C8L,gBAAMrL,OAAb,WACE,MAAO,IAAIqL,kBAOHA,gBAAA/K,UAAUC,WAApB,SAAqBC,YACnB4K,OAAIE,QAERD,iBA3CwCpM,aAAU0C,WAArCC,SAAeyJ,gBA2C3BA,4JCpDDE,+BAAArM,WAAkC,mCAErB0C,SAAK4J,MAAGD,kBAAeF,gBAACrL,+JCFrCf,0BAAAC,WAA2B,oBAC3BuM,QAAAvM,WAAqC,wBAErCD,cAAU0C,WAAC6J,MAAQC,QAAWD,wJCH9BvM,0BAAAC,WAA2B,oBAC3BwM,KAAAxM,WAA+B,qBAE/BD,cAAU0C,WAACgK,GAAKD,KAAQC,4JCHxBC,iCAAA1M,WAAwC,oCAE3B0C,SAAiBiK,kBAAGD,oBAAuBE,wMCFxD7M,0BAAAC,WAA2B,oBAC3B0M,oBAAA1M,WAA6D,oCAE7DD,cAAU0C,WAACkK,kBAAoBD,oBAAuBC,oJCWtD,SAAAnL,UAAoDa,OAC3C,GAAAwK,KAAAxK,MAAGwK,IAAEC,KAAAzK,MAAIyK,KAAE3L,OAAAkB,MAAMlB,OAAEuK,MAAArJ,MAAKqJ,MAAEpK,WAAAe,MAAUf,UAE3C,IAAIoK,QAAUvK,OAEZ,WADAG,YAAW3B,UAIb,IAAMoN,KAAMD,KAAKpB,MACjBpK,YAAW5B,MAAMqN,IAAKF,IAAIE,OAE1B1K,MAAMqJ,MAAQA,MAAQ,EAEtB9K,KAAKW,SAASc,sOAzBhBtC,aAAAC,WAA2B,mBAiC3BgN,gBAAA,SAAA3M,QAsCE,QAAA2M,iBAAoBH,IAAqBnM,WACvCL,OAAAM,KAAOC,MADWA,KAAGiM,IAAHA,IAAqBjM,KAASF,UAATA,UAEvCE,KAAKkM,KAAOhF,OAAOgF,KAAKD,KAmB5B,MA3DwChM,WAAAmM,gBAA6B3M,QAkC5D2M,gBAAMlM,OAAb,SAAiB+L,IAAanM,WAC5B,MAAO,IAAIsM,iBAAmBH,IAAKnM,YAQ3BsM,gBAAA5L,UAAUC,WAApB,SAAqBC,YACnB,GAAAwB,IAA8BlC,KAAvBkM,KAAAhK,GAAIgK,KAAEpM,UAAAoC,GAASpC,UAChBS,OAAS2L,KAAK3L,MAEpB,IAAIT,UACF,MAAAA,WAAiBa,SAASC,SAAU,GAClCqL,IAAKjM,KAAKiM,IAAKC,KAAIA,KAAE3L,OAAMA,OAAEuK,MAAO,EAAGpK,WAAUA,YAGnD,KAAK,GAAI2L,KAAM,EAAGA,IAAM9L,OAAQ8L,MAAO,CACrC,GAAMF,KAAMD,KAAKG,IACjB3L,YAAW5B,MAAMqN,IAAKnM,KAAKiM,IAAIE,OAEjCzL,WAAW3B,YAGjBqN,iBA3DwCjN,aAAU0C,WAArCC,SAAesK,gBA2D3BA,4JC9FDE,+BAAAlN,WAAkC,mCAErB0C,SAAKyK,MAAGD,kBAAeF,gBAAClM,+JCFrCf,0BAAAC,WAA2B,oBAC3BoN,QAAApN,WAAqC,wBAErCD,cAAU0C,WAAC0K,MAAQC,QAAWD,wWCF9BpN,aAAAC,WAA2B,mBAS3BqN,gBAAA,SAAAhN,QA+DE,QAAAgN,iBAAYC,MACAC,MACA7M,WACVL,OAAAM,KAAOC,MACPA,KAAK0M,MAAQA,MACb1M,KAAK4M,OAASD,MACd3M,KAAKF,UAAYA,UA0BrB,MA/FqCG,WAAAwM,gBAAkBhN,QAgC9CgN,gBAAMvM,OAAb,SAAcwM,MACAC,MACA7M,WACZ,WAHY,KAAA4M,QAAAA,MAAiB,OACjB,KAAAC,QAAAA,MAAiB,GAEtB,GAAIF,iBAAgBC,MAAOC,MAAO7M,YAGpC2M,gBAAQ7L,SAAf,SAAgBa,OAEN,GAAAiL,OAAAjL,MAAKiL,MAAE5B,MAAArJ,MAAKqJ,MAAE6B,MAAAlL,MAAKkL,MAAEjM,WAAAe,MAAUf,UAEvC,IAAIoK,OAAS6B,MAEX,WADAjM,YAAW3B,UAIb2B,YAAW5B,KAAK4N,OAEZhM,WAAW+I,SAIfhI,MAAMqJ,MAAQA,MAAQ,EACtBrJ,MAAMiL,MAAQA,MAAQ,EAEf1M,KAAMW,SAASc,SAgBdgL,gBAAAjM,UAAUC,WAApB,SAAqBC,YACnB,GAAIoK,OAAQ,EACR4B,MAAQ1M,KAAK0M,MACXC,MAAQ3M,KAAK4M,OACb9M,UAAYE,KAAKF,SAEvB,IAAIA,UACF,MAAAA,WAAiBa,SAAS8L,gBAAgB7L,SAAU,GAClDkK,MAAKA,MAAE6B,MAAKA,MAAED,MAAKA,MAAEhM,WAAUA,YAGjC,QAAG,CACD,GAAIoK,SAAW6B,MAAO,CACpBjM,WAAW3B,UACX,OAGF,GADA2B,WAAW5B,KAAK4N,SACZhM,WAAW+I,OACb,QAKVgD,iBA/FqCtN,aAAU0C,WAAlCC,SAAe2K,gBA+F3BA,4JCzGDI,+BAAAzN,WAAkC,mCAErB0C,SAAKgL,MAAGD,kBAAeJ,gBAACvM,+JCFrCf,0BAAAC,WAA2B,oBAC3B2N,QAAA3N,WAAqC,wBAErCD,cAAU0C,WAACiL,MAAQC,QAAWD,6ZCH9B3N,aAAAC,WAAkD,mBAIlDkE,oBAAAlE,WAAkC,+BAClCmE,kBAAAnE,WAAgC,wBAMhC4N,gBAAA,SAAAvN,QAOE,QAAAuN,iBAAoBC,gBACAxJ,mBAClBhE,OAAAM,KAAOC,MAFWA,KAAeiN,gBAAfA,gBACAjN,KAAiByD,kBAAjBA,kBAgBtB,MAxBwCxD,WAAA+M,gBAAavN,QAE5CuN,gBAAM9M,OAAb,SAAiB+M,gBACAxJ,mBACf,MAAO,IAAIuJ,iBAAmBC,gBAAiBxJ,oBAQvCuJ,gBAAAxM,UAAUC,WAApB,SAAqBC,YACnB,GAEIwM,UAFJhL,GAAmDlC,KAA3CiN,gBAAA/K,GAAe+K,gBAAExJ,kBAAAvB,GAAiBuB,iBAI1C,KAEE,MADAyJ,UAAkCD,kBAC3B,GAAIE,iBAAgBzM,WAAYwM,SAAUzJ,mBACjD,MAAOxE,KACPyB,WAAWxB,MAAMD,OAGvB+N,iBAxBwC7N,aAAU0C,WAArCC,SAAekL,gBAwB3BA,eAED,IAAAG,iBAAA,SAAA1N,QACE,QAAA0N,iBAAYxJ,YACQuJ,SACAzJ,mBAClBhE,OAAAM,KAAAC,KAAM2D,aAFY3D,KAAQkN,SAARA,SACAlN,KAAiByD,kBAAjBA,kBAElBE,YAAY/B,IAAIsL,UAChBlN,KAAKoN,SAaT,MAnBiCnN,WAAAkN,gBAAqB1N,QAS5C0N,gBAAA3M,UAAM4M,OAAd,WACE,IACE,GAAMvM,QAASb,KAAKyD,kBAAkB1D,KAAKC,KAAMA,KAAKkN,SAClDrM,SACFb,KAAK4B,IAAI0B,oBAAiBW,kBAACjE,KAAMa,SAEnC,MAAO5B,KACPe,KAAK+D,OAAO9E,OAGlBkO,iBAnBiC5J,kBAAeW,6JCrChDmJ,+BAAAjO,WAAkC,mCAErB0C,SAAKwL,MAAGD,kBAAeL,gBAAC9M,+JCFrCf,0BAAAC,WAA2B,oBAC3BmO,QAAAnO,WAAqC,wBAErCD,cAAU0C,WAACyL,MAAQC,QAAWD,wWCF9BnO,aAAAC,WAA2B,mBAc3BoO,gBAAA,SAAA/N,QAmDE,QAAA+N,iBAAmBtO,MAAoBY,WACrCL,OAAAM,KAAOC,MADUA,KAAKd,MAALA,MAAoBc,KAASF,UAATA,UAkBzC,MArEqCG,WAAAuN,gBAAe/N,QA0C3C+N,gBAAMtN,OAAb,SAAchB,MAAYY,WACxB,MAAO,IAAI0N,iBAAgBtO,MAAOY,YAG7B0N,gBAAQ5M,SAAf,SAAgBjC,KACN,GAAAO,OAAAP,IAAKO,KAAEP,KAAU+B,WACdxB,MAAMA,QAOTsO,gBAAAhN,UAAUC,WAApB,SAAqBC,YACnB,GAAMxB,OAAQc,KAAKd,MACbY,UAAYE,KAAKF,SAIvB,IAFAY,WAAW+M,oBAAqB,EAE5B3N,UACF,MAAAA,WAAiBa,SAAS6M,gBAAgB5M,SAAU,GAClD1B,MAAKA,MAAEwB,WAAUA,YAGnBA,YAAWxB,MAAMA,QAGvBsO,iBArEqCrO,aAAU0C,WAAlCC,SAAe0L,gBAqE3BA,4JCpFDE,+BAAAtO,WAAkC,mCAErB0C,SAAM6L,OAAGD,kBAAeF,gBAACtN,+JCFtCf,0BAAAC,WAA2B,oBAC3BwO,QAAAxO,WAAuB,wBAEvBD,cAAU0C,WAACgM,MAAQD,QAAMD,+JCHzBxO,0BAAAC,WAA2B,oBAC3B0O,QAAA1O,WAAqC,wBAErCD,cAAU0C,WAACkM,MAAQD,QAAWC,mICH9BC,mBAAA5O,WAA4B,sBAEf0C,SAAGmM,IAAGD,MAASE,8JCF5B/O,0BAAAC,WAA2B,oBAC3B4O,MAAA5O,WAAiC,sBAEjCD,cAAU0C,WAACoM,IAAMD,MAASC,sJCH1BE,8BAAA/O,WAAqD,sCAExC0C,SAAIsM,KAAuBD,iBAAcE,eAACnO,qKCFvDf,0BAAAC,WAA2B,oBAC3BkP,OAAAlP,WAAmC,2BAGnCD,cAAU0C,WAACuM,KAAOE,OAAUF,uHCF5B,SAAAG,YAA2BjH,YAAgB,GAAA3C,YAAAtE,GAAoB,EAApBA,GAAAC,UAAoBC,OAApBF,KAAAsE,QAAAtE,GAAA,GAAAC,UAAoBD,GAE7D,KAAK,GADC2E,KAAML,QAAQpE,OACX6E,EAAI,EAAGA,EAAIJ,IAAKI,IAAK,CAC5B,GAAMvE,QAAS8D,QAAQS,EACvB,KAAK,GAAIoJ,KAAK3N,QACRA,OAAO4N,eAAeD,KACxBlH,OAAOkH,GAAK3N,OAAO2N,IAIzB,MAAOlH,QAGT,QAAAoH,WAA0BC,MACxB,MAAOA,MAAKzH,OAAO0H,QAAUL,cAhB/BM,oBAAAzP,WAAqB,kBAEL0C,SAAUyM,WAWzBA,WAEezM,QAAS4M,UAExBA,UAEY5M,QAAM8M,OAAGF,UAAUG,OAAIF,wgBCnBpCG,UAAA1P,WAA0C,gBAC1C2P,aAAA3P,WAA2B,mBAC3BD,aAAAC,WAA2B,mBAC3B6H,eAAA7H,WAA6B,qBAE7ByP,OAAAzP,WAAqB,kBACrB4P,gBAAA5P,WAA8B,sBAE9BC,WAAAD,WAAyB,sBACzBE,cAAAF,WAA4B,yBAC5B6P,SAAA7P,WAAuB,oBAkBvB8P,iBAAA,SAAAzP,QA2DE,QAAAyP,kBAAYC,kBAAoExL,aAC9E,GAAIwL,4BAA6BhQ,cAAU0C,WACzCpC,OAAAM,KAAAC,KAAM2D,YAA6BwL,uBAC9B,CAUL,GATA1P,OAAAM,KAAOC,MACPA,KAAKoP,cAAgBP,OAAIF,KAACU,UAC1BrP,KAAKsP,QAAU,GAAIR,WAAOS,QACO,gBAAtBJ,mBACTnP,KAAKwP,IAAML,kBAGXF,SAAML,OAAC5O,KAAMmP,oBAEVnP,KAAKoP,cACR,KAAM,IAAIK,OAAM,wCAElBzP,MAAK2D,YAAc,GAAIqL,iBAAaU,eAgL1C,MA3PyCzP,WAAAiP,iBAAmBzP,QAa1DyP,iBAAA1O,UAAcoE,eAAd,SAAetD,GACb,MAAOqO,MAAKC,MAAMtO,EAAEuO,OAyCfX,iBAAMhP,OAAb,SAAiBiP,mBACf,MAAO,IAAID,kBAAoBC,oBAuBjCD,iBAAA1O,UAAI0C,KAAJ,SAAQ4M,UACN,GAAMC,MAAO,GAAIb,kBAAoBlP,KAAYA,KAAK2D,YAEtD,OADAoM,MAAKD,SAAWA,SACTC,MAGDb,iBAAA1O,UAAWwP,YAAnB,WACEhQ,KAAKiQ,OAAS,KACTjQ,KAAKa,SACRb,KAAK2D,YAAc,GAAIqL,iBAAaU,eAEtC1P,KAAKsP,QAAU,GAAIR,WAAOS,SAI5BL,iBAAA1O,UAAS0P,UAAT,SAAUC,OAAmBC,SAAqBC,eAChD,GAAM3O,MAAO1B,IACb,OAAA,IAAWb,cAAU0C,WAAC,SAACyO,UACrB,GAAMtM,QAAS3E,WAAQ8B,SAACgP,SACpBnM,UAAW1E,cAAW+B,YACxBiP,SAASpR,MAAMI,cAAW+B,YAACC,GAE3BI,KAAK5C,KAAKkF,OAGZ,IAAIuM,cAAA7O,KAAoBF,UAAU,SAAAgP,GAChC,GAAMxM,QAAS3E,WAAQ8B,SAACkP,eAAeG,EACnCxM,UAAW1E,cAAW+B,YACxBiP,SAASpR,MAAMI,cAAW+B,YAACC,GAClB0C,QACTsM,SAASxR,KAAK0R,IAGhB,SAAAvR,KAAO,MAAAqR,UAASpR,MAATD,MACP,WAAM,MAAAqR,UAAAvR,YAER,OAAO,YACL,GAAMiF,QAAS3E,WAAQ8B,SAACiP,WACpBpM,UAAW1E,cAAW+B,YACxBiP,SAASpR,MAAMI,cAAW+B,YAACC,GAE3BI,KAAK5C,KAAKkF,QAEZuM,aAAa9I,kBAKXyH,iBAAA1O,UAAciQ,eAAtB,WAAA,GAAApI,OAyFCrI,KAxFSoP,cAAApP,KAAaoP,cACfkB,SAAWtQ,KAAKsP,QAElBW,OAAoB,IACxB,KACEA,OAASjQ,KAAK0Q,SACZ,GAAItB,eAAcpP,KAAKwP,IAAKxP,KAAK0Q,UACjC,GAAItB,eAAcpP,KAAKwP,KACzBxP,KAAKiQ,OAASA,OACVjQ,KAAK2Q,aACP3Q,KAAKiQ,OAAOU,WAAa3Q,KAAK2Q,YAEhC,MAAOrP,GAEP,WADAgP,UAASpR,MAAMoC,GAIjB,GAAMiP,cAAA,GAAmBtJ,gBAAYa,aAAC,WACpCO,MAAK4H,OAAS,KACVA,QAAgC,IAAtBA,OAAOW,YACnBX,OAAOY,SAIXZ,QAAOa,OAAS,SAACxP,GACf,GAAMyP,cAAe1I,MAAK0I,YACtBA,eACFA,aAAajS,KAAKwC,EAGpB,IAAM0P,OAAQ3I,MAAK1E,WAEnB0E,OAAK1E,YAAAoL,aAAwBkC,WAAC/Q,OAC5B,SAACsQ,GAAM,MAAsB,KAAtBP,OAAOW,YAAoBX,OAAOiB,KAAlCV,IACP,SAAClP,GACC,GAAM6P,iBAAkB9I,MAAK8I,eACzBA,kBACFA,gBAAgBrS,SAAKsB,IAEnBkB,GAAKA,EAAE8P,KACTnB,OAAOY,MAAMvP,EAAE8P,KAAM9P,EAAE+P,QAEvBf,SAASpR,MAAM,GAAI0I,WAAU,sIAG/BS,MAAK2H,eAEP,WACE,GAAMmB,iBAAkB9I,MAAK8I,eACzBA,kBACFA,gBAAgBrS,SAAKsB,IAEvB6P,OAAOY,QACPxI,MAAK2H,gBAILgB,OAASA,gBAAiBhC,iBAAaU,eACzCa,aAAa3O,IAAuBoP,MAAOxP,UAAU6G,MAAK1E,eAI9DsM,OAAOqB,QAAU,SAAChQ,GAChB+G,MAAK2H,cACLM,SAASpR,MAAMoC,IAGjB2O,OAAOsB,QAAU,SAACjQ,GAChB+G,MAAK2H,aACL,IAAMwB,eAAgBnJ,MAAKmJ,aACvBA,gBACFA,cAAc1S,KAAKwC,GAEjBA,EAAEmQ,SACJnB,SAASvR,WAETuR,SAASpR,MAAMoC,IAInB2O,OAAOyB,UAAY,SAACpQ,GAClB,GAAM0C,QAAS3E,WAAQ8B,SAACkH,MAAKzD,gBAAgBtD,EACzC0C,UAAW1E,cAAW+B,YACxBiP,SAASpR,MAAMI,cAAW+B,YAACC,GAE3BgP,SAASxR,KAAKkF,UAKVkL,iBAAA1O,UAAUC,WAApB,SAAqBC,YAArB,GAAA2H,OAoBCrI,KAnBSa,OAAAb,KAAMa,MACd,IAAIA,OACF,MAAOA,QAAOW,UAAUd,WAErBV,MAAKiQ,QACRjQ,KAAKyQ,gBAEP,IAAIF,cAAe,GAAItJ,gBAAYa,YAWnC,OAVAyI,cAAa3O,IAAI5B,KAAKsP,QAAQ9N,UAAUd,aACxC6P,aAAa3O,IAAI,WACP,GAAAqO,QAAA5H,MAAM4H,MACwB,KAAlC5H,MAAKiH,QAAQqC,UAAUpR,SACrB0P,QAAgC,IAAtBA,OAAOW,YACnBX,OAAOY,QAETxI,MAAK2H,iBAGFO,cAGTrB,iBAAA1O,UAAWiH,YAAX,WACE,GAAAvF,IAA+BlC,KAAvBa,OAAAqB,GAAMrB,OAAEoP,OAAA/N,GAAM+N,MAClBA,SAAgC,IAAtBA,OAAOW,aACnBX,OAAOY,QACP7Q,KAAKgQ,eAEPvQ,OAAKe,UAACiH,YAAA1H,KAAaC,MACda,SACHb,KAAK2D,YAAc,GAAIqL,iBAAaU,gBAG1CR,kBA3PyCJ,UAAgB8C,iBAA5C9P,SAAgBoN,iBA2P5BA,0KCvRD2C,gCAAAzS,WAAmC,wCAEtB0C,SAASgQ,UAAGD,mBAAgB3C,iBAAChP,+KCF1Cf,0BAAAC,WAA2B,oBAC3B2S,YAAA3S,WAA6C,gCAE7CD,cAAU0C,WAACiQ,UAAYC,YAAeD,uICiCtC,SAAAE,QAA+CC,iBAC7C,MAAOC,UAAWF,OAACC,iBAAiBjS,SAnCtCkS,sBAAA9S,WAAsC,yBAkCtB0C,SAAMkQ,OAErBA,6JCrCD7S,0BAAAC,WAA2B,oBAC3B8S,SAAA9S,WAAuB,uBAEvBD,cAAU0C,WAACrB,UAAUwR,OAASE,SAAMF,8ICyCpC,SAAAG,aAAoDC,WAAoBC,kBACtE,WADsE,KAAAA,mBAAAA,iBAA+B,MAC9FC,cAAWH,YAACC,WAAYC,kBAAkBrS,SA5CnDsS,2BAAAlT,WAA2C,8BA2C3B0C,SAAWqQ,YAE1BA,4KC9CDhT,0BAAAC,WAA2B,oBAC3BkT,cAAAlT,WAA4B,4BAE5BD,cAAU0C,WAACrB,UAAU2R,YAAcG,cAAWH,gMCmD9C,SAAAI,YAAmDC,gBACjD,GAAIjS,QAAiBD,UAAUC,OAE3BT,UAAwB2K,QAAKG,KAC7BjI,eAAWC,YAACtC,UAAUA,UAAUC,OAAS,MAC3CT,UAAYQ,UAAUA,UAAUC,OAAS,GACzCA,SAGF,IAAIkS,wBAAiC,IACjClS,SAAU,IACZkS,uBAAyBnS,UAAU,GAGrC,IAAIoS,eAAwBC,OAAOC,iBAKnC,OAJIrS,SAAU,IACZmS,cAAgBpS,UAAU,IAGrBuS,aAAWN,WAACC,eAAgBC,uBAAwBC,cAAe5S,WAAWE,SAzEvFyK,qBAAArL,WAAsB,yBAEtBuD,cAAAvD,WAA4B,yBAC5ByT,aAAAzT,WAA0C,4BAmD1B0C,SAAUyQ,WAoBzBA,yKC1EDpT,0BAAAC,WAA2B,oBAC3ByT,aAAAzT,WAA2B,2BAE3BD,cAAU0C,WAACrB,UAAU+R,WAAaM,aAAUN,oJCsC5C,SAAAO,cAAwDC,SACrBC,iBACjC,MAAOC,gBAAWH,aAACC,SAAUC,iBAAiBhT,SA1ChDiT,4BAAA7T,WAA4C,+BAwC5B0C,SAAYgR,aAG3BA,+KC5CD3T,0BAAAC,WAA2B,oBAC3B6T,eAAA7T,WAA6B,6BAE7BD,cAAU0C,WAACrB,UAAUsS,aAAeG,eAAYH,kJCiChD,SAAAI,YAAmDF,iBACjD,MAAOG,cAAWD,WAACF,iBAAiBhT,SApCtCmT,0BAAA/T,WAA0C,6BAmC1B0C,SAAUoR,WAEzBA,yKCtCD/T,0BAAAC,WAA2B,oBAC3B+T,aAAA/T,WAA2B,2BAE3BD,cAAU0C,WAACrB,UAAU0S,WAAaC,aAAUD,2IC2D5C,SAAAE,QAAkDzT,UAChD,MAAO0T,cAAWC,WAAC3T,UAAUK,SA9D/BqT,0BAAAjU,WAA0C,6BA6D1B0C,SAAMsR,OAErBA,2JChEDjU,0BAAAC,WAA2B,oBAC3BmU,QAAAnU,WAAuB,sBAEvBD,cAAU0C,WAACrB,UAAUgT,MAAQD,QAAMH,OACnCjU,aAAU0C,WAACrB,UAAU4S,OAASG,QAAMH,4ICuCpC,SAAAK,YAAsD/Q,SACpD,MAAOgR,cAAWD,WAAC/Q,SAAS1C,SA3C9B0T,0BAAAtU,WAA0C,6BA0C1B0C,SAAU2R,WAEzBA,yKC7CDtU,0BAAAC,WAA2B,oBAC3BsU,aAAAtU,WAA2B,2BAE3BD,cAAU0C,WAACrB,UAAUiT,WAAaC,aAAUD,sJC2D5C,SAAAjR,qBAAyD,GAAAC,gBAAApC,GAE6B,EAF7BA,GAAAC,UAE6BC,OAF7BF,KAAAoC,YAAApC,GAAA,GAAAC,UAE6BD,GACpF,OAAO8C,iBAAWX,cAAApB,UAAA,GAAIqB,aAAazC,SAjErCmD,6BAAA/D,WAA6C,gCA8D7B0C,SAAaU,cAI5BA,kLClEDrD,0BAAAC,WAA2B,oBAC3B+D,gBAAA/D,WAA8B,8BAE9BD,cAAU0C,WAACrB,UAAUgC,cAAgBW,gBAAaX,oKC8DlD,SAAAjB,cAAkD,GAAAkB,gBAAApC,GAAwD,EAAxDA,GAAAC,UAAwDC,OAAxDF,KAAAoC,YAAApC,GAAA,GAAAC,UAAwDD,GACxG,OAAOgD,UAAW9B,OAAAH,UAAA,GAAIqB,aAAazC,SAjErCqD,sBAAAjE,WAAsC,0BAEtCuU,SAAAvU,WAAuC,yBAA9B0C,SAAA8R,aAAAD,SAAqDpS,OA8D9CO,QAAMP,OAErBA,6JCnEDpC,0BAAAC,WAA2B,oBAC3BiE,SAAAjE,WAAuB,uBAEvBD,cAAU0C,WAACrB,UAAUe,OAAS8B,SAAM9B,0ICqDpC,SAAAsS,aACE,MAAYC,aAAWD,YAAG7T,SAxD5B8T,yBAAA1U,WAAyC,4BAuDzB0C,SAAS+R,UAExBA,sKC1DD1U,0BAAAC,WAA2B,oBAC3B0U,YAAA1U,WAA0B,0BAE1BD,cAAU0C,WAACrB,UAAUqT,UAAYC,YAASD,6IC+D1C,SAAAE,WAAwDrR,QACrBkC,gBACjC,MAAOoP,aAAoBD,UAACrR,QAASkC,gBAAgB5E,SArEvDgU,yBAAA5U,WAAkD,4BAmElC0C,SAASiS,UAGxBA,sKCrED5U,0BAAAC,WAA2B,oBAC3B4U,YAAA5U,WAA0B,0BAE1BD,cAAU0C,WAACrB,UAAUuT,UAAYC,YAASD,iJC4D1C,SAAAE,aAA0DC,gBACrBtP,gBACnC,MAAOuP,eAAWF,YAACC,gBAAiBtP,gBAAgB5E,SAjEtDmU,2BAAA/U,WAA2C,8BA+D3B0C,SAAWmS,YAG1BA,4KClED9U,0BAAAC,WAA2B,oBAC3B+U,cAAA/U,WAA4B,4BAE5BD,cAAU0C,WAACrB,UAAUyT,YAAcE,cAAWF,uIC+C9C,SAAAtH,OAA8CyH,WAC5C,MAAOC,SAAW1H,MAACyH,WAAWpU,SAnDhCqU,qBAAAjV,WAAqC,wBAkDrB0C,SAAK6K,MAEpBA,0JCpDDxN,0BAAAC,WAA2B,oBAC3BiV,QAAAjV,WAAsB,sBAEtBD,cAAU0C,WAACrB,UAAUmM,MAAQ0H,QAAK1H,iJCyClC,SAAA2H,iBACE,MAAOC,iBAAWD,gBAAGtU,SA3CvBuU,6BAAAnV,WAA6C,gCA0C7B0C,SAAawS,cAE5BA,kLC9CDnV,0BAAAC,WAA2B,oBAC3BmV,gBAAAnV,WAA8B,8BAE9BD,cAAU0C,WAACrB,UAAU8T,cAAgBC,gBAAaD,+IC0ClD,SAAAE,UAAiDC,kBAC/C,MAAOC,YAAWF,SAACC,kBAAkBzU,SA7CvC0U,wBAAAtV,WAAwC,2BA4CxB0C,SAAQ0S,SAEvBA,mKC/CDrV,0BAAAC,WAA2B,oBAC3BsV,WAAAtV,WAAyB,yBAEzBD,cAAU0C,WAACrB,UAAUgU,SAAWE,WAAQF,yKCgDxC,SAAAG,cAAqDC,QAAiB9U,WACpE,WADoE,KAAAA,YAAAA,UAAA2K,QAA6BG,OAC1FiK,eAAWF,aAACC,QAAS9U,WAAWE,SAlDzCyK,qBAAArL,WAAsB,yBACtByV,eAAAzV,WAA4C,8BAgD5B0C,SAAY6S,aAE3BA,+KCrDDxV,0BAAAC,WAA2B,oBAC3ByV,eAAAzV,WAA6B,6BAE7BD,cAAU0C,WAACrB,UAAUmU,aAAeE,eAAYF,0JCmChD,SAAAG,gBAA0DC,cACxD,WADwD,KAAAA,eAAAA,aAAsB,MACvEC,iBAAWF,eAAOC,cAAc/U,SAtCzCgV,8BAAA5V,WAA8C,iCAqC9B0C,SAAcgT,eAE7BA,qLCxCD3V,0BAAAC,WAA2B,oBAC3B4V,iBAAA5V,WAA+B,+BAE/BD,cAAU0C,WAACrB,UAAUsU,eAAiBE,iBAAcF,iKCwCpD,SAAAG,OAA8CA,MACrBnV,WACvB,WADuB,KAAAA,YAAAA,UAAA2K,QAA6BG,OAC7CsK,QAAWD,MAAIA,MAAOnV,WAAWE,SA9C1CyK,qBAAArL,WAAsB,yBAGtB8V,QAAA9V,WAAqC,uBAyCrB0C,SAAKmT,MAGpBA,0JC9CD9V,0BAAAC,WAA2B,oBAC3B8V,QAAA9V,WAAsB,sBAEtBD,cAAU0C,WAACrB,UAAUyU,MAAQC,QAAKD,yIC6ClC,SAAAE,WAAkDC,sBACrBC,mBAC3B,MAAOC,aAAWH,UAACC,sBAAuBC,mBAAmBrV,SAjD/DsV,yBAAAlW,WAAyC,4BA+CzB0C,SAASqT,UAGxBA,sKCnDDhW,0BAAAC,WAA2B,oBAC3BkW,YAAAlW,WAA0B,0BAE1BD,cAAU0C,WAACrB,UAAU2U,UAAYG,YAASH,2IC4C1C,SAAAI,UAC+BC,YACAC,SAC7B,MAAOC,YAAWH,SAACC,YAAaC,SAASzV,SAlD3C0V,wBAAAtW,WAAwC,2BA+CxB0C,SAAQyT,SAIvBA,mKCpDDpW,0BAAAC,WAA2B,oBAC3BsW,WAAAtW,WAAyB,yBAEzBD,cAAU0C,WAACrB,UAAU+U,SAAWG,WAAQH,kKC6CxC,SAAAI,sBAAgEC,QAAmCJ,aACjG,MAAOK,wBAAWF,qBAACC,QAASJ,aAAaxV,SA/C3C6V,oCAAAzW,WAAoD,uCA8CpC0C,SAAoB6T,qBAEnCA,uMCjDDxW,0BAAAC,WAA2B,oBAC3ByW,uBAAAzW,WAAqC,qCAErCD,cAAU0C,WAACrB,UAAUmV,qBAAuBE,uBAAoBF,oLC8DhE,SAAAG,yBAAgE3J,IAAayJ,SAC3E,MAAOG,2BAAWD,wBAAO3J,IAAKyJ,SAAS5V,SAjEzC+V,uCAAA3W,WAAuD,0CAgEvC0C,SAAuBgU,wBAEtCA,gNCnED3W,0BAAAC,WAA2B,oBAC3B2W,0BAAA3W,WAAwC,wCAExCD,cAAU0C,WAACrB,UAAUsV,wBAA0BC,0BAAuBD,8ICiDtE,SAAAE,KAA4CC,eACrB/W,MACAH,UACrB,MAAOmX,OAAWC,IAAMF,eAAgB/W,MAAOH,UAAUiB,SArD3DkW,mBAAA9W,WAAmC,sBAkDnB0C,SAAGkU,IAIlBA,kJCxDD7W,0BAAAC,WAA2B,oBAC3BgX,KAAAhX,WAAoB,mBAEpBD,cAAU0C,WAACrB,UAAU6V,GAAKD,KAAGJ,IAC7B7W,aAAU0C,WAACrB,UAAUwV,IAAMI,KAAGJ,mICkC9B,SAAAM,WACE,MAAOC,WAAWD,UAAGtW,SAtCvBuW,uBAAAnX,WAAuC,0BAqCvB0C,SAAOwU,QAEtBA,gKCxCDnX,0BAAAC,WAA2B,oBAC3BmX,UAAAnX,WAAwB,wBAExBD,cAAU0C,WAACrB,UAAU8V,QAAUC,UAAOD,6ICkDtC,SAAAE,YAAyD9T,QACrBkC,gBAClC,MAAO6R,cAAWD,WAAC9T,QAASkC,gBAAgB5E,SAtD9CyW,0BAAArX,WAA0C,6BAoD1B0C,SAAU0U,WAGzBA,yKCxDDrX,0BAAAC,WAA2B,oBAC3BqX,aAAArX,WAA2B,2BAE3BD,cAAU0C,WAACrB,UAAUgW,WAAaC,aAAUD,wICkD5C,SAAAE,QAAkDhU,QACrBiU,WACA7W,WAG3B,WAJ2B,KAAA6W,aAAAA,WAAqBhE,OAAOC,uBAC5B,KAAA9S,YAAAA,cAAiCM,IAC5DuW,YAAcA,YAAc,GAAK,EAAIhE,OAAOC,kBAAoB+D,WAEzDC,SAAWF,OAAChU,QAASiU,WAAY7W,WAAWE,SAzDrD4W,sBAAAxX,WAAsC,yBAoDtB0C,SAAM4U,OAMrBA,6JC3DDvX,0BAAAC,WAA2B,oBAC3BwX,SAAAxX,WAAuB,uBAEvBD,cAAU0C,WAACrB,UAAUkW,OAASE,SAAMF,0IC0CpC,SAAAG,WAAkD/L,MAAeiK,cAC/D,MAAO+B,aAAWD,UAAC/L,MAAOiK,cAAc/U,SA7C1C8W,yBAAA1X,WAAyC,4BA4CzB0C,SAAS+U,UAExBA,sKC/CD1X,0BAAAC,WAA2B,oBAC3B0X,YAAA1X,WAA0B,0BAE1BD,cAAU0C,WAACrB,UAAUqW,UAAYC,YAASD,uICgD1C,SAAAE,QAA+C3C,UACrB4C,SACxB,MAAOC,UAAiBF,OAAC3C,UAAW4C,SAAShX,SApD/CiX,sBAAA7X,WAA4C,yBAkD5B0C,SAAMiV,OAGrBA,6JCtDD5X,0BAAAC,WAA2B,oBAC3B6X,SAAA7X,WAAuB,uBAEvBD,cAAU0C,WAACrB,UAAUuW,OAASE,SAAMF,uICQpC,SAAAG,UAAiDC,UAC/C,MAAOC,YAAQC,SAACF,UAAUnX,SAX5BoX,wBAAAhY,WAAyB,2BAUT0C,SAAQoV,SAEvBA,iKCbD/X,0BAAAC,WAA2B,oBAC3BkY,UAAAlY,WAAyB,wBAEzBD,cAAU0C,WAACrB,UAAU+W,QAAUD,UAAQJ,SACvC/X,aAAU0C,WAACrB,UAAU0W,SAAWI,UAAQJ,kICwCxC,SAAAM,MAA6CpD,UACrB4C,SACtB,MAAOS,QAAWD,KAACpD,UAAW4C,SAAShX,SA9CzCyX,oBAAArY,WAAoC,uBA4CpB0C,SAAI0V,KAGnBA,uJC/CDrY,0BAAAC,WAA2B,oBAC3BqY,OAAArY,WAAqB,qBAErBD,cAAU0C,WAACrB,UAAUgX,KAAOC,OAAID,wICgChC,SAAAE,WAAkDtD,UACrB4C,SAC3B,MAAOW,aAAWD,UAACtD,UAAW4C,SAAShX,SArCzC2X,yBAAAvY,WAAyC,4BAmCzB0C,SAAS4V,UAGxBA,sKCtCDvY,0BAAAC,WAA2B,oBAC3BuY,YAAAvY,WAA0B,0BAE1BD,cAAU0C,WAACrB,UAAUkX,UAAYC,YAASD,qICqE1C,SAAAE,OAAiDxD,UACrBxP,eACAmQ,cAC1B,MAAO8C,SAAWD,MAACxD,UAAWxP,eAAuBmQ,cAAc/U,SA3ErE6X,qBAAAzY,WAAqC,wBAwErB0C,SAAK8V,MAIpBA,0JC5EDzY,0BAAAC,WAA2B,oBAC3ByY,QAAAzY,WAAsB,sBAEtBD,cAAU0C,WAACrB,UAAUoX,MAAaC,QAAKD,qIC4EvC,SAAAE,SAAsDtC,YACrBuC,gBACAtD,iBACAuD,iBAC/B,MAAOC,WAAWH,QAACtC,YAAauC,gBAAwBtD,iBAAkBuD,iBAAiBhY,SAjF7FiY,uBAAA7Y,WAA0D,0BACjD0C,SAAiBoW,kBAAAD,UAAAC,kBA4EVpW,QAAOgW,QAKtBA,gKCpFD3Y,0BAAAC,WAA2B,oBAC3B6Y,UAAA7Y,WAAwB,wBAExBD,cAAU0C,WAACrB,UAAUsX,QAAeG,UAAOH,qJCS3C,SAAAK,kBACE,MAAOC,kBAAWD,iBAAGnY,SAbvBoY,8BAAAhZ,WAA8C,iCAY9B0C,SAAcqW,eAE7BA,qLCdDhZ,0BAAAC,WAA2B,oBAC3BgZ,iBAAAhZ,WAA+B,+BAE/BD,cAAU0C,WAACrB,UAAU2X,eAAiBC,iBAAcD,8ICSpD,SAAAE,WACE,MAAOC,WAAWD,UAAGrY,SAZvBsY,uBAAAlZ,WAAuC,0BAWvB0C,SAAOuW,QAEtBA,gKCdDlZ,0BAAAC,WAA2B,oBAC3BkZ,UAAAlZ,WAAwB,wBAExBD,cAAU0C,WAACrB,UAAU6X,QAAUC,UAAOD,mICwCtC,SAAAE,OAA8C9D,kBAC5C,MAAO+D,SAAWD,MAAC9D,kBAAkBzU,SA3CvCwY,qBAAApZ,WAAqC,wBA0CrB0C,SAAKyW,MAEpBA,0JC9CDpZ,0BAAAC,WAA2B,oBAC3BoZ,QAAApZ,WAAsB,sBAEtBD,cAAU0C,WAACrB,UAAU+X,MAAQC,QAAKD,gKC4ClC,SAAAE,WAAkDC,SAAkB5Y,WAClE,WADkE,KAAAA,YAAAA,UAAA2K,QAA6BG,OACxF+N,YAAWF,UAACC,SAAU5Y,WAAWE,SAhD1CyK,qBAAArL,WAAsB,yBAGtBuZ,YAAAvZ,WAAyC,2BA4CzB0C,SAAS2W,UAExBA,sKCjDDtZ,0BAAAC,WAA2B,oBAC3BuZ,YAAAvZ,WAA0B,0BAE1BD,cAAU0C,WAACrB,UAAUiY,UAAYE,YAASF,mICuC1C,SAAAG,MAAgDxE,UACrBxP,eACAmQ,cACzB,MAAO8D,QAAWD,KAACxE,UAAWxP,eAAuBmQ,cAAc/U,SA5CrE6Y,oBAAAzZ,WAAoC,uBAyCpB0C,SAAI8W,KAInBA,uJC7CDzZ,0BAAAC,WAA2B,oBAC3ByZ,OAAAzZ,WAAqB,qBAErBD,cAAU0C,WAACrB,UAAUoY,KAAYC,OAAID,wGCIrC,SAAAE,UAAoD3Y,MAClD,MAAOA,MAAKH,gBADE8B,SAAQgX,SAEvBA,yJCTD3Z,0BAAAC,WAA2B,oBAC3B2Z,MAAA3Z,WAAyB,oBAEzBD,cAAU0C,WAACrB,UAAUwY,IAAMD,MAAQD,SACnC3Z,aAAU0C,WAACrB,UAAUyY,QAAUF,MAAQD,oICavC,SAAAI,OAA8C9E,UACrB4C,SACvB,MAAOmC,SAAWD,MAAC9E,UAAW4C,SAAShX,SAlBzCmZ,qBAAA/Z,WAAqC,wBAgBrB0C,SAAKoX,MAGpBA,0JCpBD/Z,0BAAAC,WAA2B,oBAC3B+Z,QAAA/Z,WAAsB,sBAEtBD,cAAU0C,WAACrB,UAAU0Y,MAAQC,QAAKD,6HCgClC,SAAAE,KAA+C1W,QAAyCsU,SACtF,MAAOqC,OAAcD,IAAC1W,QAASsU,SAAShX,SArC1CqZ,mBAAAja,WAAsC,sBAoCtB0C,SAAGsX,IAElBA,oJCrCDja,0BAAAC,WAA2B,oBAC3Bia,MAAAja,WAAoB,oBAEpBD,cAAU0C,WAACrB,UAAU4Y,IAAMC,MAAGD,+HCyB9B,SAAAE,OAAiD1a,OAC/C,MAAO2a,SAAWD,MAAC1a,OAAOoB,SA7B5BuZ,qBAAAna,WAAqC,wBA4BrB0C,SAAKwX,MAEpBA,0JC9BDna,0BAAAC,WAA2B,oBAC3Bma,QAAAna,WAAsB,sBAEtBD,cAAU0C,WAACrB,UAAU8Y,MAAQC,QAAKD,6IC6ClC,SAAAE,eACE,MAAOC,eAAWD,cAAGxZ,SA/CvByZ,2BAAAra,WAA2C,8BA8C3B0C,SAAW0X,YAE1BA,4KClDDra,0BAAAC,WAA2B,oBAC3Bqa,cAAAra,WAA4B,4BAE5BD,cAAU0C,WAACrB,UAAUgZ,YAAcC,cAAWD,mIC8B9C,SAAAE,KAA4CC,UAC1C,MAAOC,OAAcF,IAACC,UAAU3Z,SAlClC4Z,mBAAAxa,WAAsC,sBAiCtB0C,SAAG4X,IAElBA,oJCnCDva,0BAAAC,WAA2B,oBAC3Bwa,MAAAxa,WAAoB,oBAEpBD,cAAU0C,WAACrB,UAAUkZ,IAAME,MAAGF,uJCiE9B,SAAAvO,aAAiD,GAAA1I,gBAAApC,GAAiE,EAAjEA,GAAAC,UAAiEC,OAAjEF,KAAAoC,YAAApC,GAAA,GAAAC,UAAiED,GAChH,OAAO6K,SAAWC,MAAA/J,UAAA,GAAIqB,aAAazC,SApErCkL,qBAAA9L,WAAqC,yBAErCya,QAAAza,WAAqC,wBAA5B0C,SAAAgY,YAAAD,QAAkD1O,MAiE3CrJ,QAAKqJ,MAEpBA,0JCtEDhM,0BAAAC,WAA2B,oBAC3B8L,QAAA9L,WAAsB,sBAEtBD,cAAU0C,WAACrB,UAAU2K,MAAQD,QAAKC,uIC+ClC,SAAA4O,UAAiDpD,YAC/C,WAD+C,KAAAA,aAAAA,WAAqBhE,OAAOC,mBACpEoH,WAAWD,SAACpD,YAAY3W,SAlDjCga,wBAAA5a,WAAwC,2BAiDxB0C,SAAQiY,SAEvBA,mKCpDD5a,0BAAAC,WAA2B,oBAC3B4a,WAAA5a,WAAyB,yBAEzBD,cAAU0C,WAACrB,UAAUuZ,SAAWC,WAAQD,0IC8DxC,SAAAE,UAAuDvX,QACrBkC,eACA+R,YAChC,WADgC,KAAAA,aAAAA,WAAqBhE,OAAOC,mBACrDsH,WAAmBD,SAACvX,QAAckC,eAAgB+R,YAAY3W,SApEvEka,wBAAA9a,WAAgD,2BAiEhC0C,SAAQmY,SAIvBA,mKCrED9a,0BAAAC,WAA2B,oBAC3B8a,WAAA9a,WAAyB,yBAEzBD,cAAU0C,WAACrB,UAAUyZ,SAAgBC,WAAQD,SAC7C9a,aAAU0C,WAACrB,UAAU2Z,QAAeD,WAAQD,8IC8C5C,SAAAG,YAAyDlG,gBACrBtP,eACA+R,YAClC,WADkC,KAAAA,aAAAA,WAAqBhE,OAAOC,mBACvDyH,aAAWD,WAAClG,gBAAiBtP,eAAuB+R,YAAY3W,SArDzEqa,0BAAAjb,WAA0C,6BAkD1B0C,SAAUsY,WAIzBA,yKCtDDjb,0BAAAC,WAA2B,oBAC3Bib,aAAAjb,WAA2B,2BAE3BD,cAAU0C,WAACrB,UAAU8Z,UAAiBD,aAAUD,WAChDjb,aAAU0C,WAACrB,UAAU4Z,WAAkBC,aAAUD,8IC8BjD,SAAAG,WACgCC,YACAC,KACA9D,YAC9B,WAD8B,KAAAA,aAAAA,WAAqBhE,OAAOC,mBACnD8H,YAAWH,UAACC,YAAaC,KAAM9D,YAAY3W,SArCpD0a,yBAAAtb,WAAyC,4BAiCzB0C,SAASyY,UAKxBA,sKCvCDpb,0BAAAC,WAA2B,oBAC3Bsb,YAAAtb,WAA0B,0BAE1BD,cAAU0C,WAACrB,UAAU+Z,UAAYG,YAASH,iIC8B1C,SAAAI,KAA4ChB,UAC1C,MAAOiB,OAAcD,IAAChB,UAAU3Z,SAlClC4a,mBAAAxb,WAAsC,sBAiCtB0C,SAAG6Y,IAElBA,oJCnCDxb,0BAAAC,WAA2B,oBAC3Bwb,MAAAxb,WAAoB,oBAEpBD,cAAU0C,WAACrB,UAAUma,IAAMC,MAAGD,uICsG9B,SAAAE,WAAqDC,wBACrBnb,UAC9B,MAAOob,aAAWF,UAAMC,wBAAyBnb,UAAUK,SAzG7D+a,yBAAA3b,WAAyC,4BAuGzB0C,SAAS+Y,UAGxBA,sKC5GD1b,0BAAAC,WAA2B,oBAC3B2b,YAAA3b,WAA0B,0BAE1BD,cAAU0C,WAACrB,UAAUqa,UAAiBE,YAASF,6IC8C/C,SAAAG,WAAkDlb,UAAuBmV,OACvE,WADuE,KAAAA,QAAAA,MAAiB,GACjFgG,YAAWD,UAAClb,UAAWmV,OAAOjV,SAjDvCib,yBAAA7b,WAAyC,4BAgDzB0C,SAASkZ,UAExBA,sKCnDD7b,0BAAAC,WAA2B,oBAC3B6b,YAAA7b,WAA0B,0BAE1BD,cAAU0C,WAACrB,UAAUwa,UAAYC,YAASD,6JCuE1C,SAAAjP,yBAA6D,GAAAmP,gBAAA7a,GAEyB,EAFzBA,GAAAC,UAEyBC,OAFzBF,KAAA6a,YAAA7a,GAAA,GAAAC,UAEyBD,GACpF,OAAOyL,qBAAWC,kBAAA3K,UAAA,GAAI8Z,aAAalb,SA7ErC8L,iCAAA1M,WAAiD,oCA0EjC0C,SAAiBiK,kBAIhCA,8LC/ED5M,0BAAAC,WAA2B,oBAC3B0M,oBAAA1M,WAAkC,kCAElCD,cAAU0C,WAACrB,UAAUuL,kBAAoBD,oBAAiBC,mJCmC1D,SAAAoP,YACE,MAAOC,YAAWD,WAAGnb,SAtCvBob,wBAAAhc,WAAwC,2BAqCxB0C,SAAQqZ,SAEvBA,mKCvCDhc,0BAAAC,WAA2B,oBAC3Bgc,WAAAhc,WAAyB,yBAEzBD,cAAU0C,WAACrB,UAAU2a,SAAWC,WAAQD,4ICuCxC,SAAAE,WAAkDjH,UAAiD4C,SACjG,MAAOsE,aAAWD,UAACjH,UAAW4C,SAAShX,SA3CzCsb,yBAAAlc,WAAyC,4BA0CzB0C,SAASuZ,UAExBA,sKC5CDlc,0BAAAC,WAA2B,oBAC3Bkc,YAAAlc,WAA0B,0BAE1BD,cAAU0C,WAACrB,UAAU6a,UAAYC,YAASD,qICyB1C,SAAAE,aAAiD,GAAAC,eAAAnb,GAAuB,EAAvBA,GAAAC,UAAuBC,OAAvBF,KAAAmb,WAAAnb,GAAA,GAAAC,UAAuBD,GACtE,OAAOob,SAAWF,MAAAna,UAAA,GAAIoa,YAAYxb,SA7BpCyb,qBAAArc,WAAqC,wBA4BrB0C,SAAKyZ,MAEpBA,0JC9BDpc,0BAAAC,WAA2B,oBAC3Bqc,QAAArc,WAAsB,sBAEtBD,cAAU0C,WAACrB,UAAU+a,MAAQE,QAAKF,qICoBlC,SAAAG,SAAmD/b,UACjD,MAAOgc,WAAWD,QAAC/b,UAAUK,SAtB/B2b,uBAAAvc,WAAuC,0BAqBvB0C,SAAO4Z,QAEtBA,gKCzBDvc,0BAAAC,WAA2B,oBAC3Buc,UAAAvc,WAAwB,wBAExBD,cAAU0C,WAACrB,UAAUkb,QAAeC,UAAOD,uJCM3C,SAAAE,iBAAwDhd,OACtD,MAAOid,mBAAWD,gBAAChd,OAAOoB,SAT5B6b,+BAAAzc,WAA+C,kCAQ/B0C,SAAe8Z,gBAE9BA,wLCXDzc,0BAAAC,WAA2B,oBAC3Byc,kBAAAzc,WAAgC,gCAEhCD,cAAU0C,WAACrB,UAAUob,gBAAkBC,kBAAeD,2JCiBtD,SAAAE,eAAyD1J,WACrB2J,WACAC,oBACAlc,WAElC,MAAOmc,iBAAWH,cAAO1J,WAAY2J,WAAYC,oBAA4Blc,WAAWE,SAvB1Fic,6BAAA7c,WAA6C,gCAkB7B0C,SAAaga,cAM5BA,kLC1BD3c,0BAAAC,WAA2B,oBAC3B6c,gBAAA7c,WAA8B,8BAE9BD,cAAU0C,WAACrB,UAAUsb,cAAgBG,gBAAaH,qJCIlD,SAAAI,eAEE,MAAOC,eAAWD,cAAGlc,SARvBmc,2BAAA/c,WAA2C,8BAM3B0C,SAAWoa,YAG1BA,4KCVD/c,0BAAAC,WAA2B,oBAC3B+c,cAAA/c,WAA4B,4BAE5BD,cAAU0C,WAACrB,UAAU0b,YAAcC,cAAWD,4JCiB9C,SAAA7Q,YAA6C,GAAA5I,gBAAApC,GAA2D,EAA3DA,GAAAC,UAA2DC,OAA3DF,KAAAoC,YAAApC,GAAA,GAAAC,UAA2DD,GACtG,OAAO+K,QAAWC,KAAAjK,UAAA,GAAIqB,aAAazC,SArBrCoL,oBAAAhM,WAAoC,wBAGpCgd,OAAAhd,WAAmC,uBAA1B0C,SAAAua,WAAAD,OAA+C/Q,KAiBxCvJ,QAAIuJ,KAEnBA,uJCtBDlM,0BAAAC,WAA2B,oBAC3BgM,OAAAhM,WAAqB,qBAErBD,cAAU0C,WAACrB,UAAU6K,KAAOD,OAAIC,kICiDhC,SAAAiR,QAAkD9B,YAAsDC,MAMtG,MAAIna,WAAUC,QAAU,EACfgc,SAAiBD,OAAC9B,YAAaC,MAAMza,MAGvCuc,SAAiBD,OAAC9B,aAAaxa,SA9DxCuc,sBAAAnd,WAA4C,yBAoD5B0C,SAAMwa,OAWrBA,6JC/DDnd,0BAAAC,WAA2B,oBAC3Bmd,SAAAnd,WAAuB,uBAEvBD,cAAU0C,WAACrB,UAAU8b,OAASC,SAAMD,oICYpC,SAAAE,QAA+C7P,OAC7C,WAD6C,KAAAA,QAAAA,OAAiB,GACvD8P,SAAWD,OAAC7P,OAAO3M,SAf5Byc,sBAAArd,WAAsC,yBActB0C,SAAM0a,OAErBA,6JCjBDrd,0BAAAC,WAA2B,oBAC3Bqd,SAAArd,WAAuB,uBAEvBD,cAAU0C,WAACrB,UAAUgc,OAASC,SAAMD,4ICapC,SAAAE,YAAmDC,UACjD,MAAOC,cAAWF,WAACC,UAAU3c,SAjB/B4c,0BAAAxd,WAA0C,6BAgB1B0C,SAAU4a,WAEzBA,yKClBDvd,0BAAAC,WAA2B,oBAC3Bwd,aAAAxd,WAA2B,2BAE3BD,cAAU0C,WAACrB,UAAUkc,WAAaE,aAAUF,sICe5C,SAAAG,OAA8ClQ,OAC5C,WAD4C,KAAAA,QAAAA,OAAiB,GACtDmQ,QAAWD,MAAClQ,OAAO3M,SAnB5B8c,qBAAA1d,WAAqC,wBAkBrB0C,SAAK+a,MAEpBA,0JCpBD1d,0BAAAC,WAA2B,oBAC3B0d,QAAA1d,WAAsB,sBAEtBD,cAAU0C,WAACrB,UAAUqc,MAAQC,QAAKD,yICYlC,SAAAE,WAAkDJ,UAChD,MAAOK,aAAWD,UAACJ,UAAU3c,SAhB/Bgd,yBAAA5d,WAAyC,4BAezB0C,SAASib,UAExBA,sKCjBD5d,0BAAAC,WAA2B,oBAC3B4d,YAAA5d,WAA0B,0BAE1BD,cAAU0C,WAACrB,UAAUuc,UAAYC,YAASD,uICiC1C,SAAAE,QAA+CN,UAC7C,MAAOO,UAAWD,OAACN,UAAU3c,SArC/Bkd,sBAAA9d,WAAsC,yBAoCtB0C,SAAMmb,OAErBA,6JCtCD9d,0BAAAC,WAA2B,oBAC3B8d,SAAA9d,WAAuB,uBAEvBD,cAAU0C,WAACrB,UAAUyc,OAASC,SAAMD,mKCqCpC,SAAAE,YAAmDxS,OAAgB7K,WACjE,WADiE,KAAAA,YAAAA,UAAA2K,QAA6BG,OACvFwS,aAAWD,WAACxS,OAAQ7K,WAAWE,SAxCxCyK,qBAAArL,WAAsB,yBACtBge,aAAAhe,WAA0C,4BAsC1B0C,SAAUqb,WAEzBA,yKC1CDhe,0BAAAC,WAA2B,oBAC3Bge,aAAAhe,WAA2B,2BAE3BD,cAAU0C,WAACrB,UAAU2c,WAAaC,aAAUD,oIC2C5C,SAAAE,MAAgD7C,YAAqDC,MACnG,MAAIna,WAAUC,QAAU,EACf+c,OAAeD,KAAC7C,YAAaC,MAAMza,MAErCsd,OAAeD,KAAC7C,aAAaxa,SAjDtCsd,oBAAAle,WAAwC,uBA6CxB0C,SAAIub,KAKnBA,uJCnDDle,0BAAAC,WAA2B,oBAE3Bke,OAAAle,WAAqB,qBAErBD,cAAU0C,WAACrB,UAAU6c,KAAOC,OAAID,gJCkDhC,SAAAE,eAAsDC,UACrBC,UAC/B,MAAOC,iBAAWH,cAACC,UAAWC,UAAUzd,SAxD1C0d,6BAAAte,WAA6C,gCAsD7B0C,SAAayb,cAG5BA,kLCzDDpe,0BAAAC,WAA2B,oBAC3Bse,gBAAAte,WAA8B,8BAE9BD,cAAU0C,WAACrB,UAAU+c,cAAgBG,gBAAaH,yICelD,SAAAI,SACE,MAAOC,SAAWD,QAAG3d,SAnBvB4d,qBAAAxe,WAAqC,wBAkBrB0C,SAAK6b,MAEpBA,0JCpBDxe,0BAAAC,WAA2B,oBAC3Bwe,QAAAxe,WAAsB,sBAEtBD,cAAU0C,WAACrB,UAAUmd,MAAQC,QAAKD,6ICIlC,SAAAE,aAAoDzL,WAAqB2J,WAAqBjc,WAE5F,MAAOge,eAAWD,YAACzL,WAAY2J,WAAYjc,WAAWE,SARxD8d,2BAAA1e,WAA2C,8BAM3B0C,SAAW+b,YAG1BA,4KCVD1e,0BAAAC,WAA2B,oBAC3B0e,cAAA1e,WAA4B,4BAE5BD,cAAU0C,WAACrB,UAAUqd,YAAcC,cAAWD,yICe9C,SAAAE,QAA+C3J,WAC7C,MAAO4J,UAAWD,OAAC3J,WAAWpU,SAnBhCge,sBAAA5e,WAAsC,yBAkBtB0C,SAAMic,OAErBA,6JCpBD5e,0BAAAC,WAA2B,oBAC3B4e,SAAA5e,WAAuB,uBAEvBD,cAAU0C,WAACrB,UAAUud,OAASC,SAAMD,gICUpC,SAAAE,MAA6CtR,OAC3C,MAAOuR,QAAWD,KAACtR,OAAO3M,SAd5Bke,oBAAA9e,WAAoC,uBAapB0C,SAAImc,KAEnBA,uJCfD9e,0BAAAC,WAA2B,oBAC3B8e,OAAA9e,WAAqB,qBAErBD,cAAU0C,WAACrB,UAAUyd,KAAOC,OAAID,sIC+BhC,SAAAE,UAAiDxR,OAC/C,MAAOyR,YAAWD,SAACxR,OAAO3M,SAnC5Boe,wBAAAhf,WAAwC,2BAkCxB0C,SAAQqc,SAEvBA,mKCrCDhf,0BAAAC,WAA2B,oBAC3Bgf,WAAAhf,WAAyB,yBAEzBD,cAAU0C,WAACrB,UAAU2d,SAAWC,WAAQD,4ICYxC,SAAAE,WAAkD1B,UAChD,MAAO2B,aAAWD,UAAC1B,UAAU3c,SAf/Bse,yBAAAlf,WAAyC,4BAczB0C,SAASuc,UAExBA,sKChBDlf,0BAAAC,WAA2B,oBAC3Bkf,YAAAlf,WAA0B,0BAE1BD,cAAU0C,WAACrB,UAAU6d,UAAYC,YAASD,6ICW1C,SAAAE,WAAkDnK,WAChD,MAAOoK,aAAWD,UAACnK,WAAWpU,SAfhCwe,yBAAApf,WAAyC,4BAczB0C,SAASyc,UAExBA,sKChBDpf,0BAAAC,WAA2B,oBAC3Bof,YAAApf,WAA0B,0BAE1BD,cAAU0C,WAACrB,UAAU+d,UAAYC,YAASD,6ICwB1C,SAAAE,iBAAkD,GAAAC,UAAAre,GAA+B,EAA/BA,GAAAC,UAA+BC,OAA/BF,KAAAqe,MAAAre,GAAA,GAAAC,UAA+BD,GAC/E,OAAOse,aAAWF,UAAArd,UAAA,GAAIsd,OAAO1e,SA3B/B2e,yBAAAvf,WAAyC,4BA0BzB0C,SAAS2c,UAExBA,sKC7BDtf,0BAAAC,WAA2B,oBAC3Buf,YAAAvf,WAA0B,0BAE1BD,cAAU0C,WAACrB,UAAUie,UAAYE,YAASF,8ZCA1Ctf,aAAAC,WAA2B,mBAC3Bwf,OAAAxf,WAAqB,uBACrBoL,YAAApL,WAA0B,uBAY1Byf,sBAAA,SAAApf,QAUE,QAAAof,uBAAmBhe,OACCie,UACAhf,eADR,KAAAgf,YAAAA,UAA6B,OAC7B,KAAAhf,YAAAA,UAAA8e,OAAoCG,MAC9Ctf,OAAAM,KAAOC,MAHUA,KAAMa,OAANA,OACCb,KAAS8e,UAATA,UACA9e,KAASF,UAATA,YAEb0K,YAASK,UAACiU,YAAcA,UAAY,KACvC9e,KAAK8e,UAAY,GAEdhf,WAA2C,kBAAvBA,WAAUa,WACjCX,KAAKF,UAAY8e,OAAIG,MAa3B,MA/B8C9e,WAAA4e,sBAAapf,QAClDof,sBAAM3e,OAAb,SAAiBW,OAAuBoU,MAAmBnV,WACzD,WADsC,KAAAmV,QAAAA,MAAiB,OAAE,KAAAnV,YAAAA,UAAA8e,OAA4BG,MAC9E,GAAIF,uBAAsBhe,OAAQoU,MAAOnV,YAG3C+e,sBAAQje,SAAf,SAAoCjC,KAC1B,GAAAkC,QAAAlC,IAAMkC,OAAEH,WAAA/B,IAAU+B,UAC1B,OAAOV,MAAK4B,IAAIf,OAAOW,UAAUd,cAezBme,sBAAAre,UAAUC,WAApB,SAAqBC,YACnB,GAAMuU,OAAQjV,KAAK8e,UACbje,OAASb,KAAKa,MAGpB,OAFkBb,MAAKF,UAENa,SAASke,sBAAsBje,SAAUqU,OACxDpU,OAAMA,OAAEH,WAAUA,cAGxBme,uBA/B8C1f,aAAU0C,WAA3CC,SAAqB+c,sBA+BjCA,yKC9BD,SAAAG,aAA+Blf,UAAuBmV,OACpD,WADoD,KAAAA,QAAAA,MAAiB,GAC9D,SAAqCpU,QAC1C,MAAOA,QAAOqC,KAAK,GAAI+b,qBAAuBnf,UAAWmV,YAhB7DiK,qCAAA9f,WAAsC,yCActB0C,SAAWkd,YAI1BA,WAED,IAAAC,qBAAA,WACE,QAAAA,qBAAoBnf,UACAmV,OADAjV,KAASF,UAATA,UACAE,KAAKiV,MAALA,MAOtB,MALEgK,qBAAAze,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAO,IAAIqe,yBAAqBL,sBAC9Bhe,OAAQb,KAAKiV,MAAOjV,KAAKF,WACzB0B,UAAUd,aAEhBue,8JClBA,SAAAD,aAAoDlf,UAAuBmV,OACzE,WADyE,KAAAA,QAAAA,MAAiB,GACnFkK,cAAWH,YAAClf,UAAWmV,OAAOjV,SAdvCmf,2BAAA/f,WAA2C,8BAa3B0C,SAAWkd,YAE1BA,4KCjBD7f,0BAAAC,WAA2B,oBAC3B+f,cAAA/f,WAA4B,4BAE5BD,cAAU0C,WAACrB,UAAUwe,YAAcG,cAAWH,4ICyC9C,SAAAI,WACE,MAAOC,aAAWC,YAAGtf,SA7CvBqf,yBAAAjgB,WAAyC,4BA4CzB0C,SAAOsd,QAEtBA,8JC9CDjgB,0BAAAC,WAA2B,oBAC3BmgB,SAAAngB,WAAwB,uBAExBD,cAAU0C,WAACrB,UAAUgf,OAASD,SAAOH,QACrCjgB,aAAU0C,WAACrB,UAAU4e,QAAUG,SAAOH,2ICmDtC,SAAAK,WAAwD/c,QACrBkC,gBACjC,MAAO8a,aAAoBD,UAAC/c,QAASkC,gBAAgB5E,SAxDvD0f,yBAAAtgB,WAAkD,4BAsDlC0C,SAAS2d,UAGxBA,sKC1DDtgB,0BAAAC,WAA2B,oBAC3BsgB,YAAAtgB,WAA0B,0BAE1BD,cAAU0C,WAACrB,UAAUif,UAAYC,YAASD,iJC8C1C,SAAAE,aAA0DzL,gBACrBtP,gBAInC,MAAOgb,eAAWD,YAACzL,gBAAiBtP,gBAAgB5E,SAtDtD4f,2BAAAxgB,WAA2C,8BAiD3B0C,SAAW6d,YAM1BA,4KCvDDxgB,0BAAAC,WAA2B,oBAC3BwgB,cAAAxgB,WAA4B,4BAE5BD,cAAU0C,WAACrB,UAAUmf,YAAcC,cAAWD,qICgC9C,SAAAE,MAA6ClT,OAC3C,MAAOmT,QAAWD,KAAClT,OAAO3M,SApC5B8f,oBAAA1gB,WAAoC,uBAmCpB0C,SAAI+d,KAEnBA,uJCrCD1gB,0BAAAC,WAA2B,oBAC3B0gB,OAAA1gB,WAAqB,qBAErBD,cAAU0C,WAACrB,UAAUqf,KAAOC,OAAID,sICoChC,SAAAE,UAAiDpT,OAC/C,MAAOqT,YAAmBD,SAACpT,OAAO3M,SAvCpCggB,wBAAA5gB,WAAgD,2BAsChC0C,SAAQie,SAEvBA,mKC1CD5gB,0BAAAC,WAA2B,oBAC3B4gB,WAAA5gB,WAAyB,yBAEzBD,cAAU0C,WAACrB,UAAUuf,SAAWC,WAAQD,4ICiCxC,SAAAE,WAAkDtD,UAChD,MAAOuD,aAAWD,UAACtD,UAAU3c,SApC/BkgB,yBAAA9gB,WAAyC,4BAmCzB0C,SAASme,UAExBA,sKCrCD9gB,0BAAAC,WAA2B,oBAC3B8gB,YAAA9gB,WAA0B,0BAE1BD,cAAU0C,WAACrB,UAAUyf,UAAYC,YAASD,6ICmC1C,SAAAE,WAAkD/L,WAChD,MAAOgM,aAAWD,UAAC/L,WAAWpU,SAvChCogB,yBAAAhhB,WAAyC,4BAsCzB0C,SAASqe,UAExBA,sKCxCDhhB,0BAAAC,WAA2B,oBAC3BghB,YAAAhhB,WAA0B,0BAE1BD,cAAU0C,WAACrB,UAAU2f,UAAYC,YAASD,2ICuC1C,SAAAE,UAC4B5L,iBACA6L,QAC1B,WAD0B,KAAAA,SAAAA,OAAAC,WAA8CC,uBACjED,WAAWF,SAAC5L,iBAAkB6L,QAAQtgB,SA7C/CugB,wBAAAnhB,WAA+E,2BA0C/D0C,SAAQue,SAIvBA,mKC9CDlhB,0BAAAC,WAA2B,oBAC3BmhB,WAAAnhB,WAAyB,yBAEzBD,cAAU0C,WAACrB,UAAU6f,SAAWE,WAAQF,mMCyCxC,SAAAI,cACgC/H,SACA5Y,UACAwgB,QAC9B,WAF8B,KAAAxgB,YAAAA,UAAA2K,QAA6BG,WAC7B,KAAA0V,SAAAA,OAAAC,WAA8CC,uBACrEE,eAAWD,aAAC/H,SAAU5Y,UAAWwgB,QAAQtgB,SA/ClDyK,qBAAArL,WAAsB,yBACtBmhB,WAAAnhB,WAAsD,2BACtDshB,eAAAthB,WAA4C,8BAyC5B0C,SAAY2e,aAK3BA,+KCjDDthB,0BAAAC,WAA2B,oBAC3BshB,eAAAthB,WAA6B,6BAE7BD,cAAU0C,WAACrB,UAAUigB,aAAeC,eAAYD,+KCHhDthB,0BAAAC,WAA2B,oBAC3BuhB,eAAAvhB,WAA6B,6BAE7BD,cAAU0C,WAACrB,UAAUogB,aAAeD,eAAYC,mKCkEhD,SAAAC,SAC2BC,IACAhhB,WACzB,WADyB,KAAAA,YAAAA,UAAA2K,QAA6BG,OAC/CmW,UAAWF,QAACC,IAAKhhB,WAAWE,SAzErCyK,qBAAArL,WAAsB,yBAGtB2hB,UAAA3hB,WAAuC,yBAmEvB0C,SAAO+e,QAItBA,gKCzED1hB,0BAAAC,WAA2B,oBAC3B2hB,UAAA3hB,WAAwB,wBAExBD,cAAU0C,WAACrB,UAAUqgB,QAAUE,UAAOF,sKCqDtC,SAAAG,aAAuDF,IACrBG,eACAnhB,WAChC,WADgC,KAAAA,YAAAA,UAAA2K,QAA6BG,OACtDsW,cAAWF,YAACF,IAAKG,eAAgBnhB,WAAWE,SA3DrDyK,qBAAArL,WAAsB,yBAEtB8hB,cAAA9hB,WAA2C,6BAsD3B0C,SAAWkf,YAI1BA,4KC5DD7hB,0BAAAC,WAA2B,oBAC3B8hB,cAAA9hB,WAA4B,4BAE5BD,cAAU0C,WAACrB,UAAUwgB,YAAcE,cAAWF,sKCO9C,SAAAG,WAAkDrhB,WAChD,WADgD,KAAAA,YAAAA,UAAA2K,QAA6BG,OACtEwW,YAAWD,UAACrhB,WAAWE,SAVhCyK,qBAAArL,WAAsB,yBACtBgiB,YAAAhiB,WAAyC,2BAQzB0C,SAASqf,UAExBA,sKCbDhiB,0BAAAC,WAA2B,oBAC3BgiB,YAAAhiB,WAA0B,0BAE1BD,cAAU0C,WAACrB,UAAU2gB,UAAYC,YAASD,yICwB1C,SAAAE,WACE,MAAOC,WAAWD,UAAGrhB,SA1BvBshB,uBAAAliB,WAAuC,0BAyBvB0C,SAAOuf,QAEtBA,gKC5BDliB,0BAAAC,WAA2B,oBAC3BkiB,UAAAliB,WAAwB,wBAExBD,cAAU0C,WAACrB,UAAU6gB,QAAUC,UAAOD,mUCoCtC,SAAAE,QAA+CC,kBAC7C,MAAOC,UAAWF,OAACC,kBAAkBxhB,SAvCvCyhB,sBAAAriB,WAAsC,yBAsCtB0C,SAAMyf,OAErBA,6JCzCDpiB,0BAAAC,WAA2B,oBAC3BqiB,SAAAriB,WAAuB,uBAEvBD,cAAU0C,WAACrB,UAAU+gB,OAASE,SAAMF,8ICgDpC,SAAAG,aAAoDC,WACrBC,kBAC7B,WAD6B,KAAAA,mBAAAA,iBAA4B,GAClDC,cAAWH,YAACC,WAAYC,kBAAkB5hB,SApDnD6hB,2BAAAziB,WAA2C,8BAkD3B0C,SAAW4f,YAG1BA,4KCtDDviB,0BAAAC,WAA2B,oBAC3ByiB,cAAAziB,WAA4B,4BAE5BD,cAAU0C,WAACrB,UAAUkhB,YAAcG,cAAWH,sNCyE9C,SAAA3F,YAC8B+F,gBAE5B,GAAIhiB,WAAwB2K,QAAKG,MAC7BmX,uBAAiC,KACjCC,cAAwBrP,OAAOC,iBAkBnC,OAhBIjQ,eAAWC,YAACtC,UAAU,MACxBR,UAAYQ,UAAU,IAGpBqC,cAAWC,YAACtC,UAAU,IACxBR,UAAYQ,UAAU,GACbkK,YAASK,UAACvK,UAAU,MAC7B0hB,cAAgB1hB,UAAU,IAGxBqC,cAAWC,YAACtC,UAAU,IACxBR,UAAYQ,UAAU,GACbkK,YAASK,UAACvK,UAAU,MAC7ByhB,uBAAyBzhB,UAAU,IAG9B2hB,aAAWlG,WAAC+F,eAAgBC,uBAAwBC,cAAeliB,WAAWE,SAnGvFyK,qBAAArL,WAAsB,yBAEtBoL,YAAApL,WAA0B,uBAC1BuD,cAAAvD,WAA4B,yBAC5B6iB,aAAA7iB,WAA0C,4BAwE1B0C,SAAUia,WAwBzBA,yKCpGD5c,0BAAAC,WAA2B,oBAC3B6iB,aAAA7iB,WAA2B,2BAE3BD,cAAU0C,WAACrB,UAAUub,WAAakG,aAAUlG,oJCyC5C,SAAAmG,cAAwDnP,SACrBC,iBACjC,MAAOmP,gBAAWD,aAACnP,SAAUC,iBAAiBhT,SA7ChDmiB,4BAAA/iB,WAA4C,+BA2C5B0C,SAAYogB,aAG3BA,+KC/CD/iB,0BAAAC,WAA2B,oBAC3B+iB,eAAA/iB,WAA6B,6BAE7BD,cAAU0C,WAACrB,UAAU0hB,aAAeC,eAAYD,kJCsChD,SAAAE,YAAmDpP,iBACjD,MAAOqP,cAAWD,WAACpP,iBAAiBhT,SAzCtCqiB,0BAAAjjB,WAA0C,6BAwC1B0C,SAAUsgB,WAEzBA,yKC3CDjjB,0BAAAC,WAA2B,oBAC3BijB,aAAAjjB,WAA2B,2BAE3BD,cAAU0C,WAACrB,UAAU4hB,WAAaC,aAAUD,wJCsD5C,SAAAE,sBAA0D,GAAA1iB,SAAAS,GAAqE,EAArEA,GAAAC,UAAqEC,OAArEF,KAAAT,KAAAS,GAAA,GAAAC,UAAqED,GAC7H,OAAOkiB,kBAAWD,eAAAlhB,UAAA,GAAIxB,MAAMI,SA1D9BuiB,8BAAAnjB,WAA8C,iCAyD9B0C,SAAcwgB,eAE7BA,qLC3DDnjB,0BAAAC,WAA2B,oBAC3BmjB,iBAAAnjB,WAA+B,+BAE/BD,cAAU0C,WAACrB,UAAU8hB,eAAiBC,iBAAcD,sICuBpD,SAAAE,gBAAoD,GAAA/f,gBAAApC,GAA4E,EAA5EA,GAAAC,UAA4EC,OAA5EF,KAAAoC,YAAApC,GAAA,GAAAC,UAA4ED,GAC9H,OAAO2N,OAAWC,IAAA7M,UAAA,GAAIqB,aAAazC,SA3BrCgO,mBAAA5O,WAAmC,sBA0BnB0C,SAAQ0gB,SAEvBA,yJC5BDrjB,0BAAAC,WAA2B,oBAC3B4O,MAAA5O,WAAyB,oBAEzBD,cAAU0C,WAACrB,UAAUyN,IAAMD,MAAQwU,sICKnC,SAAAC,QAAkD/f,SAChD,MAAOggB,UAAWD,OAAC/f,SAAS1C,SAT9B0iB,sBAAAtjB,WAAsC,yBAQtB0C,SAAM2gB,OAErBA,6JCVDtjB,0BAAAC,WAA2B,oBAC3BsjB,SAAAtjB,WAAuB,uBAEvBD,cAAU0C,WAACrB,UAAUiiB,OAASC,SAAMD,uKCQpC,SAAA7B,cAAqD9gB,WACnD,WADmD,KAAAA,YAAAA,UAAA2K,QAA6BG,OACzE+V,eAAWC,aAAC9gB,WAAWE,SAXhCyK,qBAAArL,WAAsB,yBACtBuhB,eAAAvhB,WAA0D,8BAClD0C,SAAY6gB,aAAAhC,eAAAgC,aAQJ7gB,QAAY8e,aAE3BA,2bCdDzhB,aAAAC,WAA2B,mBAC3B6H,eAAA7H,WAA6B,qBAI7BwjB,uBAAAxjB,WAAqC,qCACrCyjB,cAAAzjB,WAA4B,yBAQ5B0jB,eAAA,SAAArjB,QAME,QAAAqjB,gBAAmBC,SACPjjB,WACVL,OAAAM,KAAAC,KAAM,SAAmCU,YACvC,GAAMsiB,YAAgChjB,KAChC8K,MAAQkY,WAAWC,oBAKzB,OAJAviB,YAAWkB,IAAA,GAAQqF,gBAAYa,aAAC,WAC9Bkb,WAAWE,qBAAqBpY,UAElCkY,WAAWG,iBAAiBziB,YACrBA,aATQV,KAAQ+iB,SAARA,SALZ/iB,KAAaojB,iBAgBlBpjB,KAAKF,UAAYA,UAcrB,MA/BuCG,WAAA6iB,eAAarjB,QAoBlDqjB,eAAAtiB,UAAgB2iB,iBAAhB,SAAiBziB,YAEf,IAAK,GADC2iB,gBAAiBrjB,KAAK+iB,SAASxiB,OAC5B6E,EAAI,EAAGA,EAAIie,eAAgBje,IAAK,CACvC,GAAMke,SAAUtjB,KAAK+iB,SAAS3d,EAC9B1E,YAAWkB,IAAA5B,KACJF,UAAUa,SAAS,SAACuB,OAACohB,SAAAphB,GAAOohB,QAAE5iB,WAAAwB,GAAUxB,UAAQ4iB,SAAQC,aAAaC,QAAQ9iB,aAChF4iB,QAAQG,OACPH,QAAOA,QAAE5iB,WAAUA,gBAI9BoiB,gBA/BuC3jB,aAAU0C,WAApCC,SAAcghB,eA+B1BA,eACDD,cAAWa,YAACZ,gBAAiBF,uBAAoBe,4KC7CjDC,+BAAAxkB,WAAgC,iCAEhCukB,qBAAA,WAAA,QAAAA,wBACS3jB,KAAaojB,iBAgBtB,MAbEO,sBAAAnjB,UAAkByiB,mBAAlB,WAEE,MADAjjB,MAAKojB,cAAcS,KAAK,GAAID,mBAAeE,gBAAC9jB,KAAKF,UAAUikB,QACpD/jB,KAAKojB,cAAc7iB,OAAS,GAGrCojB,qBAAAnjB,UAAoB0iB,qBAApB,SAAqBpY,OACnB,GAAMkZ,kBAAmBhkB,KAAKojB,cACxBa,mBAAqBD,iBAAiBlZ,MAC5CkZ,kBAAiBlZ,OAAS,GAAI8Y,mBAAeE,gBAC3CG,mBAAmBC,gBACnBlkB,KAAKF,UAAUikB,QAGrBJ,uBAjBa7hB,SAAoB6hB,qBAiBhCA,4HCpBD,SAAAD,aAA4BS,YAAkBC,WAC5C,IAAK,GAAIhf,GAAI,EAAGJ,IAAMof,UAAU7jB,OAAQ6E,EAAIJ,IAAKI,IAG/C,IAAK,GAFCif,UAAWD,UAAUhf,GACrBkf,aAAepd,OAAOqd,oBAAoBF,SAAS7jB,WAChDgkB,EAAI,EAAGC,KAAOH,aAAa/jB,OAAQikB,EAAIC,KAAMD,IAAK,CACzD,GAAME,QAAOJ,aAAaE,EAC1BL,aAAY3jB,UAAUkkB,QAAQL,SAAS7jB,UAAUkkB,mBANvC5iB,SAAW4hB,YAS1BA,sbCTD5U,UAAA1P,WAAwB,gBAExB6H,eAAA7H,WAA6B,qBAI7BwjB,uBAAAxjB,WAAqC,qCACrCyjB,cAAAzjB,WAA4B,yBAO5BulB,cAAA,SAAAllB,QAME,QAAAklB,eAAmB5B,SACPjjB,WACVL,OAAAM,KAAOC,MAFUA,KAAQ+iB,SAARA,SALZ/iB,KAAaojB,iBAQlBpjB,KAAKF,UAAYA,UA2BrB,MApCsCG,WAAA0kB,cAAUllB,QAYpCklB,cAAAnkB,UAAUC,WAApB,SAAqBC,YACnB,GAAM7B,SAA4BmB,KAC5B8K,MAAQjM,QAAQokB,oBAItB,OAHAviB,YAAWkB,IAAA,GAAQqF,gBAAYa,aAAC,WAC9BjJ,QAAQqkB,qBAAqBpY,UAExBrL,OAAKe,UAACC,WAAAV,KAAAC,KAAWU,aAG1BikB,cAAAnkB,UAAKokB,MAAL,WAIE,IAAK,GAHC/lB,SAAUmB,KACVqjB,eAAiBxkB,QAAQkkB,SAASxiB,OAE/B6E,EAAI,EAAGA,EAAIie,eAAgBje,KAClC,WACE,GAAIke,SAAUzkB,QAAQkkB,SAAS3d,EAE/BvG,SAAQiB,UAAUa,SAChB,WAAQ2iB,QAAQC,aAAaC,QAAQ3kB,UACrCykB,QAAQG,WAKlBkB,eApCsC7V,UAAOS,QAAhCzN,SAAa6iB,cAoCzBA,cACD9B,cAAWa,YAACiB,eAAgB/B,uBAAoBe,yICnDhDG,6BAAA,WACE,QAAAA,iBAAmBI,gBACAW,uBAAP,KAAAA,oBAAAA,kBAAmClS,OAAOC,mBADnC5S,KAAekkB,gBAAfA,gBACAlkB,KAAiB6kB,kBAAjBA,kBAErB,MAAAf,oBAJahiB,SAAegiB,gBAI3BA,igBCJD3kB,aAAAC,WAA2B,mBAC3B0lB,eAAA1lB,WAA6B,qBAC7B2lB,iBAAA3lB,WAA+B,+BAC/B4lB,gBAAA5lB,WAA8B,8BAE9BwkB,kBAAAxkB,WAAgC,gCAEhC6lB,uBAAA7lB,WAAoD,uCAE9C8lB,gBAA0B,IAWhCC,cAAA,SAAA1lB,QAKE,QAAA0lB,eAAmBC,iBACjB3lB,OAAAM,KAAAC,KAAMilB,uBAAaI,cAAEH,iBADJllB,KAAeolB,gBAAfA,gBAJXplB,KAAcslB,kBACdtlB,KAAeulB,mBACfvlB,KAAUwlB,cA4NpB,MA/NmCvlB,WAAAklB,cAAoB1lB,QASrD0lB,cAAA3kB,UAAUilB,WAAV,SAAWC,SACT,GAAMC,SAAkBD,QAAQC,QAAQ,IACxC,KAAiB,IAAbA,QACF,KAAM,IAAIlW,OAAM,8DAElB,OAAOkW,SAAUR,cAAcS,iBAGjCT,cAAA3kB,UAAoBqlB,qBAApB,SAAwBH,QAAiBxgB,OAAchG,OACrD,IAA8B,IAA1BwmB,QAAQC,QAAQ,KAClB,KAAM,IAAIlW,OAAM,sDAElB,KAA8B,IAA1BiW,QAAQC,QAAQ,KAClB,KAAM,IAAIlW,OAAM,wDAElB,IAAMsT,UAAWoC,cAAcW,aAAaJ,QAASxgB,OAAQhG,OACvD6mB,KAAO,GAAIhB,kBAAcjC,eAAIC,SAAU/iB,KAE7C,OADAA,MAAKulB,gBAAgB1B,KAAKkC,MACnBA,MAGTZ,cAAA3kB,UAAmBwlB,oBAAnB,SAAuBN,QAAiBxgB,OAAchG,OACpD,IAA8B,IAA1BwmB,QAAQC,QAAQ,KAClB,KAAM,IAAIlW,OAAM,uDAElB,IAAMsT,UAAWoC,cAAcW,aAAaJ,QAASxgB,OAAQhG,OACvDL,QAAU,GAAImmB,iBAAaL,cAAI5B,SAAU/iB,KAE/C,OADAA,MAAKslB,eAAezB,KAAKhlB,SAClBA,SAGDsmB,cAAA3kB,UAA0BylB,2BAAlC,SAAmCjD,WACAkD,YADnC,GAAA7d,OAWCrI,KATO+iB,WAQN,OAPAC,YAAWxhB,UAAU,SAAC5C,OACpBmkB,SAASc,MAAOJ,MAAOpb,MAAKob,MAAQyC,WAAY3C,aAAcuB,eAAYqB,aAACC,WAAWxnB,UACrF,SAACK,KACF8jB,SAASc,MAAOJ,MAAOpb,MAAKob,MAAQyC,WAAY3C,aAAcuB,eAAYqB,aAACE,YAAYpnB,QACtF,WACD8jB,SAASc,MAAOJ,MAAOpb,MAAKob,MAAQyC,WAAY3C,aAAcuB,eAAYqB,aAACG,qBAEtEvD,UAGToC,cAAA3kB,UAAgB+lB,iBAAhB,SAAiBvD,WACAwD,uBADjB,GAAAne,OAmCCrI,SAlCgB,KAAAwmB,wBAAAA,sBAAoC,KACnD,IAIIjW,cAJEkW,UACAC,WAA6BD,OAAMA,OAAEE,OAAO,GAC5CC,oBAAsBzB,cACzB0B,4BAA4BL,uBAAuB3B,iBAwBtD,OArBA7kB,MAAKW,SAAS,WACZ4P,aAAAyS,WAA0BxhB,UAAU,SAAAgP,GAClC,GAAI5R,OAAQ4R,CAERA,aAAarR,cAAU0C,aACzBjD,MAAQyJ,MAAK4d,2BAA2BrnB,MAAOyJ,MAAKob,QAEtDgD,OAAO5C,MAAOJ,MAAOpb,MAAKob,MAAOF,aAAcuB,eAAYqB,aAACC,WAAWxnB,UACtE,SAACK,KACFwnB,OAAO5C,MAAOJ,MAAOpb,MAAKob,MAAOF,aAAcuB,eAAYqB,aAACE,YAAYpnB,QACvE,WACDwnB,OAAO5C,MAAOJ,MAAOpb,MAAKob,MAAOF,aAAcuB,eAAYqB,aAACG,sBAE7D,GAECM,sBAAwBjU,OAAOC,mBACjC5S,KAAKW,SAAS,WAAM,MAAA4P,cAAA9I,eAA4Bmf,qBAGlD5mB,KAAKwlB,WAAW3B,KAAK6C,YAGnBI,KAAA,SAAKpB,QAAiBxgB,OAAc6hB,YAClCL,UAAUC,OAAQ,EAClBD,UAAUM,SAAW7B,cAAcW,aAAaJ,QAASxgB,OAAQ6hB,YAAY,MAKnF5B,cAAA3kB,UAAmBymB,oBAAnB,SAAoBC,wBAClB,GAAMR,YAA6BD,OAAQS,uBAAwBP,OAAO,EAE1E,OADA3mB,MAAKwlB,WAAW3B,KAAK6C,YAEnBI,KAAA,SAAKpB,SACH,GAAMyB,cAA6C,gBAAZzB,UAAyBA,SAAWA,OAC3EgB,WAAUC,OAAQ,EAClBD,UAAUM,SAAAG,aAAwB/N,IAAI,SAAAsM,SACpC,MAAAP,eAAc0B,4BAAdnB,cAMRP,cAAA3kB,UAAK4mB,MAAL,WAEE,IADA,GAAM9B,gBAAiBtlB,KAAKslB,eACrBA,eAAe/kB,OAAS,GAC7B+kB,eAAenjB,QAAQyiB,OAGzBnlB,QAAKe,UAAC4mB,MAAArnB,KAAOC,KAEb,KADA,GAAMqnB,iBAAArnB,KAAuBwlB,WAAWzO,OAAO,SAAAuQ,MAAQ,MAAAA,MAAAX,QAChDU,gBAAgB9mB,OAAS,GAAG,CACjC,GAAM+mB,MAAOD,gBAAgBllB,OAC7BnC,MAAKolB,gBAAgBkC,KAAKb,OAAQa,KAAKN,YAIpC7B,cAA2B0B,4BAAlC,SAAmCnB,SACjC,GAAuB,gBAAZA,SACT,MAAO,IAAI9B,mBAAeE,gBAACnR,OAAOC,kBAOpC,KAAK,GALC5N,KAAM0gB,QAAQnlB,OAChBgnB,YAAc,EACdC,kBAAoB7U,OAAOC,kBAC3BgU,oBAAsBjU,OAAOC,kBAExBxN,EAAI,EAAGA,EAAIJ,IAAKI,IAAK,CAC5B,GAAMqe,OAAQre,EAAIpF,KAAK4lB,gBACjB6B,EAAI/B,QAAQtgB,EAClB,QAAQqiB,GACN,IAAK,IACL,IAAK,IACH,KACF,KAAK,IACHF,WAAa9D,KACb,MACF,KAAK,IACH8D,YAAc,CACd,MACF,KAAK,IACH,GAAIC,oBAAsB7U,OAAOC,kBAC/B,KAAM,IAAInD,OAAM,iGAGlB+X,mBAAoBD,YAAc,EAAIA,WAAa9D,KACnD,MACF,KAAK,IACH,GAAImD,sBAAwBjU,OAAOC,kBACjC,KAAM,IAAInD,OAAM,iGAGlBmX,qBAAsBW,YAAc,EAAIA,WAAa9D,KACrD,MACF,SACE,KAAM,IAAIhU,OAAM,0FACoCgY,EAAI,OAI9D,MAAIb,qBAAsB,EACjB,GAAIhD,mBAAeE,gBAAC0D,mBAEpB,GAAI5D,mBAAeE,gBAAC0D,kBAAmBZ,sBAI3CzB,cAAYW,aAAnB,SAAoBJ,QACAxgB,OACA6hB,WACAW,6BAClB,OADkB,KAAAA,8BAAAA,6BAA4C,IAChC,IAA1BhC,QAAQC,QAAQ,KAClB,KAAM,IAAIlW,OAAM,yEAkBlB,KAAK,GAfCzK,KAAM0gB,QAAQnlB,OACdonB,gBACAC,SAAWlC,QAAQC,QAAQ,KAC3BkC,aAA4B,IAAdD,SAAkB,EAAKA,UAAY5nB,KAAK4lB,gBACtDkC,SAA6B,gBAAX5iB,QACtB,SAACsL,GAAW,MAAAA,IACZ,SAACA,GAEC,MAAIkX,8BAA+BxiB,OAAOsL,YAAcuU,kBAAcjC,eAC7D5d,OAAOsL,GAAGuS,SAEZ7d,OAAOsL,IAEd+W,YAAc,EAETniB,EAAI,EAAGA,EAAIJ,IAAKI,IAAK,CAC5B,GAAMqe,OAAQre,EAAIpF,KAAK4lB,gBAAkBiC,YACrCtE,iBAAA,GACEkE,EAAI/B,QAAQtgB,EAClB,QAAQqiB,GACN,IAAK,IACL,IAAK,IACH,KACF,KAAK,IACHF,WAAa9D,KACb,MACF,KAAK,IACH8D,YAAc,CACd,MACF,KAAK,IACHhE,aAAeuB,eAAYqB,aAACG,gBAC5B,MACF,KAAK,IACH,KACF,KAAK,IACH/C,aAAeuB,eAAYqB,aAACE,YAAYU,YAAc,QACtD,MACF,SACExD,aAAeuB,eAAYqB,aAACC,WAAW0B,SAASL,IAIhDlE,cACFoE,aAAa9D,MAAOJ,MAAO8D,YAAc,EAAIA,WAAa9D,MAAOF,aAAYA,eAGjF,MAAOoE,eAEXxC,eA/NmCF,uBAAoB8C,qBAA1CjmB,SAAaqjB,cA+NzBA,+ZCnPD6C,cAAA5oB,WAA4B,8BAE5B6oB,iBAAA7oB,WAA+B,iCAE/B2oB,qBAAA,SAAAtoB,QAOE,QAAAsoB,sBAAYG,gBACOC,WARrB,GAAA9f,OAmCCrI,SA5Ba,KAAAkoB,kBAAAA,gBAAmD7C,mBACnD,KAAA8C,YAAAA,UAA2BxV,OAAOC,mBAC5CnT,OAAAM,KAAAC,KAAMkoB,gBAAiB,WAAM,MAAA7f,OAAAob,QADZzjB,KAASmoB,UAATA,UAJZnoB,KAAKyjB,MAAW,EAChBzjB,KAAK8K,OAAY,EA8B1B,MAnC0C7K,WAAA8nB,qBAActoB,QAiB/CsoB,qBAAAvnB,UAAK4mB,MAAZ,WAKE,IAHA,GACIloB,OAAYkpB,OADhBlmB,GAAiClC,KAA1BqoB,QAAAnmB,GAAOmmB,QAAEF,UAAAjmB,GAASimB,WAGjBC,OAASC,QAAQlmB,WAAanC,KAAKyjB,MAAQ2E,OAAOnT,QAAUkT,aAC9DjpB,MAAQkpB,OAAOE,QAAQF,OAAO3mB,MAAO2mB,OAAOnT,UAKlD,GAAI/V,MAAO,CACT,KAAOkpB,OAASC,QAAQlmB,SACtBimB,OAAO3gB,aAET,MAAMvI,SA9BO6oB,qBAAenC,gBAAW,GAiC7CmC,sBAnC0CE,iBAAcM,eAA3CzmB,SAAoBimB,qBAmChCA,oBAOD,IAAA1C,eAAA,SAAA5lB,QAIE,QAAA4lB,eAAsBvlB,UACA0oB,KACA1d,WAAV,KAAAA,QAAAA,MAA0BhL,UAAUgL,OAAS,GACvDrL,OAAAM,KAAAC,KAAMF,UAAW0oB,MAHGxoB,KAASF,UAATA,UACAE,KAAIwoB,KAAJA,KACAxoB,KAAK8K,MAALA,MAJZ9K,KAAMyoB,QAAY,EAM1BzoB,KAAK8K,MAAQhL,UAAUgL,MAAQA,MAkDnC,MA1DsC7K,WAAAolB,cAAc5lB,QAW3C4lB,cAAA7kB,UAAQG,SAAf,SAAgBc,MAAWwT,OACzB,OADyB,KAAAA,QAAAA,MAAiB,IACrCjV,KAAK0oB,GACR,MAAOjpB,QAAKe,UAACG,SAAAZ,KAAAC,KAASyB,MAAOwT,MAE/BjV,MAAKyoB,QAAS,CAKd,IAAML,QAAS,GAAI/C,eAAcrlB,KAAKF,UAAWE,KAAKwoB,KAEtD,OADAxoB,MAAK4B,IAAIwmB,QACFA,OAAOznB,SAASc,MAAOwT,QAGtBoQ,cAAA7kB,UAAcmoB,eAAxB,SAAyB7oB,UAAiC4oB,GAAUzT,WAAA,KAAAA,QAAAA,MAAiB,GACnFjV,KAAKiV,MAAQnV,UAAU2jB,MAAQxO,KACxB,IAAAoT,SAAAvoB,UAAOuoB,OAGd,OAFAA,SAAQxE,KAAK7jB,MACbqoB,QAAQO,KAAKvD,cAAcwD,cACpB,GAGCxD,cAAA7kB,UAAcsoB,eAAxB,SAAyBhpB,UAAiC4oB,GAAUzT,WAAA,KAAAA,QAAAA,MAAiB,IAI3EoQ,cAAA7kB,UAAQuoB,SAAlB,SAAmBtnB,MAAUwT,OAC3B,IAAoB,IAAhBjV,KAAKyoB,OACP,MAAOhpB,QAAKe,UAACuoB,SAAAhpB,KAAAC,KAASyB,MAAOwT,QAInBoQ,cAAWwD,YAAzB,SAA6BG,EAAqBC,GAChD,MAAID,GAAE/T,QAAUgU,EAAEhU,MACZ+T,EAAEle,QAAUme,EAAEne,MACT,EACEke,EAAEle,MAAQme,EAAEne,MACd,GAEC,EAEDke,EAAE/T,MAAQgU,EAAEhU,MACd,GAEC,GAGdoQ,eA1DsC2C,cAAWkB,YAApCpnB,SAAaujB,cA0DzBA,wPC/ED,SAAA8D,kBACE,GAAIta,OAAIF,KAACya,eACP,MAAO,IAAIva,QAAIF,KAACya,cACjB,IAAYva,OAAIF,KAAC0a,eAChB,MAAO,IAAIxa,QAAIF,KAAC0a,cAEhB,MAAM,IAAI5Z,OAAM,yCAIpB,QAAA6Z,qBACE,GAAIza,OAAIF,KAACya,eACP,MAAO,IAAIva,QAAIF,KAACya,cAEhB,IAAIG,YAAA,EACJ,KAEE,IAAK,GADCC,UAAW,iBAAkB,oBAAqB,sBAC/CpkB,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAEE,GADAmkB,OAASC,QAAQpkB,GACb,GAAIyJ,QAAIF,KAAC8a,cAAcF,QACzB,MAEF,MAAOjoB,IAIX,MAAO,IAAIuN,QAAIF,KAAC8a,cAAcF,QAC9B,MAAOjoB,GACP,KAAM,IAAImO,OAAM,oDAetB,QAAAia,SAAwBla,IAAama,SACnC,WADmC,KAAAA,UAAAA,QAAsB,MAClD,GAAItb,iBAA+Bub,OAAQ,MAAOpa,IAAGA,IAAEma,QAAOA,UAGvE,QAAAE,UAAyBra,IAAasa,KAAYH,SAChD,MAAO,IAAItb,iBAA+Bub,OAAQ,OAAQpa,IAAGA,IAAEsa,KAAIA,KAAEH,QAAOA,UAG9E,QAAAI,YAA2Bva,IAAama,SACtC,MAAO,IAAItb,iBAA+Bub,OAAQ,SAAUpa,IAAGA,IAAEma,QAAOA,UAG1E,QAAAK,SAAwBxa,IAAasa,KAAYH,SAC/C,MAAO,IAAItb,iBAA+Bub,OAAQ,MAAOpa,IAAGA,IAAEsa,KAAIA,KAAEH,QAAOA,UAG7E,QAAAM,WAA0Bza,IAAasa,KAAYH,SACjD,MAAO,IAAItb,iBAA+Bub,OAAQ,QAASpa,IAAGA,IAAEsa,KAAIA,KAAEH,QAAOA,UAK/E,QAAAO,aAA+B1a,IAAama,SAC1C,MAAAQ,aAAA,GACM9b,iBACFub,OAAQ,MACRpa,IAAGA,IACH4a,aAAc,OACdT,QAAOA,WAwWb,QAAAU,kBAA0BD,aAAsBE,KAC9C,OAAQF,cACN,IAAK,OACD,MAAI,YAAcE,KAETA,IAAIF,aAAeE,IAAIC,SAAW5a,KAAKC,MAAM0a,IAAIC,UAAYD,IAAIE,cAAgB,QAEjF7a,KAAKC,MAAM0a,IAAIE,cAAgB,OAE1C,KAAK,MACH,MAAOF,KAAIG,WACb,KAAK,OACL,QACE,MAAS,YAAcH,KAAOA,IAAIC,SAAWD,IAAIE,6OAtdzD3b,OAAAzP,WAAqB,kBACrBC,WAAAD,WAAyB,sBACzBE,cAAAF,WAA4B,yBAC5BD,aAAAC,WAA2B,mBAC3B2P,aAAA3P,WAA2B,mBAE3Bia,MAAAja,WAAoB,qBA+DJ0C,SAAO4nB,QAEtBA,QAEe5nB,QAAQ+nB,SAEvBA,SAEe/nB,QAAUioB,WAEzBA,WAEejoB,QAAOkoB,QAEtBA,QAEeloB,QAASmoB,UAExBA,SAED,IAAME,aAAA9Q,MAAiBD,IAAC,SAAC5I,EAAiB1F,OAAkB,MAAA0F,GAAA+Z,UAE5CzoB,SAAWooB,YAS1BA,WAOD,IAAA7b,gBAAA,SAAA5O,QA4CE,QAAA4O,gBAAYqc,cACVjrB,OAAAM,KAAOC,KAEP,IAAM2qB,UACJ/f,OAAO,EACPggB,UAAW,WACT,MAAO5qB,MAAK6qB,YAAc1B,eAAeppB,KAAKC,MAAQspB,qBAExDuB,aAAa,EACbC,iBAAiB,EACjBnB,WACAC,OAAQ,MACRQ,aAAc,OACdvJ,QAAS,EAGX,IAA4B,gBAAjB6J,cACTC,QAAQnb,IAAMkb,iBAEd,KAAK,GAAMK,QAAQL,cACbA,aAAajc,eAAesc,QAC9BJ,QAAQI,MAAQL,aAAaK,MAKnC/qB,MAAK2qB,QAAUA,QAMnB,MA5EuC1qB,WAAAoO,eAAa5O,QAyExC4O,eAAA7N,UAAUC,WAApB,SAAqBC,YACnB,MAAO,IAAIsqB,gBAAetqB,WAAYV,KAAK2qB,UA/CtCtc,eAAMnO,OAAwB,WACnC,GAAMA,QAAc,SAACwqB,cACnB,MAAO,IAAIrc,gBAAeqc,cAU5B,OAPAxqB,QAAO+qB,IAAMvB,QACbxpB,OAAOgrB,KAAOrB,SACd3pB,OAAOirB,OAASpB,WAChB7pB,OAAOkrB,IAAMpB,QACb9pB,OAAOmrB,MAAQpB,UACf/pB,OAAOorB,QAAUpB,YAEUhqB,UAqC/BmO,gBA5EuClP,aAAU0C,WAApCC,SAAcuM,eA4E1BA,cAOD,IAAA2c,gBAAA,SAAAvrB,QAIE,QAAAurB,gBAAYrnB,YAAmCgnB,SAC7ClrB,OAAAM,KAAAC,KAAM2D,aADuC3D,KAAO2qB,QAAPA,QAFvC3qB,KAAIurB,MAAY,CAKtB,IAAM5B,SAAUgB,QAAQhB,QAAUgB,QAAQhB,WAGrCgB,SAAQE,aAAgBlB,QAAQ,sBACnCA,QAAQ,oBAAsB,kBAI1B,gBAAkBA,UAAc9a,OAAIF,KAAC6c,UAAYb,QAAQb,eAAgBjb,QAAIF,KAAC6c,cAAqC,KAAjBb,QAAQb,OAC9GH,QAAQ,gBAAkB,oDAI5BgB,QAAQb,KAAO9pB,KAAKyrB,cAAcd,QAAQb,KAAMa,QAAQhB,QAAQ,iBAEhE3pB,KAAKkR,OAsLT,MA5MuCjR,WAAA+qB,eAAiBvrB,QAyBtDurB,eAAAxqB,UAAI1B,KAAJ,SAAKwC,GACHtB,KAAKurB,MAAO,CACZ,IAAArpB,IAA0ClC,KAAlCsqB,IAAApoB,GAAGooB,IAAEK,QAAAzoB,GAAOyoB,QAAEhnB,YAAAzB,GAAWyB,YAC3B4mB,SAAW,GAAImB,cAAapqB,EAAGgpB,IAAKK,QAE1ChnB,aAAY7E,KAAKyrB,WAGXS,eAAAxqB,UAAI0Q,KAAZ,WACE,GAAAhP,IAGQlC,KAFN2qB,QAAAzoB,GAAOyoB,QACPgB,GAAAzpB,GAA8DyoB,QAAnDiB,KAAAD,GAAIC,KAAEhC,OAAA+B,GAAM/B,OAAEpa,IAAAmc,GAAGnc,IAAE5E,MAAA+gB,GAAK/gB,MAAEihB,SAAAF,GAAQE,SAAElC,QAAAgC,GAAOhC,QAAEG,KAAA6B,GAAI7B,KAExDc,UAAYD,QAAQC,UACpBN,IAAsBjrB,WAAQ8B,SAACypB,WAAW7qB,KAAK4qB,QAErD,IAASL,MAAQhrB,cAAW+B,YAC1BrB,KAAKd,MAAMI,cAAW+B,YAACC,OAClB,CACLtB,KAAKsqB,IAAMA,IAMXtqB,KAAK8rB,YAAYxB,IAAKK,QAStB,KANIiB,KACOvsB,WAAQ8B,SAACmpB,IAAIyB,MAAMhsB,KAAKuqB,IAAKV,OAAQpa,IAAK5E,MAAOghB,KAAMC,UAEvDxsB,WAAQ8B,SAACmpB,IAAIyB,MAAMhsB,KAAKuqB,IAAKV,OAAQpa,IAAK5E,UAGtCtL,cAAW+B,YAExB,MADArB,MAAKd,MAAMI,cAAW+B,YAACC,GAChB,IAkBT,IAdIsJ,QACF0f,IAAIzJ,QAAU8J,QAAQ9J,QACtByJ,IAAIF,aAAeO,QAAQP,cAGzB,mBAAqBE,OACvBA,IAAIQ,kBAAoBH,QAAQG,iBAIlC9qB,KAAKgsB,WAAW1B,IAAKX,UAGZG,KAAOzqB,WAAQ8B,SAACmpB,IAAIpZ,MAAMnR,KAAKuqB,IAAKR,MAAQzqB,WAAQ8B,SAACmpB,IAAIpZ,MAAMnR,KAAKuqB,QAC9DhrB,cAAW+B,YAExB,MADArB,MAAKd,MAAMI,cAAW+B,YAACC,GAChB,KAIX,MAAOgpB,MAGDU,eAAAxqB,UAAairB,cAArB,SAAsB3B,KAAWmC,aAC/B,IAAKnC,MAAwB,gBAATA,MAClB,MAAOA,KACF,IAAIjb,OAAIF,KAAC6c,UAAY1B,eAAgBjb,QAAIF,KAAC6c,SAC/C,MAAO1B,KAGT,IAAImC,YAAa,CACf,GAAMC,YAAaD,YAAYtG,QAAQ,MACnB,IAAhBuG,aACFD,YAAcA,YAAYE,UAAU,EAAGD,aAI3C,OAAQD,aACN,IAAK,oCACH,MAAA/kB,QAAcgF,KAAK4d,MAAM1Q,IAAI,SAAAjN,KAAO,MAAGigB,WAAUjgB,KAAA,IAAQigB,UAAUtC,KAA/B3d,QAA6CkgB,KAAK,IACxF,KAAK,mBACH,MAAO1c,MAAK2c,UAAUxC,KACxB,SACE,MAAOA,QAILkB,eAAAxqB,UAAUwrB,WAAlB,SAAmB1B,IAAqBX,SACtC,IAAK,GAAIxd,OAAOwd,SACVA,QAAQlb,eAAetC,MACzBme,IAAIiC,iBAAiBpgB,IAAKwd,QAAQxd,OAKhC6e,eAAAxqB,UAAWsrB,YAAnB,SAAoBxB,IAAqBK,SAGvC,QAAA6B,YAA0ClrB,GACxC,GAAAY,IAAoEsqB,WAA7D9rB,WAAAwB,GAAUxB,WAAE+rB,mBAAAvqB,GAAkBuqB,mBAAE9B,QAAAzoB,GAAOyoB,OAC1C8B,qBACFA,mBAAmBvtB,MAAMoC,GAE3BZ,WAAWxB,MAAM,GAAIwtB,kBAAiB1sB,KAAM2qB,UAkC9C,QAAAgC,qBAAmDrrB,GACjD,GAAAY,IAA8EyqB,oBAAtEjsB,WAAAwB,GAAUxB,WAAE+rB,mBAAAvqB,GAAkBuqB,mBAAE9B,QAAAzoB,GAAOyoB,OAC/C,IAAwB,IAApB3qB,KAAK4Q,WAAkB,CAEzB,GAAIgc,UAAiC,OAAhB5sB,KAAK6sB,OAAkB,IAAM7sB,KAAK6sB,OACnDtC,SAAuC,SAAtBvqB,KAAKoqB,aACxBpqB,KAAKuqB,UAAYvqB,KAAKwqB,aAAgBxqB,KAAKuqB,QAK9B,KAAXqC,WACFA,SAASrC,SAAW,IAAM,GAGxB,KAAOqC,UAAUA,SAAS,KACxBH,oBACFA,mBAAmB1tB,WAErB2B,WAAW5B,KAAKwC,GAChBZ,WAAW3B,aAEP0tB,oBACFA,mBAAmBvtB,MAAMoC,GAE3BZ,WAAWxB,MAAM,GAAI4tB,WAAU,cAAgBF,SAAQ5sB,KAAM2qB,YAlEnE,GAAM8B,oBAAqB9B,QAAQ8B,kBAanC,IAJAnC,IAAIyC,UAAYP,WACVA,WAAY7B,QAAUA,QACtB6B,WAAY9rB,WAAaV,KACzBwsB,WAAYC,mBAAqBA,mBACnCnC,IAAI0C,QAAU,mBAAqB1C,KAAK,CAC1C,GAAImC,mBAAoB,CACtB,GAAIQ,cACJA,eAAc,SAAS3rB,GACb2rB,cAAkBR,mBACP3tB,KAAKwC,IAEtBuN,OAAIF,KAAC0a,eACPiB,IAAI4C,WAAaD,cAEjB3C,IAAI0C,OAAOE,WAAaD,cAEpBA,cAAaR,mBAAqBA,mBAE1C,GAAIU,WACJA,YAAW,SAA+B7rB,GACxC,GAAAY,IAAmEirB,WAA3DV,mBAAAvqB,GAAkBuqB,mBAAE/rB,WAAAwB,GAAUxB,WAAEiqB,QAAAzoB,GAAOyoB,OAC3C8B,qBACFA,mBAAmBvtB,MAAMoC,GAE3BZ,WAAWxB,MAAM,GAAI4tB,WAAU,aAAc9sB,KAAM2qB,WAErDL,IAAIhZ,QAAU6b,WACRA,WAAUxC,QAAUA,QACpBwC,WAAUzsB,WAAaV,KACvBmtB,WAAUV,mBAAqBA,mBAgCvCnC,IAAI8C,mBAAqBT,oBACnBA,oBAAqBjsB,WAAaV,KAClC2sB,oBAAqBF,mBAAqBA,mBAC1CE,oBAAqBhC,QAAUA,SAGvCK,eAAAxqB,UAAWiH,YAAX,WACE,GAAAvF,IAA0BlC,KAAlBurB,KAAArpB,GAAIqpB,KAAEjB,IAAApoB,GAAGooB,KACZiB,MAAQjB,KAA0B,IAAnBA,IAAI1Z,YAAyC,kBAAd0Z,KAAI+C,OACrD/C,IAAI+C,QAEN5tB,OAAKe,UAACiH,YAAA1H,KAAaC,OAEvBgrB,gBA5MuCjc,aAAUkC,WAApCnP,SAAckpB,eA4M1BA,cASD,IAAAU,cAAA,WAaE,QAAAA,cAAmB4B,cAA6BhD,IAA4BK,SAAzD3qB,KAAastB,cAAbA,cAA6BttB,KAAGsqB,IAAHA,IAA4BtqB,KAAO2qB,QAAPA,QAC1E3qB,KAAK6sB,OAASvC,IAAIuC,OAClB7sB,KAAKoqB,aAAeE,IAAIF,cAAgBO,QAAQP,aAChDpqB,KAAKuqB,SAAWF,iBAAiBrqB,KAAKoqB,aAAcE,KAExD,MAAAoB,gBAlBa5pB,SAAY4pB,aAkBxBA,YASD,IAAAoB,WAAA,SAAArtB,QAgBE,QAAAqtB,WAAYxJ,QAAiBgH,IAAqBK,SAChDlrB,OAAAM,KAAAC,KAAMsjB,SACNtjB,KAAKsjB,QAAUA,QACftjB,KAAKsqB,IAAMA,IACXtqB,KAAK2qB,QAAUA,QACf3qB,KAAK6sB,OAASvC,IAAIuC,OAClB7sB,KAAKoqB,aAAeE,IAAIF,cAAgBO,QAAQP,aAChDpqB,KAAKuqB,SAAWF,iBAAiBrqB,KAAKoqB,aAAcE,KAExD,MAzB+BrqB,WAAA6sB,UAAKrtB,QAyBpCqtB,WAzB+Brd,MAAlB3N,SAASgrB,UAyBrBA,SAwBD,IAAAJ,kBAAA,SAAAjtB,QACE,QAAAitB,kBAAYpC,IAAqBK,SAC/BlrB,OAAAM,KAAAC,KAAM,eAAgBsqB,IAAKK,SAE/B,MAJsC1qB,WAAAysB,iBAASjtB,QAI/CitB,kBAJsCI,UAAzBhrB,SAAgB4qB,iBAI5BA,0IC/dD7d,oBAAAzP,WAAuB,mBAEvBmuB,oBAAA,WAeE,QAAAA,qBAAoB5e,MAClB,GADkB3O,KAAI2O,KAAJA,KACdA,KAAK6e,cAA6C,kBAAtB7e,MAAK6e,aACnCxtB,KAAKwtB,aAAe7e,KAAK6e,aAAaC,KAAK9e,MAC3C3O,KAAK0tB,eAAiB/e,KAAK+e,eAAeD,KAAK9e,UAC1C,CACL3O,KAAK2tB,WAAa,EAClB3tB,KAAK4tB,iBACL5tB,KAAK6tB,uBAAwB,EAGzB7tB,KAAK8tB,wBAEP9tB,KAAKwtB,aAAextB,KAAK+tB,oCAChB/tB,KAAKguB,oBAEdhuB,KAAKwtB,aAAextB,KAAKiuB,gCAChBjuB,KAAKkuB,uBAEdluB,KAAKwtB,aAAextB,KAAKmuB,mCAChBnuB,KAAKouB,yBAEdpuB,KAAKwtB,aAAextB,KAAKquB,qCAGzBruB,KAAKwtB,aAAextB,KAAKsuB,8BAG3B,IAAIC,IAAK,QAAAb,gBAAwBc,cAClBd,gBAAgBe,SAASb,cAAcY,QAGhDD,IAAIE,SAAWzuB,KAErBA,KAAK0tB,eAAiBa,IAsL5B,MAjOUhB,qBAAA/sB,UAAQkuB,SAAhB,SAAiBC,GACf,MAAO3uB,MAAK2O,KAAKzH,OAAO1G,UAAUmG,SAAS5G,KAAK4uB,IA8ClDpB,oBAAA/sB,UAAqBstB,sBAArB,WACE,MAA4C,qBAArC9tB,KAAK0uB,SAAS1uB,KAAK2O,KAAKigB,UAGjCrB,oBAAA/sB,UAAoB0tB,qBAApB,WACE,MAAOW,SAAQ7uB,KAAK2O,KAAKmgB,iBAG3BvB,oBAAA/sB,UAAsB4tB,uBAAtB,WACE,GAAMW,UAAW/uB,KAAK2O,KAAKogB,QAC3B,OAAOF,SAAQE,UAAY,sBAAwBA,UAASC,cAAc,YAG5EzB,oBAAA/sB,UAAiBwtB,kBAAjB,WACE,GAAMrf,MAAO3O,KAAK2O,IAGlB,IAAIA,KAAKsgB,cAAgBtgB,KAAKugB,cAAe,CAC3C,GAAIC,8BAA4B,EAC5BC,aAAezgB,KAAK+C,SAMxB,OALA/C,MAAK+C,UAAY,WACfyd,6BAA4B,GAE9BxgB,KAAKsgB,YAAY,GAAI,KACrBtgB,KAAK+C,UAAY0d,aACVD,4BAGT,OAAO,GAKT5B,oBAAA/sB,UAAgB6uB,iBAAhB,SAAiBtuB,aAAc,GAAAnB,SAAAS,GAAc,EAAdA,GAAAC,UAAcC,OAAdF,KAAAT,KAAAS,GAAA,GAAAC,UAAcD,GAC3C,IAAIivB,IAAK,QAAAtrB,UACP,GAAA9B,IAAqC8B,OAA7BjD,QAAAmB,GAAOnB,QAAEnB,KAAAsC,GAAItC,IACE,mBAAZmB,SACTA,QAAQK,UAAMhB,GAAWR,MAExB,GAAI2vB,UAAS,GAAKxuB,WAOvB,OAHMuuB,IAAIvuB,QAAUA,QACduuB,GAAI1vB,KAAOA,KAEV0vB,IAGT/B,oBAAA/sB,UAA4BgvB,6BAA5B,SAA6B5vB,MAE3B,MADAI,MAAK4tB,cAAc5tB,KAAK2tB,YAAc3tB,KAAKqvB,iBAAiBjuB,UAAMhB,GAAWR,MACtEI,KAAK2tB,cAGdJ,oBAAA/sB,UAAiCutB,kCAAjC,WACE,GAAIuB,IAAK,QAAA9B,gBACC,GAAAiB,UAAAjB,aAAQiB,SACZD,OAASC,SAASe,6BAA6BlvB,UAEnD,OADAmuB,UAAS9f,KAAKigB,QAAQa,SAAShB,SAASY,iBAAiBZ,SAASiB,aAAclB,SACzEA,OAKT,OAFMc,IAAIb,SAAWzuB,KAEdsvB,IAGT/B,oBAAA/sB,UAA6BytB,8BAA7B,WAIE,GAAMtf,MAAO3O,KAAK2O,KAEdghB,cAAgB,gBAAkBhhB,KAAKihB,KAAKC,SAAW,IACvDC,gBAAkB,QAAAC,sBAA8BC,OAClD,GAAMvB,UAAiBsB,qBAAsBtB,QACzCuB,OAAMnvB,SAAW8N,MACG,gBAAfqhB,OAAMngB,MACyB,IAAtCmgB,MAAMngB,KAAK8V,QAAQgK,gBACnBlB,SAASiB,cAAcM,MAAMngB,KAAKogB,MAAMN,cAAcpvB,SAGpDuvB,iBAAiBrB,SAAWzuB,KAElC2O,KAAK7H,iBAAiB,UAAWgpB,iBAAiB,EAElD,IAAIR,IAAK,QAAA9B,gBACP,GAAAtrB,IAAuDsrB,aAA/CmC,cAAAztB,GAAaytB,cAAElB,SAAAvsB,GAAQusB,SAC3BD,OAASC,SAASe,6BAA6BlvB,UAEnD,OADAmuB,UAAS9f,KAAKsgB,YAAYU,cAAgBnB,OAAQ,KAC3CA,OAMT,OAHMc,IAAIb,SAAWzuB,KACfsvB,GAAIK,cAAgBA,cAEnBL,IAGT/B,oBAAA/sB,UAAYkvB,aAAZ,SAAalB,QAGX,GAAIxuB,KAAK6tB,sBAGP7tB,KAAK2O,KAAKuhB,WAAWlwB,KAAKqvB,iBAAiBrvB,KAAK0vB,aAAclB,QAAS,OAClE,CACL,GAAI2B,MAAOnwB,KAAK4tB,cAAcY,OAC9B,IAAI2B,KAAM,CACRnwB,KAAK6tB,uBAAwB,CAC7B,KACEsC,OACD,QACCnwB,KAAK0tB,eAAec,QACpBxuB,KAAK6tB,uBAAwB,MAMrCN,oBAAA/sB,UAAgC2tB,iCAAhC,WAAA,GAAA9lB,OAkBCrI,KAjBKowB,QAAU,GAAIpwB,MAAK2O,KAAKmgB,cAC5BsB,SAAQC,MAAM3e,UAAY,SAACse,OACzB,GAAIxB,QAASwB,MAAMngB,IACnBxH,OAAKqnB,aAAalB,QAGpB,IAAIc,IAAK,QAAA9B,gBACP,GAAAtrB,IAAiDsrB,aAAzC4C,QAAAluB,GAAOkuB,QAAE3B,SAAAvsB,GAAQusB,SACrBD,OAASC,SAASe,6BAA6BlvB,UAEnD,OADA8vB,SAAQE,MAAMrB,YAAYT,QACnBA,OAMT,OAHMc,IAAIc,QAAUA,QACdd,GAAIb,SAAWzuB,KAEdsvB,IAGT/B,oBAAA/sB,UAAkC6tB,mCAAlC,WACE,GAAIiB,IAAK,QAAA9B,gBACP,GAAMiB,UAAiBjB,aAAciB,SAC/B9f,KAAO8f,SAAS9f,KAChB4hB,IAAM5hB,KAAKogB,SACXyB,KAAOD,IAAIE,gBAEbjC,OAASC,SAASe,6BAA6BlvB,WAG/CowB,OAASH,IAAIvB,cAAc,SAQ/B,OAPA0B,QAAOtD,mBAAqB,WAC1BqB,SAASiB,aAAalB,QACtBkC,OAAOtD,mBAAqB,KAC5BoD,KAAKG,YAAYD,QACjBA,OAAS,MAEXF,KAAKI,YAAYF,QACVlC,OAKT,OAFMc,IAAIb,SAAWzuB,KAEdsvB,IAGT/B,oBAAA/sB,UAA4B8tB,6BAA5B,WACE,GAAIgB,IAAK,QAAA9B,gBACP,GAAMiB,UAAiBjB,aAAciB,SACjCD,OAASC,SAASe,6BAA6BlvB,UAEnD,OADAmuB,UAAS9f,KAAKuhB,WAAWzB,SAASY,iBAAiBZ,SAASiB,aAAclB,QAAS,GAC5EA,OAKT,OAFMc,IAAIb,SAAWzuB,KAEdsvB,IAEX/B,sBAtOazrB,SAAmByrB,oBAsO/BA,oBACYzrB,QAAS+uB,UAAG,GAAItD,qBAAoB1e,OAAIF,mYC7OrDmiB,YAAA1xB,WAA0B,uBAC1B4oB,cAAA5oB,WAA4B,8BAQ5B2xB,WAAA,SAAAtxB,QAEE,QAAAsxB,YAAsBjxB,UACA0oB,MACpB/oB,OAAAM,KAAAC,KAAMF,UAAW0oB,MAFGxoB,KAASF,UAATA,UACAE,KAAIwoB,KAAJA,KAmCxB,MAtCmCvoB,WAAA8wB,WAActxB,QAOrCsxB,WAAAvwB,UAAcmoB,eAAxB,SAAyB7oB,UAA0B4oB,GAAUzT,OAE3D,WAF2D,KAAAA,QAAAA,MAAiB,GAE9D,OAAVA,OAAkBA,MAAQ,EACrBxV,OAAKe,UAACmoB,eAAA5oB,KAAAC,KAAeF,UAAW4oB,GAAIzT,QAG7CnV,UAAUuoB,QAAQxE,KAAK7jB,MAIhBF,UAAUkxB,YAAclxB,UAAUkxB,UAAYF,YAASD,UAACrD,aAC7D1tB,UAAUsnB,MAAMqG,KAAK3tB,UAAW,UAG1BixB,WAAAvwB,UAAcsoB,eAAxB,SAAyBhpB,UAA0B4oB,GAAUzT,OAI3D,OAJ2D,KAAAA,QAAAA,MAAiB,GAI7D,OAAVA,OAAkBA,MAAQ,GAAiB,OAAVA,OAAkBjV,KAAKiV,MAAQ,EACnE,MAAOxV,QAAKe,UAACsoB,eAAA/oB,KAAAC,KAAeF,UAAW4oB,GAAIzT,MAKZ,KAA7BnV,UAAUuoB,QAAQ9nB,SACpBuwB,YAASD,UAACnD,eAAehF,IACzB5oB,UAAUkxB,cAAY5wB,KAK5B2wB,YAtCmC/I,cAAWkB,YAAjCpnB,SAAUivB,WAsCtBA,wXC9CD9I,iBAAA7oB,WAA+B,iCAE/B6xB,cAAA,SAAAxxB,QAAA,QAAAwxB,iBAAmCxxB,OAAA2B,MAAApB,KAAcM,WA2BjD,MA3BmCL,WAAAgxB,cAAcxxB,QACxCwxB,cAAAzwB,UAAK4mB,MAAZ,SAAagB,QAEXpoB,KAAKyoB,QAAS,EACdzoB,KAAKgxB,cAAY5wB,EAEV,IACHlB,OADGmpB,QAAAroB,KAAOqoB,QAEVvd,OAAiB,EACjB6B,MAAgB0b,QAAQ9nB,MAC5B6nB,QAASA,QAAUC,QAAQlmB,OAE3B,IACE,GAAIjD,MAAQkpB,OAAOE,QAAQF,OAAO3mB,MAAO2mB,OAAOnT,OAC9C,cAEOnK,MAAQ6B,QAAUyb,OAASC,QAAQlmB,SAI9C,IAFAnC,KAAKyoB,QAAS,EAEVvpB,MAAO,CACT,OAAS4L,MAAQ6B,QAAUyb,OAASC,QAAQlmB,UAC1CimB,OAAO3gB,aAET,MAAMvI,SAGZ+xB,eA3BmChJ,iBAAcM,eAApCzmB,SAAamvB,cA2BzBA,iLC9BDC,0BAAA9xB,WAA2B,8BAC3B+xB,gBAAA/xB,WAA8B,+BAqCjB0C,SAAIid,KAAG,GAAIoS,iBAAaF,cAACC,aAAUH,0ICtChDliB,oBAAAzP,WAAuB,mBAEvBgyB,gCAAA,WAGE,QAAAA,iCAAYziB,MACNA,KAAK0iB,uBACPrxB,KAAKsxB,qBAAuB3iB,KAAK2iB,qBAAqB7D,KAAK9e,MAC3D3O,KAAKqxB,sBAAwB1iB,KAAK0iB,sBAAsB5D,KAAK9e,OACpDA,KAAK4iB,0BACdvxB,KAAKsxB,qBAAuB3iB,KAAK6iB,wBAAwB/D,KAAK9e,MAC9D3O,KAAKqxB,sBAAwB1iB,KAAK4iB,yBAAyB9D,KAAK9e,OACvDA,KAAK8iB,6BACdzxB,KAAKsxB,qBAAuB3iB,KAAK+iB,2BAA2BjE,KAAK9e,MACjE3O,KAAKqxB,sBAAwB1iB,KAAK8iB,4BAA4BhE,KAAK9e,OAC1DA,KAAKgjB,yBACd3xB,KAAKsxB,qBAAuB3iB,KAAKijB,uBAAuBnE,KAAK9e,MAC7D3O,KAAKqxB,sBAAwB1iB,KAAKgjB,wBAAwBlE,KAAK9e,OACtDA,KAAKkjB,wBACd7xB,KAAKsxB,qBAAuB3iB,KAAKmjB,sBAAsBrE,KAAK9e,MAC5D3O,KAAKqxB,sBAAwB1iB,KAAKkjB,uBAAuBpE,KAAK9e,QAE9D3O,KAAKsxB,qBAAuB3iB,KAAKojB,aAAatE,KAAK9e,MACnD3O,KAAKqxB,sBAAwB,SAASW,IAAM,MAAOrjB,MAAKuhB,WAAW8B,GAAI,IAAO,MAGpF,MAAAZ,mCAxBatvB,SAA+BsvB,gCAwB3CA,gCAEYtvB,QAAcmwB,eAAG,GAAIb,iCAAgCviB,OAAIF,kZC5BtEqZ,cAAA5oB,WAA4B,8BAC5B8yB,iBAAA9yB,WAA+B,4BAQ/B+yB,qBAAA,SAAA1yB,QAEE,QAAA0yB,sBAAsBryB,UACA0oB,MACpB/oB,OAAAM,KAAAC,KAAMF,UAAW0oB,MAFGxoB,KAASF,UAATA,UACAE,KAAIwoB,KAAJA,KAmCxB,MAtC6CvoB,WAAAkyB,qBAAc1yB,QAO/C0yB,qBAAA3xB,UAAcmoB,eAAxB,SAAyB7oB,UAAoC4oB,GAAUzT,OAErE,WAFqE,KAAAA,QAAAA,MAAiB,GAExE,OAAVA,OAAkBA,MAAQ,EACrBxV,OAAKe,UAACmoB,eAAA5oB,KAAAC,KAAeF,UAAW4oB,GAAIzT,QAG7CnV,UAAUuoB,QAAQxE,KAAK7jB,MAIhBF,UAAUkxB,YAAclxB,UAAUkxB,UAAYkB,iBAAcD,eAACZ,sBAClEvxB,UAAUsnB,MAAMqG,KAAK3tB,UAAW,UAG1BqyB,qBAAA3xB,UAAcsoB,eAAxB,SAAyBhpB,UAAoC4oB,GAAUzT,OAIrE,OAJqE,KAAAA,QAAAA,MAAiB,GAIvE,OAAVA,OAAkBA,MAAQ,GAAiB,OAAVA,OAAkBjV,KAAKiV,MAAQ,EACnE,MAAOxV,QAAKe,UAACsoB,eAAA/oB,KAAAC,KAAeF,UAAW4oB,GAAIzT,MAKZ,KAA7BnV,UAAUuoB,QAAQ9nB,SACpB2xB,iBAAcD,eAACX,qBAAqB5I,IACpC5oB,UAAUkxB,cAAY5wB,KAK5B+xB,sBAtC6CnK,cAAWkB,YAA3CpnB,SAAoBqwB,qBAsChCA,4YC9CDlK,iBAAA7oB,WAA+B,iCAE/BgzB,wBAAA,SAAA3yB,QAAA,QAAA2yB,2BAA6C3yB,OAAA2B,MAAApB,KAAcM,WA2B3D,MA3B6CL,WAAAmyB,wBAAc3yB,QAClD2yB,wBAAA5xB,UAAK4mB,MAAZ,SAAagB,QAEXpoB,KAAKyoB,QAAS,EACdzoB,KAAKgxB,cAAY5wB,EAEV,IACHlB,OADGmpB,QAAAroB,KAAOqoB,QAEVvd,OAAiB,EACjB6B,MAAgB0b,QAAQ9nB,MAC5B6nB,QAASA,QAAUC,QAAQlmB,OAE3B,IACE,GAAIjD,MAAQkpB,OAAOE,QAAQF,OAAO3mB,MAAO2mB,OAAOnT,OAC9C,cAEOnK,MAAQ6B,QAAUyb,OAASC,QAAQlmB,SAI9C,IAFAnC,KAAKyoB,QAAS,EAEVvpB,MAAO,CACT,OAAS4L,MAAQ6B,QAAUyb,OAASC,QAAQlmB,UAC1CimB,OAAO3gB,aAET,MAAMvI,SAGZkzB,yBA3B6CnK,iBAAcM,eAA9CzmB,SAAuBswB,wBA2BnCA,yNC9BDC,oCAAAjzB,WAAqC,wCACrCkzB,0BAAAlzB,WAAwC,yCAiC3B0C,SAAcywB,eAAG,GAAID,2BAAuBF,wBAACC,uBAAoBF,6NCiB9E,SAAA5Z,OAAyB9D,kBACvB,MAAO,UAA+B5T,QACpC,MAAOA,QAAOqC,KAAK,GAAIsvB,eAAc/d,mPAhDzCpV,WAAAD,WAAyB,sBACzBE,cAAAF,WAA4B,yBAC5BmE,kBAAAnE,WAAgC,wBAChCkE,oBAAAlE,WAAkC,8BA2ClB0C,SAAKyW,MAIpBA,KAED,IAAAia,eAAA,WACE,QAAAA,eAAoB/d,kBAAAzU,KAAgByU,iBAAhBA,iBAMtB,MAHE+d,eAAAhyB,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIixB,iBAAsB/xB,WAAYV,KAAKyU,oBAEvE+d,iBAOAC,gBAAA,SAAAhzB,QAME,QAAAgzB,iBAAY9uB,YACQ8Q,kBAClBhV,OAAAM,KAAAC,KAAM2D,aADY3D,KAAgByU,iBAAhBA,iBAJZzU,KAAQ0yB,UAAY,EA+C9B,MAlDoCzyB,WAAAwyB,gBAAqBhzB,QAW7CgzB,gBAAAjyB,UAAKmyB,MAAf,SAAgB/zB,OAGd,GAFAoB,KAAKpB,MAAQA,MACboB,KAAK0yB,UAAW,GACX1yB,KAAK4yB,UAAW,CACnB,GAAMla,UAAWrZ,WAAQ8B,SAACnB,KAAKyU,kBAAkB7V,MACjD,IAAI8Z,WAAapZ,cAAW+B,YAC1BrB,KAAK2D,YAAYzE,MAAMI,cAAW+B,YAACC,OAC9B,CACL,GAAM+D,mBAAoB/B,oBAAiBW,kBAACjE,KAAM0Y,SAC9CrT,mBAAkBoE,OACpBzJ,KAAK6yB,gBAEL7yB,KAAK4B,IAAI5B,KAAK4yB,UAAYvtB,sBAMlCotB,gBAAAjyB,UAAaqyB,cAAb,WACE,GAAA3wB,IAA2ClC,KAAnCpB,MAAAsD,GAAKtD,MAAE8zB,SAAAxwB,GAAQwwB,SAAEE,UAAA1wB,GAAS0wB,SAC9BA,aACF5yB,KAAK8yB,OAAOF,WACZ5yB,KAAK4yB,UAAY,KACjBA,UAAUnrB,eAERirB,WACF1yB,KAAKpB,MAAQ,KACboB,KAAK0yB,UAAW,EAChB1yB,KAAK2D,YAAY7E,KAAKF,SAI1B6zB,gBAAAjyB,UAAU+E,WAAV,SAAWC,WAAeC,WAAeH,WAAoBI,YAC3D1F,KAAK6yB,iBAGPJ,gBAAAjyB,UAAcqF,eAAd,WACE7F,KAAK6yB,iBAETJ,iBAlDoClvB,kBAAeW,2cCvEnDsG,YAAApL,WAA0B,uBAE1BD,aAAAC,WAA2B,mBAC3BqL,QAAArL,WAAsB,wBACtBuD,cAAAvD,WAA4B,yBAC5B2zB,SAAA3zB,WAAuB,oBASvB4zB,gBAAA,SAAAvzB,QAuEE,QAAAuzB,iBAAYpe,QACAjK,OACA7K,eAFA,KAAA8U,UAAAA,QAA0B,GAGpCnV,OAAAM,KAAOC,MAPDA,KAAM2K,QAAY,EAClB3K,KAAO4U,QAAW,EAQpBpK,YAASK,UAACF,QACZ3K,KAAK2K,OAASgI,OAAOhI,QAAU,GAAK,GAAKgI,OAAOhI,QACvChI,cAAWC,YAAC+H,UACrB7K,UAAyB6K,QAGtBhI,cAAWC,YAAC9C,aACfA,UAAY2K,QAAKG,OAGnB5K,KAAKF,UAAYA,UACjBE,KAAK4U,QAAUme,SAAME,OAACre,UAClBA,QAAU5U,KAAKF,UAAUikB,MACjBnP,QAWhB,MApGqC3U,WAAA+yB,gBAAkBvzB,QA4C9CuzB,gBAAM9yB,OAAb,SAAcgzB,aACAvoB,OACA7K,WACZ,WAHY,KAAAozB,eAAAA,aAA+B,GAGpC,GAAIF,iBAAgBE,aAAcvoB,OAAQ7K,YAG5CkzB,gBAAQpyB,SAAf,SAAgBa,OAEN,GAAAqJ,OAAArJ,MAAKqJ,MAAEH,OAAAlJ,MAAMkJ,OAAEjK,WAAAe,MAAUf,WAC3B0nB,OAAgBpoB,IAItB,IAFAU,WAAW5B,KAAKgM,QAEZpK,WAAW+I,OAAf,CAEO,IAAgB,IAAZkB,OACT,MAAOjK,YAAW3B,UAGpB0C,OAAMqJ,MAAQA,MAAQ,EACtBsd,OAAOznB,SAASc,MAAOkJ,UA4BfqoB,gBAAAxyB,UAAUC,WAApB,SAAqBC,YACnB,GACAwB,IAA2ClC,KAAnC2K,OAAAzI,GAAMyI,OAAEiK,QAAA1S,GAAO0S,OAEvB,OAFyB1S,IAASpC,UAEjBa,SAASqyB,gBAAgBpyB,SAAUgU,SAClD9J,MAJY,EAILH,OAAMA,OAAEjK,WAAUA,cAG/BsyB,iBApGqC7zB,aAAU0C,WAAlCC,SAAekxB,gBAoG3BA,4JClHDG,+BAAA/zB,WAAkC,mCAErB0C,SAAKiM,MAAGolB,kBAAeH,gBAAC9yB,sLC8CrC,SAAAuY,WAA6BC,SAAkB5Y,WAC7C,WAD6C,KAAAA,YAAAA,UAAA2K,QAA6BG,OAC1E4N,QAAYD,MAAC,WAAM,MAAAzK,SAAKC,MAAC2K,SAAN5Y,gBAjDrB2K,qBAAArL,WAAsB,yBAEtBoZ,QAAApZ,WAAsB,wBACtB0O,QAAA1O,WAAsB,wBA6CN0C,SAAS2W,UAExBA,qKCVD,SAAAzG,QAA0BC,iBACxB,MAAO,UAAgCpR,QACrC,MAAOA,QAAOqC,KAAK,GAAIkwB,gBAAkBnhB,kPAvC7C1O,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BAmClB0C,SAAMkQ,OAIrBA,MAED,IAAAohB,gBAAA,WAEE,QAAAA,gBAAoBnhB,iBAAAjS,KAAeiS,gBAAfA,gBAMtB,MAHEmhB,gBAAA5yB,UAAIT,KAAJ,SAAKW,WAA6BG,QAChC,MAAOA,QAAOW,UAAU,GAAI6xB,kBAAiB3yB,WAAYV,KAAKiS,mBAElEmhB,kBAOAC,iBAAA,SAAA5zB,QAGE,QAAA4zB,kBAAY1vB,YAA8BsO,iBACxCxS,OAAAM,KAAAC,KAAM2D,aAHA3D,KAAMgS,UAIZhS,KAAK4B,IAAI0B,oBAAiBW,kBAACjE,KAAMiS,kBAcrC,MAnBkChS,WAAAozB,iBAAuB5zB,QAQ7C4zB,iBAAA7yB,UAAKmyB,MAAf,SAAgB/zB,OACdoB,KAAKgS,OAAO6R,KAAKjlB,QAGnBy0B,iBAAA7yB,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT,GAAMqM,QAAShS,KAAKgS,MACpBhS,MAAKgS,UACLhS,KAAK2D,YAAY7E,KAAKkT,SAE1BqhB,kBAnBkC9vB,kBAAeW,8ICdjD,SAAAiO,aAA+BC,WAAoBC,kBACjD,WADiD,KAAAA,mBAAAA,iBAA+B,MACzE,SAAqCxR,QAC1C,MAAOA,QAAOqC,KAAK,GAAIowB,qBAAuBlhB,WAAYC,mPAhD9DtD,aAAA3P,WAA2B,kBA8CX0C,SAAWqQ,YAI1BA,WAED,IAAAmhB,qBAAA,WAGE,QAAAA,qBAAoBlhB,WAA4BC,kBAA5BrS,KAAUoS,WAAVA,WAA4BpS,KAAgBqS,iBAAhBA,iBAI5CrS,KAAKuzB,gBAHFlhB,kBAAoBD,aAAeC,iBAGfmhB,0BAFAC,sBAS7B,MAHEH,qBAAA9yB,UAAIT,KAAJ,SAAKW,WAA6BG,QAChC,MAAOA,QAAOW,UAAU,GAAIxB,MAAKuzB,gBAAgB7yB,WAAYV,KAAKoS,WAAYpS,KAAKqS,oBAEvFihB,uBAOAG,sBAAA,SAAAh0B,QAGE,QAAAg0B,uBAAY9vB,YAAsCyO,YAChD3S,OAAAM,KAAAC,KAAM2D,aAD0C3D,KAAUoS,WAAVA,WAF1CpS,KAAMgS,UAwBhB,MAzBuC/R,WAAAwzB,sBAAah0B,QAOxCg0B,sBAAAjzB,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAMoT,QAAShS,KAAKgS,MAEpBA,QAAO6R,KAAKjlB,OAERoT,OAAOzR,QAAUP,KAAKoS,aACxBpS,KAAK2D,YAAY7E,KAAKkT,QACtBhS,KAAKgS,YAICyhB,sBAAAjzB,UAAS2J,UAAnB,WACE,GAAM6H,QAAShS,KAAKgS,MAChBA,QAAOzR,OAAS,GAClBP,KAAK2D,YAAY7E,KAAKkT,QAExBvS,OAAKe,UAAC2J,UAAApK,KAAWC,OAErByzB,uBAzBuC1kB,aAAUkC,YAgCjDuiB,0BAAA,SAAA/zB,QAIE,QAAA+zB,2BAAY7vB,YAAsCyO,WAA4BC,kBAC5E5S,OAAAM,KAAAC,KAAM2D,aAD0C3D,KAAUoS,WAAVA,WAA4BpS,KAAgBqS,iBAAhBA,iBAHtErS,KAAO0zB,WACP1zB,KAAK2M,MAAW,EAoC1B,MAtC2C1M,WAAAuzB,0BAAa/zB,QAQ5C+zB,0BAAAhzB,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAAsD,IAA6DlC,KAArDoS,WAAAlQ,GAAUkQ,WAAEC,iBAAAnQ,GAAgBmQ,iBAAEqhB,QAAAxxB,GAAOwxB,QAAE/mB,MAAAzK,GAAKyK,KAEpD3M,MAAK2M,QACDA,MAAQ0F,kBAAqB,GAC/BqhB,QAAQ7P,QAGV,KAAK,GAAIze,GAAIsuB,QAAQnzB,OAAQ6E,KAAO,CAClC,GAAM4M,QAAS0hB,QAAQtuB,EACvB4M,QAAO6R,KAAKjlB,OACRoT,OAAOzR,SAAW6R,aACpBshB,QAAQC,OAAOvuB,EAAG,GAClBpF,KAAK2D,YAAY7E,KAAKkT,WAKlBwhB,0BAAAhzB,UAAS2J,UAAnB,WAGE,IAFA,GAAAjI,IAAqClC,KAA7B0zB,QAAAxxB,GAAOwxB,QAAE/vB,YAAAzB,GAAWyB,YAErB+vB,QAAQnzB,OAAS,GAAG,CACzB,GAAIyR,QAAS0hB,QAAQvxB,OACjB6P,QAAOzR,OAAS,GAClBoD,YAAY7E,KAAKkT,QAGrBvS,OAAKe,UAAC2J,UAAApK,KAAWC,OAGrBwzB,2BAtC2CzkB,aAAUkC,uLC/CrD,SAAAsB,YAA8BC,gBAC5B,GAAIjS,QAAiBD,UAAUC,OAE3BT,UAAwB2K,QAAKG,KAC7BjI,eAAWC,YAACtC,UAAUA,UAAUC,OAAS,MAC3CT,UAAYQ,UAAUA,UAAUC,OAAS,GACzCA,SAGF,IAAIkS,wBAAiC,IACjClS,SAAU,IACZkS,uBAAyBnS,UAAU,GAGrC,IAAIoS,eAAwBC,OAAOC,iBAKnC,OAJIrS,SAAU,IACZmS,cAAgBpS,UAAU,IAGrB,SAAoCO,QACzC,MAAOA,QAAOqC,KAAK,GAAI0wB,oBAAsBphB,eAAgBC,uBAAwBC,cAAe5S,aA6HxG,QAAA+zB,4BAAuDpyB,OACrD,GAAMf,YAAwCe,MAAMf,WAE9CozB,YAAcryB,MAAM5B,OACtBi0B,cACFpzB,WAAWqzB,aAAaD,aAGrBpzB,WAAW+I,SACdhI,MAAM5B,QAAUa,WAAWszB,cAC3BvyB,MAAM5B,QAAQo0B,YAAcj0B,KAAKW,SAASc,MAAOA,MAAM+Q,iBAS3D,QAAA0hB,wBAAmEzyB,OACzD,GAAAgR,wBAAAhR,MAAsBgR,uBAAED,eAAA/Q,MAAc+Q,eAAE9R,WAAAe,MAAUf,WAAEZ,UAAA2B,MAAS3B,UAC/DD,QAAUa,WAAWszB,cACrB5L,OAAmCpoB,IACpCU,YAAW+I,SACd/I,WAAWkB,IAAI/B,QAAQo0B,YAAcn0B,UAAUa,SAAyBwzB,oBAAqB3hB,gBAAkB9R,WAAUA,WAAEb,QAAOA,WAClIuoB,OAAOznB,SAASc,MAAOgR,yBAI3B,QAAA0hB,qBAAgCx1B,KACtB,GAAA+B,YAAA/B,IAAU+B,WAAEb,QAAAlB,IAAOkB,OAC3Ba,YAAWqzB,aAAal0B,wOAxO1B4K,QAAArL,WAAsB,wBAEtB2P,aAAA3P,WAA2B,mBAE3BuD,cAAAvD,WAA4B,wBAoDZ0C,SAAUyQ,WAsBzBA,UAED,IAAAqhB,oBAAA,WACE,QAAAA,oBAAoBphB,eACAC,uBACAC,cACA5S,WAHAE,KAAcwS,eAAdA,eACAxS,KAAsByS,uBAAtBA,uBACAzS,KAAa0S,cAAbA,cACA1S,KAASF,UAATA,UAQtB,MALE8zB,oBAAApzB,UAAIT,KAAJ,SAAKW,WAA6BG,QAChC,MAAOA,QAAOW,UAAU,GAAI4yB,sBAC1B1zB,WAAYV,KAAKwS,eAAgBxS,KAAKyS,uBAAwBzS,KAAK0S,cAAe1S,KAAKF,aAG7F8zB,sBAEAS,QAAA,WAAA,QAAAA,WACEr0B,KAAMgS,UAER,MAAAqiB,YAcAD,qBAAA,SAAA30B,QAIE,QAAA20B,sBAAYzwB,YACQ6O,eACAC,uBACAC,cACA5S,WAClBL,OAAAM,KAAAC,KAAM2D,aAJY3D,KAAcwS,eAAdA,eACAxS,KAAsByS,uBAAtBA,uBACAzS,KAAa0S,cAAbA,cACA1S,KAASF,UAATA,UAPZE,KAAQs0B,WASd,IAAMz0B,SAAUG,KAAKg0B,aAErB,IADAh0B,KAAKu0B,aAAyC,MAA1B9hB,wBAAkCA,uBAAyB,EAC3EzS,KAAKu0B,aAAc,CACrB,GAAMC,oBAAsB9zB,WAAYV,KAAMH,QAAOA,QAAE2S,eAAcA,eACrExS,MAAK4B,IAAI/B,QAAQo0B,YAAcn0B,UAAUa,SAASkzB,2BAA4BrhB,eAAgBgiB,wBACzF,CACL,GAAMC,aAAe/zB,WAAYV,KAAMH,QAAOA,SACxC60B,eAAoCliB,eAAcA,eAAEC,uBAAsBA,uBAAE/R,WAAYV,KAAMF,UAASA,UAC7GE,MAAK4B,IAAI/B,QAAQo0B,YAAcn0B,UAAUa,SAASwzB,oBAAqB3hB,eAAgBiiB,aACvFz0B,KAAK4B,IAAI9B,UAAUa,SAASuzB,uBAAwBzhB,uBAAwBiiB,iBAqElF,MAxFsCz0B,WAAAm0B,qBAAa30B,QAuBvC20B,qBAAA5zB,UAAKmyB,MAAf,SAAgB/zB,OAId,IAAK,GADD+1B,qBAFEL,SAAWt0B,KAAKs0B,SAChBtvB,IAAMsvB,SAAS/zB,OAEZ6E,EAAI,EAAGA,EAAIJ,IAAKI,IAAK,CAC5B,GAAMvF,SAAUy0B,SAASlvB,GACnB4M,OAASnS,QAAQmS,MACvBA,QAAO6R,KAAKjlB,OACRoT,OAAOzR,QAAUP,KAAK0S,gBACxBiiB,oBAAsB90B,SAItB80B,qBACF30B,KAAK40B,aAAaD,sBAIZP,qBAAA5zB,UAAMuD,OAAhB,SAAiB9E,KACfe,KAAKs0B,SAAS/zB,OAAS,EACvBd,OAAKe,UAACuD,OAAAhE,KAAAC,KAAOf,MAGLm1B,qBAAA5zB,UAAS2J,UAAnB,WAEE,IADA,GAAAjI,IAAsClC,KAA9Bs0B,SAAApyB,GAAQoyB,SAAE3wB,YAAAzB,GAAWyB,YACtB2wB,SAAS/zB,OAAS,GAAG,CAC1B,GAAMV,SAAUy0B,SAASnyB,OACzBwB,aAAY7E,KAAKe,QAAQmS,QAE3BvS,OAAKe,UAAC2J,UAAApK,KAAWC,OAGTo0B,qBAAA5zB,UAAYq0B,aAAtB,WACE70B,KAAKs0B,SAAW,MAGRF,qBAAA5zB,UAAYo0B,aAAtB,SAAuB/0B,SACrBG,KAAK+zB,aAAal0B,QAClB,IAAMo0B,aAAcp0B,QAAQo0B,WAI5B,IAHAA,YAAYxsB,cACZzH,KAAK8yB,OAAOmB,cAEPj0B,KAAKyJ,QAAUzJ,KAAKu0B,aAAc,CACrC10B,QAAUG,KAAKg0B,aACf,IAAMxhB,gBAAiBxS,KAAKwS,eACtBgiB,mBAAsB9zB,WAAYV,KAAMH,QAAOA,QAAE2S,eAAcA,eACrExS,MAAK4B,IAAI/B,QAAQo0B,YAAcj0B,KAAKF,UAAUa,SAASkzB,2BAA4BrhB,eAAgBgiB,sBAIvGJ,qBAAA5zB,UAAWwzB,YAAX,WACE,GAAMn0B,SAAsB,GAAIw0B,QAEhC,OADAr0B,MAAKs0B,SAASzQ,KAAKhkB,SACZA,SAGTu0B,qBAAA5zB,UAAYuzB,aAAZ,SAAal0B,SACXG,KAAK2D,YAAY7E,KAAKe,QAAQmS,OAC9B,IAAMsiB,UAAWt0B,KAAKs0B,UAEFA,SAAWA,SAAS3O,QAAQ9lB,UAAY,IACzC,GACjBy0B,SAASX,OAAOW,SAAS3O,QAAQ9lB,SAAU,IAGjDu0B,sBAxFsCrlB,aAAUkC,iMCnEhD,SAAA6B,cACEC,SACAC,iBAEA,MAAO,UAAsCnS,QAC3C,MAAOA,QAAOqC,KAAK,GAAI4xB,sBAA2B/hB,SAAUC,kPAjDhE/L,eAAA7H,WAA6B,qBAC7BkE,oBAAAlE,WAAkC,+BAClCmE,kBAAAnE,WAAgC,uBA0ChB0C,SAAYgR,aAO3BA,YAED,IAAAgiB,sBAAA,WAEE,QAAAA,sBAAoB/hB,SACAC,iBADAhT,KAAQ+S,SAARA,SACA/S,KAAegT,gBAAfA,gBAMtB,MAHE8hB,sBAAAt0B,UAAIT,KAAJ,SAAKW,WAA6BG,QAChC,MAAOA,QAAOW,UAAU,GAAIuzB,wBAAuBr0B,WAAYV,KAAK+S,SAAU/S,KAAKgT,mBAEvF8hB,wBAYAC,uBAAA,SAAAt1B,QAGE,QAAAs1B,wBAAYpxB,YACQoP,SACAC,iBAClBvT,OAAAM,KAAAC,KAAM2D,aAFY3D,KAAQ+S,SAARA,SACA/S,KAAegT,gBAAfA,gBAJZhT,KAAQs0B,YAMdt0B,KAAK4B,IAAI0B,oBAAiBW,kBAACjE,KAAM+S,WAyFrC,MAhG2C9S,WAAA80B,uBAAqBt1B,QAUpDs1B,uBAAAv0B,UAAKmyB,MAAf,SAAgB/zB,OAGd,IAAK,GAFC01B,UAAWt0B,KAAKs0B,SAChBtvB,IAAMsvB,SAAS/zB,OACZ6E,EAAI,EAAGA,EAAIJ,IAAKI,IACvBkvB,SAASlvB,GAAG4M,OAAO6R,KAAKjlB,QAIlBm2B,uBAAAv0B,UAAMuD,OAAhB,SAAiB9E,KAEf,IADA,GAAMq1B,UAAWt0B,KAAKs0B,SACfA,SAAS/zB,OAAS,GAAG,CAC1B,GAAMV,SAAUy0B,SAASnyB,OACzBtC,SAAQ0Q,aAAa9I,cACrB5H,QAAQmS,OAAS,KACjBnS,QAAQ0Q,aAAe,KAEzBvQ,KAAKs0B,SAAW,KAChB70B,OAAKe,UAACuD,OAAAhE,KAAAC,KAAOf,MAGL81B,uBAAAv0B,UAAS2J,UAAnB,WAEE,IADA,GAAMmqB,UAAWt0B,KAAKs0B,SACfA,SAAS/zB,OAAS,GAAG,CAC1B,GAAMV,SAAUy0B,SAASnyB,OACzBnC,MAAK2D,YAAY7E,KAAKe,QAAQmS,QAC9BnS,QAAQ0Q,aAAa9I,cACrB5H,QAAQmS,OAAS,KACjBnS,QAAQ0Q,aAAe,KAEzBvQ,KAAKs0B,SAAW,KAChB70B,OAAKe,UAAC2J,UAAApK,KAAWC,OAGnB+0B,uBAAAv0B,UAAU+E,WAAV,SAAWC,WAAiBC,WACjBH,WAAoBI,WACpBC,UACTH,WAAaxF,KAAKg1B,YAAYxvB,YAAcxF,KAAKi1B,WAAWxvB,aAG9DsvB,uBAAAv0B,UAAcqF,eAAd,SAAeF,UACb3F,KAAKg1B,YAAmBrvB,SAAU9F,UAG5Bk1B,uBAAAv0B,UAAUy0B,WAAlB,SAAmBr2B,OACjB,IACE,GAAMoU,iBAAkBhT,KAAKgT,gBACvBf,gBAAkBe,gBAAgBjT,KAAKC,KAAMpB,MAC/CqT,kBACFjS,KAAKk1B,aAAajjB,iBAEpB,MAAOhT,KACPe,KAAK+D,OAAO9E,OAIR81B,uBAAAv0B,UAAWw0B,YAAnB,SAAoBn1B,SAClB,GAAMy0B,UAAWt0B,KAAKs0B,QAEtB,IAAIA,UAAYz0B,QAAS,CACf,GAAAmS,QAAAnS,QAAMmS,OAAEzB,aAAA1Q,QAAY0Q,YAC5BvQ,MAAK2D,YAAY7E,KAAKkT,QACtBsiB,SAASX,OAAOW,SAAS3O,QAAQ9lB,SAAU,GAC3CG,KAAK8yB,OAAOviB,cACZA,aAAa9I,gBAITstB,uBAAAv0B,UAAY00B,aAApB,SAAqBjjB,iBACnB,GAAMqiB,UAAWt0B,KAAKs0B,SAEhBtiB,UACAzB,aAAe,GAAItJ,gBAAYa,aAC/BjI,SAAYmS,OAAMA,OAAEzB,aAAYA,aACtC+jB,UAASzQ,KAAKhkB,QAEd,IAAMwF,mBAAoB/B,oBAAiBW,kBAACjE,KAAMiS,gBAAsBpS,UAEnEwF,mBAAqBA,kBAAkBoE,OAC1CzJ,KAAKg1B,YAAYn1B,UAEVwF,kBAAmBxF,QAAUA,QAEpCG,KAAK4B,IAAIyD,mBACTkL,aAAa3O,IAAIyD,qBAGvB0vB,wBAhG2CxxB,kBAAeW,iPCjC1D,SAAAgP,YAA8BF,iBAC5B,MAAO,UAAUnS,QACf,MAAOA,QAAOqC,KAAK,GAAIiyB,oBAAmBniB,kPA3C9C/L,eAAA7H,WAA6B,qBAC7BC,WAAAD,WAAyB,sBACzBE,cAAAF,WAA4B,yBAC5BmE,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BAoClB0C,SAAUoR,WAIzBA,UAED,IAAAiiB,oBAAA,WAEE,QAAAA,oBAAoBniB,iBAAAhT,KAAegT,gBAAfA,gBAMtB,MAHEmiB,oBAAA30B,UAAIT,KAAJ,SAAKW,WAA6BG,QAChC,MAAOA,QAAOW,UAAU,GAAI4zB,sBAAqB10B,WAAYV,KAAKgT,mBAEtEmiB,sBAOAC,qBAAA,SAAA31B,QAKE,QAAA21B,sBAAYzxB,YAAsCqP,iBAChDvT,OAAAM,KAAAC,KAAM2D,aAD0C3D,KAAegT,gBAAfA,gBAH1ChT,KAAWq1B,aAAY,EAK7Br1B,KAAKi1B,aA+DT,MAtEsCh1B,WAAAm1B,qBAAuB31B,QAUjD21B,qBAAA50B,UAAKmyB,MAAf,SAAgB/zB,OACdoB,KAAKgS,OAAO6R,KAAKjlB,QAGTw2B,qBAAA50B,UAAS2J,UAAnB,WACE,GAAM6H,QAAShS,KAAKgS,MAChBA,SACFhS,KAAK2D,YAAY7E,KAAKkT,QAExBvS,OAAKe,UAAC2J,UAAApK,KAAWC,OAGTo1B,qBAAA50B,UAAYq0B,aAAtB,WACE70B,KAAKgS,OAAS,KACdhS,KAAKq1B,aAAc,GAGrBD,qBAAA50B,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT3F,KAAKi1B,cAGPG,qBAAA50B,UAAcqF,eAAd,WACM7F,KAAKq1B,YACPr1B,KAAKjB,WAELiB,KAAKi1B,cAITG,qBAAA50B,UAAUy0B,WAAV,WAEQ,GAAAK,qBAAAt1B,KAAmBs1B,mBAErBA,uBACFt1B,KAAK8yB,OAAOwC,qBACZA,oBAAoB7tB,cAGtB,IAAMuK,QAAShS,KAAKgS,MAChBhS,MAAKgS,QACPhS,KAAK2D,YAAY7E,KAAKkT,QAGxBhS,KAAKgS,SAEL,IAAMC,iBAAkB5S,WAAQ8B,SAACnB,KAAKgT,kBAElCf,mBAAoB3S,cAAW+B,YACjCrB,KAAKd,MAAMI,cAAW+B,YAACC,IAEvBg0B,oBAAsB,GAAIruB,gBAAYa,aACtC9H,KAAKs1B,oBAAsBA,oBAC3Bt1B,KAAK4B,IAAI0zB,qBACTt1B,KAAKq1B,aAAc,EACnBC,oBAAoB1zB,IAAI0B,oBAAiBW,kBAACjE,KAAMiS,kBAChDjS,KAAKq1B,aAAc,IAGzBD,sBAtEsC7xB,kBAAeW,gLCArD,SAAAoP,YAAiC3T,UAC/B,MAAO,UAAoCkB,QACzC,GAAMiP,UAAW,GAAIylB,eAAc51B,UAC7B61B,OAAS30B,OAAOqC,KAAK4M,SAC3B,OAAQA,UAAS0lB,OAASA,uOAjE9BjyB,kBAAAnE,WAAgC,wBAChCkE,oBAAAlE,WAAkC,8BA4DlB0C,SAAUwR,WAMzBA,UAED,IAAAiiB,eAAA,WAGE,QAAAA,eAAoB51B,UAAAK,KAAQL,SAARA,SAMtB,MAHE41B,eAAA/0B,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIi0B,iBAAgB/0B,WAAYV,KAAKL,SAAUK,KAAKw1B,UAEhFD,iBAOAE,gBAAA,SAAAh2B,QACE,QAAAg2B,iBAAY9xB,YACQhE,SACA61B,QAClB/1B,OAAAM,KAAAC,KAAM2D,aAFY3D,KAAQL,SAARA,SACAK,KAAMw1B,OAANA,OAsBtB,MAzBoCv1B,WAAAw1B,gBAAyBh2B,QAY3Dg2B,gBAAAj1B,UAAKtB,MAAL,SAAMD,KACJ,IAAKe,KAAK01B,UAAW,CACnB,GAAI1xB,YAAA,EACJ,KACEA,OAAShE,KAAKL,SAASV,IAAKe,KAAKw1B,QACjC,MAAOG,MAEP,WADAl2B,QAAKe,UAACtB,MAAAa,KAAAC,KAAM21B,MAGd31B,KAAK41B,yBACL51B,KAAK4B,IAAI0B,oBAAiBW,kBAACjE,KAAMgE,WAGvCyxB,iBAzBoClyB,kBAAeW,0JCrFnD,SAAAuP,YAAiC/Q,SAC/B,MAAO,UAAC7B,QAA0B,MAAAA,QAAOqC,KAAK,GAAIC,iBAAqBC,sBAArCV,cALpCS,6BAAA/D,WAAsC,gCAItB0C,SAAU2R,WAEzBA,mOCkED,SAAAjR,qBAAoC,GAAAC,gBAAApC,GAE+C,EAF/CA,GAAAC,UAE+CC,OAF/CF,KAAAoC,YAAApC,GAAA,GAAAC,UAE+CD,GACjF,IAAIqC,SAAwC,IAW5C,OAVmD,kBAAxCD,aAAYA,YAAYlC,OAAS,KAC1CmC,QAAwCD,YAAYI,OAK3B,IAAvBJ,YAAYlC,QAAgBuC,UAAOC,QAACN,YAAY,MAClDA,YAAoBA,YAAY,GAAIwtB,SAG/B,SAACpvB,QAA0B,MAAAA,QAAOqC,KAAKnD,KAAK,GAAIiD,mBAAeC,iBAAEpC,QAAAU,OAAWkB,cAAe,GAAIW,uBAApEV,0OArFpCM,kBAAA5D,WAAgC,mCAChC0D,UAAA1D,WAAwB,qBAGxBmE,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,+BAG5By2B,OA8DU/zB,SAAaU,cAe5BA,aAED,IAAAY,uBAAA,WACE,QAAAA,uBAAoBV,SAAA1C,KAAO0C,QAAPA,QAMtB,MAHEU,uBAAA5C,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIs0B,yBAAwBp1B,WAAYV,KAAK0C,WAEzEU,wBAPatB,SAAqBsB,sBAOjCA,qBAOD,IAAA0yB,yBAAA,SAAAr2B,QAME,QAAAq2B,yBAAYnyB,YAAoCjB,SAC9CjD,OAAAM,KAAAC,KAAM2D,aADwC3D,KAAO0C,QAAPA,QALxC1C,KAAMyoB,OAAW,EACjBzoB,KAAMkF,UACNlF,KAAWyC,eA8DrB,MAjEmDxC,WAAA61B,wBAAqBr2B,QAU5Dq2B,wBAAAt1B,UAAKmyB,MAAf,SAAgB3P,YACdhjB,KAAKkF,OAAO2e,KAAKgS,MACjB71B,KAAKyC,YAAYohB,KAAKb,aAGd8S,wBAAAt1B,UAAS2J,UAAnB,WACE,GAAM1H,aAAczC,KAAKyC,YACnBuC,IAAMvC,YAAYlC,MACxB,IAAY,IAARyE,IACFhF,KAAK2D,YAAY5E,eACZ,CACLiB,KAAKyoB,OAASzjB,IACdhF,KAAK+1B,UAAY/wB,GACjB,KAAK,GAAII,GAAI,EAAGA,EAAIJ,IAAKI,IAAK,CAC5B,GAAM4d,YAAavgB,YAAY2C,EAC/BpF,MAAK4B,IAAI0B,oBAAiBW,kBAACjE,KAAMgjB,WAAYA,WAAY5d,OAK/D0wB,wBAAAt1B,UAAcqF,eAAd,SAAemwB,QACc,IAAtBh2B,KAAKyoB,QAAU,IAClBzoB,KAAK2D,YAAY5E,YAIrB+2B,wBAAAt1B,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT,GAAMT,QAASlF,KAAKkF,OACd+wB,OAAS/wB,OAAOI,YAChBywB,UAAa/1B,KAAK+1B,UAEpBE,SAAWJ,OAAS71B,KAAK+1B,UAAY/1B,KAAK+1B,UAD1C,CAEJ7wB,QAAOI,YAAcG,WAEH,IAAdswB,YACE/1B,KAAK0C,QACP1C,KAAKk2B,YAAYhxB,QAEjBlF,KAAK2D,YAAY7E,KAAKoG,OAAO+qB,WAK3B6F,wBAAAt1B,UAAW01B,YAAnB,SAAoBhxB,QAClB,GAAIlB,OACJ,KACEA,OAAShE,KAAK0C,QAAQtB,MAAMpB,KAAMkF,QAClC,MAAOjG,KAEP,WADAe,MAAK2D,YAAYzE,MAAMD,KAGzBe,KAAK2D,YAAY7E,KAAKkF,SAE1B8xB,yBAjEmDvyB,kBAAeW,gBAArDpC,SAAuBg0B,wBAiEnCA,uJCrGD,SAAAv0B,cAA6B,GAAAkB,gBAAApC,GAAwD,EAAxDA,GAAAC,UAAwDC,OAAxDF,KAAAoC,YAAApC,GAAA,GAAAC,UAAwDD,GACnF,OAAO,UAACQ,QAA0B,MAAAA,QAAOqC,KAAKnD,KAAKsD,SAAY9B,OAAAH,UAAA,IAAOP,QAAAU,OAApCkB,mBAjEpCY,sBAAAjE,WAAuC,2BAEvCuU,SAAAvU,WAAuC,yBAA9B0C,SAAA8R,aAAAD,SAAqDpS,OA8D9CO,QAAMP,OAErBA,0ICDD,SAAAwS,WAAmCrR,QACAkC,gBACjC,MAAOsV,YAAQD,SAACvX,QAASkC,eAAgB,MAtE3CsV,wBAAA9a,WAAyB,2BAoET0C,SAASiS,UAGxBA,gJCND,SAAAE,aACEC,gBACAtP,gBAEA,MAAAoP,aAAgBD,UAAC,WAAM,MAAAG,kBAAiBtP,mBApE1CoP,yBAAA5U,WAA0B,4BAgEV0C,SAAWmS,YAK1BA,mIChBD,SAAAtH,OAAyByH,WACvB,MAAO,UAACvT,QAA0B,MAAAA,QAAOqC,KAAK,GAAIizB,eAAc/hB,UAA9BvT,yOApDpCkO,aAAA3P,WAA2B,kBAmDX0C,SAAK6K,MAEpBA,KAED,IAAAwpB,eAAA,WACE,QAAAA,eAAoB/hB,UACAvT,QADAb,KAASoU,UAATA,UACApU,KAAMa,OAANA,OAMtB,MAHEs1B,eAAA31B,UAAIT,KAAJ,SAAKW,WAAgCG,QACnC,MAAOA,QAAOW,UAAU,GAAI40B,iBAAgB11B,WAAYV,KAAKoU,UAAWpU,KAAKa,UAEjFs1B,iBAOAC,gBAAA,SAAA32B,QAIE,QAAA22B,iBAAYzyB,YACQyQ,UACAvT,QAClBpB,OAAAM,KAAAC,KAAM2D,aAFY3D,KAASoU,UAATA,UACApU,KAAMa,OAANA,OALZb,KAAK2M,MAAW,EAChB3M,KAAK8K,MAAW,EAmC1B,MArCiC7K,WAAAm2B,gBAAa32B,QAUlC22B,gBAAA51B,UAAKmyB,MAAf,SAAgB/zB,OACVoB,KAAKoU,UACPpU,KAAKq2B,cAAcz3B,OAEnBoB,KAAK2M,SAIDypB,gBAAA51B,UAAa61B,cAArB,SAAsBz3B,OACpB,GAAIoF,OAEJ,KACEA,OAAShE,KAAKoU,UAAUxV,MAAOoB,KAAK8K,QAAS9K,KAAKa,QAClD,MAAO5B,KAEP,WADAe,MAAK2D,YAAYzE,MAAMD,KAIrB+E,QACFhE,KAAK2M,SAICypB,gBAAA51B,UAAS2J,UAAnB,WACEnK,KAAK2D,YAAY7E,KAAKkB,KAAK2M,OAC3B3M,KAAK2D,YAAY5E,YAErBq3B,iBArCiCrnB,aAAUkC,yKCrB3C,SAAAuD,UAA4BC,kBAC1B,MAAO,UAAC5T,QAA0B,MAAAA,QAAOqC,KAAK,GAAIozB,kBAAhB7hB,mPAhDpClR,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BA6ClB0C,SAAQ0S,SAEvBA,QAED,IAAA8hB,kBAAA,WACE,QAAAA,kBAAoB7hB,kBAAAzU,KAAgByU,iBAAhBA,iBAMtB,MAHE6hB,kBAAA91B,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAI+0B,oBAAmB71B,WAAYV,KAAKyU,oBAEpE6hB,oBAOAC,mBAAA,SAAA92B,QAKE,QAAA82B,oBAAY5yB,YACQ8Q,kBAClBhV,OAAAM,KAAAC,KAAM2D,aADY3D,KAAgByU,iBAAhBA,iBAJZzU,KAAQ0yB,UAAY,EACpB1yB,KAAoBw2B,qBAAiB,KA+D/C,MAlEuCv2B,WAAAs2B,mBAAqB92B,QAUhD82B,mBAAA/1B,UAAKmyB,MAAf,SAAgB/zB,OACd,IACE,GAAMoF,QAAShE,KAAKyU,iBAAiB1U,KAAKC,KAAMpB,MAE5CoF,SACFhE,KAAKy2B,SAAS73B,MAAOoF,QAEvB,MAAO/E,KACPe,KAAK2D,YAAYzE,MAAMD,OAIjBs3B,mBAAA/1B,UAAS2J,UAAnB,WACEnK,KAAK02B,YACL12B,KAAK2D,YAAY5E,YAGXw3B,mBAAA/1B,UAAQi2B,SAAhB,SAAiB73B,MAAU8Z,UACzB,GAAInI,cAAevQ,KAAKw2B,oBACxBx2B,MAAKpB,MAAQA,MACboB,KAAK0yB,UAAW,EACZniB,eACFA,aAAa9I,cACbzH,KAAK8yB,OAAOviB,eAGdA,aAAejN,oBAAiBW,kBAACjE,KAAM0Y,UAClCnI,aAAa9G,QAChBzJ,KAAK4B,IAAI5B,KAAKw2B,qBAAuBjmB,eAIzCgmB,mBAAA/1B,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT3F,KAAK02B,aAGPH,mBAAA/1B,UAAcqF,eAAd,WACE7F,KAAK02B,aAGPH,mBAAA/1B,UAASk2B,UAAT,WACE,GAAI12B,KAAK0yB,SAAU,CACjB,GAAM9zB,OAAQoB,KAAKpB,MACb2R,aAAevQ,KAAKw2B,oBACtBjmB,gBACFvQ,KAAKw2B,qBAAuB,KAC5BjmB,aAAa9I,cACbzH,KAAK8yB,OAAOviB,eAEdvQ,KAAKpB,MAAQ,KACboB,KAAK0yB,UAAW,EAChBjzB,OAAKe,UAACmyB,MAAA5yB,KAAAC,KAAMpB,SAGlB23B,oBAlEuChzB,kBAAeW,sKChBtD,SAAAyQ,cAAgCC,QAAiB9U,WAC/C,WAD+C,KAAAA,YAAAA,UAAA2K,QAA6BG,OACrE,SAAC/J,QAA0B,MAAAA,QAAOqC,KAAK,GAAIyzB,sBAAqB/hB,QAArC9U,aA6DpC,QAAApB,cAAsBgC,YACpBA,WAAWk2B,+OAnHb7nB,aAAA3P,WAA2B,mBAG3BqL,QAAArL,WAAsB,uBAiDN0C,SAAY6S,aAE3BA,YAED,IAAAgiB,sBAAA,WACE,QAAAA,sBAAoB/hB,QAAyB9U,WAAzBE,KAAO4U,QAAPA,QAAyB5U,KAASF,UAATA,UAM/C,MAHE62B,sBAAAn2B,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIq1B,wBAAuBn2B,WAAYV,KAAK4U,QAAS5U,KAAKF,aAEtF62B,wBAOAE,uBAAA,SAAAp3B,QAKE,QAAAo3B,wBAAYlzB,YACQiR,QACA9U,WAClBL,OAAAM,KAAAC,KAAM2D,aAFY3D,KAAO4U,QAAPA,QACA5U,KAASF,UAATA,UANZE,KAAqB82B,sBAAiB,KACtC92B,KAAS+2B,UAAM,KACf/2B,KAAQ0yB,UAAY,EAuC9B,MA1CwCzyB,WAAA42B,uBAAap3B,QAWzCo3B,uBAAAr2B,UAAKmyB,MAAf,SAAgB/zB,OACdoB,KAAKg3B,gBACLh3B,KAAK+2B,UAAYn4B,MACjBoB,KAAK0yB,UAAW,EAChB1yB,KAAK4B,IAAI5B,KAAK82B,sBAAwB92B,KAAKF,UAAUa,SAASjC,aAAcsB,KAAK4U,QAAS5U,QAGlF62B,uBAAAr2B,UAAS2J,UAAnB,WACEnK,KAAK42B,gBACL52B,KAAK2D,YAAY5E,YAGnB83B,uBAAAr2B,UAAao2B,cAAb,WACE52B,KAAKg3B,gBAEDh3B,KAAK0yB,WACP1yB,KAAK2D,YAAY7E,KAAKkB,KAAK+2B,WAC3B/2B,KAAK+2B,UAAY,KACjB/2B,KAAK0yB,UAAW,IAIZmE,uBAAAr2B,UAAaw2B,cAArB,WACE,GAAMF,uBAAwB92B,KAAK82B,qBAEL,QAA1BA,wBACF92B,KAAK8yB,OAAOgE,uBACZA,sBAAsBrvB,cACtBzH,KAAK82B,sBAAwB,OAGnCD,wBA1CwC9nB,aAAUkC,iMCrBlD,SAAAgE,OAAyBA,MACAnV,eAAA,KAAAA,YAAAA,UAAA2K,QAA6BG,MACpD,IAAMqsB,eAAgBlE,SAAME,OAAChe,OACvBiiB,SAAWD,eAAkBhiB,MAAQnV,UAAUikB,MAAS6L,KAAKuH,IAAYliB,MAC/E,OAAO,UAACpU,QAA0B,MAAAA,QAAOqC,KAAK,GAAIk0B,eAAcF,SAA9Bp3B,4OAvDpC2K,QAAArL,WAAsB,wBACtB2zB,SAAA3zB,WAAuB,oBAGvB2P,aAAA3P,WAA2B,mBAE3B0lB,eAAA1lB,WAA6B,oBA6Cb0C,SAAKmT,MAKpBA,KAED,IAAAmiB,eAAA,WACE,QAAAA,eAAoBniB,MACAnV,WADAE,KAAKiV,MAALA,MACAjV,KAASF,UAATA,UAMtB,MAHEs3B,eAAA52B,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAI61B,iBAAgB32B,WAAYV,KAAKiV,MAAOjV,KAAKF,aAE7Es3B,iBAaAC,gBAAA,SAAA53B,QAuBE,QAAA43B,iBAAY1zB,YACQsR,MACAnV,WAClBL,OAAAM,KAAAC,KAAM2D,aAFY3D,KAAKiV,MAALA,MACAjV,KAASF,UAATA,UAxBZE,KAAKgR,SACLhR,KAAMyoB,QAAY,EAClBzoB,KAAOs3B,SAAY,EA4D7B,MA/DiCr3B,WAAAo3B,gBAAa53B,QAK7B43B,gBAAQz2B,SAAvB,SAAwDa,OAMtD,IALA,GAAMZ,QAASY,MAAMZ,OACfmQ,MAAQnQ,OAAOmQ,MACflR,UAAY2B,MAAM3B,UAClB6D,YAAclC,MAAMkC,YAEnBqN,MAAMzQ,OAAS,GAAMyQ,MAAM,GAAGumB,KAAOz3B,UAAUikB,OAAU,GAC9D/S,MAAM7O,QAAQohB,aAAaC,QAAQ7f,YAGrC,IAAIqN,MAAMzQ,OAAS,EAAG,CACpB,GAAM2U,SAAQ0a,KAAKlW,IAAI,EAAG1I,MAAM,GAAGumB,KAAOz3B,UAAUikB,MACpD/jB,MAAKW,SAASc,MAAOyT,aAErBrU,QAAO4nB,QAAS,GAUZ4O,gBAAA72B,UAASg3B,UAAjB,SAAkB13B,WAChBE,KAAKyoB,QAAS,EACdzoB,KAAK4B,IAAA9B,UAAca,SAAwB02B,gBAAgBz2B,SAAUZ,KAAKiV,OACxEpU,OAAQb,KAAM2D,YAAa3D,KAAK2D,YAAa7D,UAAWA,cAIpDu3B,gBAAA72B,UAAoBi3B,qBAA5B,SAA6BlU,cAC3B,IAAqB,IAAjBvjB,KAAKs3B,QAAT,CAIA,GAAMx3B,WAAYE,KAAKF,UACjBwjB,QAAU,GAAIoU,cAAa53B,UAAUikB,MAAQ/jB,KAAKiV,MAAOsO,aAC/DvjB,MAAKgR,MAAM6S,KAAKP,UAEI,IAAhBtjB,KAAKyoB,QACPzoB,KAAKw3B,UAAU13B,aAITu3B,gBAAA72B,UAAKmyB,MAAf,SAAgB/zB,OACdoB,KAAKy3B,qBAAqB3S,eAAYqB,aAACC,WAAWxnB,SAG1Cy4B,gBAAA72B,UAAMuD,OAAhB,SAAiB9E,KACfe,KAAKs3B,SAAU,EACft3B,KAAKgR,SACLhR,KAAK2D,YAAYzE,MAAMD,MAGfo4B,gBAAA72B,UAAS2J,UAAnB,WACEnK,KAAKy3B,qBAAqB3S,eAAYqB,aAACG,mBAE3C+Q,iBA/DiCtoB,aAAUkC,YAiE3CymB,aAAA,WACE,QAAAA,cAA4BH,KACAhU,cADAvjB,KAAIu3B,KAAJA,KACAv3B,KAAYujB,aAAZA,aAE9B,MAAAmU,mNC9FA,SAAAviB,WAA6BC,sBACAC,mBAC3B,MAAIA,mBACK,SAACxU,QACN,MAAA,IAAI82B,6BAA4B92B,OAAQwU,mBACrCnS,KAAK,GAAI00B,mBADZxiB,yBAGG,SAACvU,QAA0B,MAAAA,QAAOqC,KAAK,GAAI00B,mBAAhBxiB,wPA5DpCrG,aAAA3P,WAA2B,mBAC3BD,aAAAC,WAA2B,mBAE3BmE,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BAgDlB0C,SAASqT,UAQxBA,SAED,IAAAyiB,mBAAA,WACE,QAAAA,mBAAoBxiB,uBAAApV,KAAqBoV,sBAArBA,sBAMtB,MAHEwiB,mBAAAp3B,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIq2B,qBAAoBn3B,WAAYV,KAAKoV,yBAErEwiB,qBAOAC,oBAAA,SAAAp4B,QAKE,QAAAo4B,qBAAYl0B,YACQyR,uBAClB3V,OAAAM,KAAAC,KAAM2D,aADY3D,KAAqBoV,sBAArBA,sBALZpV,KAAS8E,WAAY,EACrB9E,KAA0B83B,8BAC1B93B,KAAMkF,UA0EhB,MA7EwCjF,WAAA43B,oBAAqBp4B,QAU3Do4B,oBAAAr3B,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT3F,KAAK2D,YAAY7E,KAAK0G,YACtBxF,KAAK+3B,mBAAmBpyB,UACxB3F,KAAKg4B,eAGPH,oBAAAr3B,UAAWy3B,YAAX,SAAY/4B,MAAYyG,UACtB3F,KAAK+D,OAAO7E,QAGd24B,oBAAAr3B,UAAcqF,eAAd,SAAeF,UACb,GAAM/G,OAAQoB,KAAK+3B,mBAAmBpyB,SAClC/G,QACFoB,KAAK2D,YAAY7E,KAAKF,OAExBoB,KAAKg4B,eAGGH,oBAAAr3B,UAAKmyB,MAAf,SAAgB/zB,OACd,IACE,GAAMs5B,eAAgBl4B,KAAKoV,sBAAsBxW,MAC7Cs5B,gBACFl4B,KAAKm4B,SAASD,cAAet5B,OAE/B,MAAOK,KACPe,KAAK2D,YAAYzE,MAAMD,OAIjB44B,oBAAAr3B,UAAS2J,UAAnB,WACEnK,KAAK8E,WAAY,EACjB9E,KAAKg4B,eAGCH,oBAAAr3B,UAAkBu3B,mBAA1B,SAA2BxnB,cACzBA,aAAa9I,aAEb,IAAM2wB,iBAAkBp4B,KAAK83B,2BAA2BnS,QAAQpV,cAC5D3R,MAAW,IAQf,QANyB,IAArBw5B,kBACFx5B,MAAQoB,KAAKkF,OAAOkzB,iBACpBp4B,KAAK83B,2BAA2BnE,OAAOyE,gBAAiB,GACxDp4B,KAAKkF,OAAOyuB,OAAOyE,gBAAiB,IAG/Bx5B,OAGDi5B,oBAAAr3B,UAAQ23B,SAAhB,SAAiBD,cAAgCt5B,OAC/C,GAAMy5B,sBAAuB/0B,oBAAiBW,kBAACjE,KAAMk4B,cAAet5B,MAEhEy5B,wBAAyBA,qBAAqB5uB,SAChDzJ,KAAK4B,IAAIy2B,sBACTr4B,KAAK83B,2BAA2BjU,KAAKwU,uBAGvCr4B,KAAKkF,OAAO2e,KAAKjlB,QAGXi5B,oBAAAr3B,UAAWw3B,YAAnB,WACMh4B,KAAK8E,WAAwD,IAA3C9E,KAAK83B,2BAA2Bv3B,QACpDP,KAAK2D,YAAY5E,YAGvB84B,qBA7EwCt0B,kBAAeW,iBAoFvDyzB,4BAAA,SAAAl4B,QACE,QAAAk4B,6BAAsB92B,OAA+BwU,mBACnD5V,OAAAM,KAAOC,MADaA,KAAMa,OAANA,OAA+Bb,KAAiBqV,kBAAjBA,kBAOvD,MAR6CpV,WAAA03B,4BAAal4B,QAK9Ck4B,4BAAAn3B,UAAUC,WAApB,SAAqBC,YACnBV,KAAKqV,kBAAkB7T,UAAU,GAAI82B,6BAA4B53B,WAAYV,KAAKa,UAEtF82B,6BAR6Cx4B,aAAU0C,YAevDy2B,4BAAA,SAAA74B,QAGE,QAAA64B,6BAAoBC,OAA+B13B,QACjDpB,OAAAM,KAAOC,MADWA,KAAMu4B,OAANA,OAA+Bv4B,KAAMa,OAANA,OAF3Cb,KAAgBw4B,kBAAY,EA0BtC,MA3B6Cv4B,WAAAq4B,4BAAa74B,QAO9C64B,4BAAA93B,UAAKmyB,MAAf,SAAgBqD,QACdh2B,KAAKy4B,qBAGGH,4BAAA93B,UAAMuD,OAAhB,SAAiB9E,KACfe,KAAKyH,cACLzH,KAAKu4B,OAAOr5B,MAAMD,MAGVq5B,4BAAA93B,UAAS2J,UAAnB,WACEnK,KAAKy4B,qBAGCH,4BAAA93B,UAAiBi4B,kBAAzB,WACOz4B,KAAKw4B,mBACRx4B,KAAKw4B,kBAAmB,EACxBx4B,KAAKyH,cACLzH,KAAKa,OAAOW,UAAUxB,KAAKu4B,UAGjCD,6BA3B6CvpB,aAAUkC,2ICnIvD,SAAAqD,iBACE,MAAO,UAAuCzT,QAC5C,MAAOA,QAAOqC,KAAK,GAAIw1B,wPA9C3B3pB,aAAA3P,WAA2B,kBA4CX0C,SAAawS,cAI5BA,aAED,IAAAokB,uBAAA,WAAA,QAAAA,0BAIA,MAHEA,uBAAAl4B,UAAIT,KAAJ,SAAKW,WAA6BG,QAChC,MAAOA,QAAOW,UAAU,GAAIm3B,yBAAwBj4B,cAExDg4B,yBAOAC,wBAAA,SAAAl5B,QACE,QAAAk5B,yBAAYh1B,aACVlE,OAAAM,KAAAC,KAAM2D,aAMV,MARmE1D,WAAA04B,wBAAal5B,QAKpEk5B,wBAAAn4B,UAAKmyB,MAAf,SAAgB/zB,OACdA,MAAM4kB,QAAQxjB,KAAK2D,cAEvBg1B,yBARmE5pB,aAAUkC,2HClD7E,SAAA2nB,kBAGE,MAAA,YAAO,QAAAC,cACG74B,KAAO84B,WAmBjB,MAjBED,YAAAr4B,UAAGoB,IAAH,SAAIhD,OACGoB,KAAK+4B,IAAIn6B,QACZoB,KAAK84B,QAAQjV,KAAKjlB,QAItBi6B,WAAAr4B,UAAGu4B,IAAH,SAAIn6B,OACF,OAAwC,IAAjCoB,KAAK84B,QAAQnT,QAAQ/mB,QAG9BsI,OAAA8xB,eAAIH,WAAAr4B,UAAI,YAAR,WACE,MAAOR,MAAK84B,QAAQv4B,oCACrB,IAEDs4B,WAAAr4B,UAAKy4B,MAAL,WACEj5B,KAAK84B,QAAQv4B,OAAS,GAE1Bs4B,iBApCFhqB,oBAAAzP,WAAqB,kBAaL0C,SAAc82B,eAwB7BA,eAEY92B,QAAGo3B,IAAarqB,OAAIF,KAACuqB,KAAON,8LCgBzC,SAAArjB,UAA+BC,YACAC,SAC7B,MAAO,UAAC5U,QAA0B,MAAAA,QAAOqC,KAAK,GAAIi2B,kBAAiB3jB,YAAjCC,0OArDpClS,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,+BAClCg6B,MAAAh6B,WAA0B,gBAgDV0C,SAAQyT,SAGvBA,QAED,IAAA4jB,kBAAA,WACE,QAAAA,kBAAoB3jB,YAAsCC,SAAtCzV,KAAWwV,YAAXA,YAAsCxV,KAAOyV,QAAPA,QAM5D,MAHE0jB,kBAAA34B,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAI63B,oBAAmB34B,WAAYV,KAAKwV,YAAaxV,KAAKyV,WAEtF0jB,oBAOAE,mBAAA,SAAA55B,QAGE,QAAA45B,oBAAY11B,YAAoC6R,YAA8BC,SAC5EhW,OAAAM,KAAAC,KAAM2D,aADwC3D,KAAWwV,YAAXA,YAFxCxV,KAAMkF,OAAY,GAAIk0B,OAAGF,IAK3BzjB,SACFzV,KAAK4B,IAAI0B,oBAAiBW,kBAACjE,KAAMyV,UA0CvC,MAjD8CxV,WAAAo5B,mBAAqB55B,QAWjE45B,mBAAA74B,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT3F,KAAKkF,OAAO+zB,SAGdI,mBAAA74B,UAAWy3B,YAAX,SAAY/4B,MAAYyG,UACtB3F,KAAK+D,OAAO7E,QAGJm6B,mBAAA74B,UAAKmyB,MAAf,SAAgB/zB,OACVoB,KAAKwV,YACPxV,KAAKs5B,gBAAgB16B,OAErBoB,KAAKu5B,cAAc36B,MAAOA,QAItBy6B,mBAAA74B,UAAe84B,gBAAvB,SAAwB16B,OACtB,GAAIuN,KACIxI,YAAA3D,KAAW2D,WACnB,KACEwI,IAAMnM,KAAKwV,YAAY5W,OACvB,MAAOK,KAEP,WADA0E,aAAYzE,MAAMD,KAGpBe,KAAKu5B,cAAcptB,IAAKvN,QAGlBy6B,mBAAA74B,UAAa+4B,cAArB,SAAsBptB,IAAUvN,OACtB,GAAAsG,QAAAlF,KAAMkF,MACTA,QAAO6zB,IAAO5sB,OACjBjH,OAAOtD,IAAOuK,KACdnM,KAAK2D,YAAY7E,KAAKF,SAI5By6B,oBAjD8C91B,kBAAeW,gBAAhDpC,SAAkBu3B,mBAiD9BA,sMCvED,SAAA1jB,sBAA2CC,QAAmCJ,aAC5E,MAAO,UAAC3U,QAA0B,MAAAA,QAAOqC,KAAK,GAAIs2B,8BAAmC5jB,QAAnDJ,8OApDpCzG,aAAA3P,WAA2B,mBAC3BC,WAAAD,WAAyB,sBACzBE,cAAAF,WAA4B,wBAiDZ0C,SAAoB6T,qBAEnCA,oBAED,IAAA6jB,8BAAA,WACE,QAAAA,8BAAoB5jB,QACAJ,aADAxV,KAAO4V,QAAPA,QACA5V,KAAWwV,YAAXA,YAMtB,MAHEgkB,8BAAAh5B,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIi4B,gCAA+B/4B,WAAYV,KAAK4V,QAAS5V,KAAKwV,eAE9FgkB,gCAOAC,+BAAA,SAAAh6B,QAIE,QAAAg6B,gCAAY91B,YACAiS,QACQJ,aAClB/V,OAAAM,KAAAC,KAAM2D,aADY3D,KAAWwV,YAAXA,YAJZxV,KAAM05B,QAAY,EAMD,kBAAZ9jB,WACT5V,KAAK4V,QAAUA,SAoCrB,MA7CmD3V,WAAAw5B,+BAAah6B,QAatDg6B,+BAAAj5B,UAAOoV,QAAf,SAAgBpF,EAAQmpB,GACtB,MAAOnpB,KAAMmpB,GAGLF,+BAAAj5B,UAAKmyB,MAAf,SAAgB/zB,OAEd,GAAM4W,aAAcxV,KAAKwV,YACrBrJ,IAAWvN,KAEf,IAAI4W,cACFrJ,IAAM9M,WAAQ8B,SAACnB,KAAKwV,aAAa5W,UACrBU,cAAW+B,YACrB,MAAOrB,MAAK2D,YAAYzE,MAAMI,cAAW+B,YAACC,EAI9C,IAAI0C,SAAc,CAElB,IAAIhE,KAAK05B,QAEP,IADA11B,OAAS3E,WAAQ8B,SAACnB,KAAK4V,SAAS5V,KAAKmM,IAAKA,QAC3B7M,cAAW+B,YACxB,MAAOrB,MAAK2D,YAAYzE,MAAMI,cAAW+B,YAACC,OAG5CtB,MAAK05B,QAAS,GAGQ,IAApB7K,QAAQ7qB,UACVhE,KAAKmM,IAAMA,IACXnM,KAAK2D,YAAY7E,KAAKF,SAG5B66B,gCA7CmD1qB,aAAUkC,yKCN7D,SAAA6E,yBAA2C3J,IAAayJ,SACtD,MAAAC,wBAA2BF,qBAAC,SAACnF,EAAMmpB,GAAS,MAAA/jB,SAAUA,QAAQpF,EAAErE,KAAMwtB,EAAExtB,MAAQqE,EAAErE,OAASwtB,EAA/CxtB,UAlE9C0J,oCAAAzW,WAAqC,uCAiErB0C,SAAuBgU,wBAEtCA,uLClBD,SAAAe,WAA6B/L,MAAeiK,cAC1C,MAAO,UAAClU,QAA0B,MAAAA,QAAOqC,KAAK,GAAI02B,mBAAkB9uB,MAAlCiK,+OAjDpChG,aAAA3P,WAA2B,mBAC3By6B,0BAAAz6B,WAAwC,oCA+CxB0C,SAAS+U,UAExBA,SAED,IAAA+iB,mBAAA,WAEE,QAAAA,mBAAoB9uB,MAAuBiK,cACzC,GADkB/U,KAAK8K,MAALA,MAAuB9K,KAAY+U,aAAZA,aACrCjK,MAAQ,EACV,KAAM,IAAI+uB,2BAAuBC,wBAOvC,MAHEF,mBAAAp5B,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIu4B,qBAAoBr5B,WAAYV,KAAK8K,MAAO9K,KAAK+U,gBAEjF6kB,qBAOAG,oBAAA,SAAAt6B,QAEE,QAAAs6B,qBAAYp2B,YAAoCmH,MAAuBiK,cACrEtV,OAAAM,KAAAC,KAAM2D,aADwC3D,KAAK8K,MAALA,MAAuB9K,KAAY+U,aAAZA,aAsBzE,MAxBqC9U,WAAA85B,oBAAat6B,QAMtCs6B,oBAAAv5B,UAAKmyB,MAAf,SAAgBniB,GACO,GAAjBxQ,KAAK8K,UACP9K,KAAK2D,YAAY7E,KAAK0R,GACtBxQ,KAAK2D,YAAY5E,aAIXg7B,oBAAAv5B,UAAS2J,UAAnB,WACE,GAAMxG,aAAc3D,KAAK2D,WACrB3D,MAAK8K,OAAS,QACiB,KAAtB9K,KAAK+U,aACdpR,YAAY7E,KAAKkB,KAAK+U,cAEtBpR,YAAYzE,MAAM,GAAI26B,2BAAuBC,0BAGjDn2B,YAAY5E,YAEhBg7B,qBAxBqChrB,aAAUkC,mICnD/C,SAAAiI,OAAyB9E,UACA4C,SACvB,MAAO,UAACnW,QAA0B,MAAAA,QAAOqC,KAAK,GAAI82B,eAAc5lB,UAAW4C,QAAzCnW,yOAnBpCkO,aAAA3P,WAA2B,kBAiBX0C,SAAKoX,MAGpBA,KAED,IAAA8gB,eAAA,WACE,QAAAA,eAAoB5lB,UACA4C,QACAnW,QAFAb,KAASoU,UAATA,UACApU,KAAOgX,QAAPA,QACAhX,KAAMa,OAANA,OAMtB,MAHEm5B,eAAAx5B,UAAIT,KAAJ,SAAKuQ,SAA+BzP,QAClC,MAAOA,QAAOW,UAAU,GAAIy4B,iBAAgB3pB,SAAUtQ,KAAKoU,UAAWpU,KAAKgX,QAAShX,KAAKa,UAE7Fm5B,iBAOAC,gBAAA,SAAAx6B,QAGE,QAAAw6B,iBAAYt2B,YACQyQ,UACA4C,QACAnW,QAClBpB,OAAAM,KAAAC,KAAM2D,aAHY3D,KAASoU,UAATA,UACApU,KAAOgX,QAAPA,QACAhX,KAAMa,OAANA,OALZb,KAAK8K,MAAW,EAOtB9K,KAAKgX,QAAUA,SAAWhX,KAyB9B,MAjCiCC,WAAAg6B,gBAAax6B,QAWpCw6B,gBAAAz5B,UAAcqF,eAAtB,SAAuBq0B,iBACrBl6B,KAAK2D,YAAY7E,KAAKo7B,iBACtBl6B,KAAK2D,YAAY5E,YAGTk7B,gBAAAz5B,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAIoF,SAAS,CACb,KACEA,OAAShE,KAAKoU,UAAUrU,KAAKC,KAAKgX,QAASpY,MAAOoB,KAAK8K,QAAS9K,KAAKa,QACrE,MAAO5B,KAEP,WADAe,MAAK2D,YAAYzE,MAAMD,KAIpB+E,QACHhE,KAAK6F,gBAAe,IAIdo0B,gBAAAz5B,UAAS2J,UAAnB,WACEnK,KAAK6F,gBAAe,IAExBo0B,iBAjCiClrB,aAAUkC,wKCE3C,SAAAqF,WACE,MAAO,UAACzV,QAA0B,MAAAA,QAAOqC,KAAK,GAAZi3B,sPAxCpC52B,kBAAAnE,WAAgC,wBAChCkE,oBAAAlE,WAAkC,8BAsClB0C,SAAOwU,QAEtBA,OAED,IAAA6jB,qBAAA,WAAA,QAAAA,wBAIA,MAHEA,qBAAA35B,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAI44B,uBAAsB15B,cAEtDy5B,uBAOAC,sBAAA,SAAA36B,QAIE,QAAA26B,uBAAYz2B,aACVlE,OAAAM,KAAAC,KAAM2D,aAJA3D,KAAYq6B,cAAY,EACxBr6B,KAAes6B,iBAAY,EA2BrC,MA7BuCr6B,WAAAm6B,sBAAqB36B,QAQhD26B,sBAAA55B,UAAKmyB,MAAf,SAAgB/zB,OACToB,KAAKs6B,kBACRt6B,KAAKs6B,iBAAkB,EACvBt6B,KAAK4B,IAAI0B,oBAAiBW,kBAACjE,KAAMpB,UAI3Bw7B,sBAAA55B,UAAS2J,UAAnB,WACEnK,KAAKq6B,cAAe,EACfr6B,KAAKs6B,iBACRt6B,KAAK2D,YAAY5E,YAIrBq7B,sBAAA55B,UAAcqF,eAAd,SAAeF,UACb3F,KAAK8yB,OAAOntB,UACZ3F,KAAKs6B,iBAAkB,EACnBt6B,KAAKq6B,cACPr6B,KAAK2D,YAAY5E,YAGvBq7B,uBA7BuC72B,kBAAeW,gLCCtD,SAAAsS,YACE9T,QACAkC,gBAEE,MAAO,UAAC/D,QAA0B,MAAAA,QAAOqC,KAAK,GAAIq3B,wBAAuB73B,QAAvCkC,iPA3DtCrB,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BAqDlB0C,SAAU0U,WAKvBA,UAEH,IAAA+jB,wBAAA,WACE,QAAAA,wBAAoB73B,QACAkC,gBADA5E,KAAO0C,QAAPA,QACA1C,KAAc4E,eAAdA,eAMtB,MAHE21B,wBAAA/5B,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIg5B,0BAAyB95B,WAAYV,KAAK0C,QAAS1C,KAAK4E,kBAExF21B,0BAOAC,yBAAA,SAAA/6B,QAKE,QAAA+6B,0BAAY72B,YACQjB,QACAkC,gBAClBnF,OAAAM,KAAAC,KAAM2D,aAFY3D,KAAO0C,QAAPA,QACA1C,KAAc4E,eAAdA,eANZ5E,KAAes6B,iBAAY,EAC3Bt6B,KAAYq6B,cAAY,EACxBr6B,KAAK8K,MAAW,EAmE1B,MAtEgD7K,WAAAu6B,yBAAqB/6B,QAWzD+6B,yBAAAh6B,UAAKmyB,MAAf,SAAgB/zB,OACToB,KAAKs6B,iBACRt6B,KAAKy6B,QAAQ77B,QAIT47B,yBAAAh6B,UAAOi6B,QAAf,SAAgB77B,OACd,GAAMkM,OAAQ9K,KAAK8K,QACbnH,YAAc3D,KAAK2D,WACzB,KACE,GAAMK,QAAShE,KAAK0C,QAAQ9D,MAAOkM,MACnC9K,MAAKs6B,iBAAkB,EACvBt6B,KAAK4B,IAAI0B,oBAAiBW,kBAACjE,KAAMgE,OAAQpF,MAAOkM,QAChD,MAAO7L,KACP0E,YAAYzE,MAAMD,OAIZu7B,yBAAAh6B,UAAS2J,UAAnB,WACEnK,KAAKq6B,cAAe,EACfr6B,KAAKs6B,iBACRt6B,KAAK2D,YAAY5E,YAIrBy7B,yBAAAh6B,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT,GAAAzD,IAA4ClC,KAApC4E,eAAA1C,GAAc0C,eAAEjB,YAAAzB,GAAWyB,WAC/BiB,gBACF5E,KAAK06B,gBAAgBl1B,WAAYC,WAAYH,WAAYI,YAEzD/B,YAAY7E,KAAK2G,aAIb+0B,yBAAAh6B,UAAek6B,gBAAvB,SAAwBl1B,WAAeC,WACfH,WAAoBI,YAC1C,GAAAxD,IAA4ClC,KAApC4E,eAAA1C,GAAc0C,eAAEjB,YAAAzB,GAAWyB,WACnC,KACE,GAAMK,QAASY,eAAeY,WAAYC,WAAYH,WAAYI,WAClE/B,aAAY7E,KAAKkF,QACjB,MAAO/E,KACP0E,YAAYzE,MAAMD,OAItBu7B,yBAAAh6B,UAAWy3B,YAAX,SAAYh5B,KACVe,KAAK2D,YAAYzE,MAAMD,MAGzBu7B,yBAAAh6B,UAAcqF,eAAd,SAAeF,UACb3F,KAAK8yB,OAAOntB,UAEZ3F,KAAKs6B,iBAAkB,EACnBt6B,KAAKq6B,cACPr6B,KAAK2D,YAAY5E,YAGvBy7B,0BAtEgDj3B,kBAAeW,yNCnB/D,SAAAwS,QAA6BhU,QACAiU,WACA7W,WAG3B,WAJ2B,KAAA6W,aAAAA,WAAqBhE,OAAOC,uBAC5B,KAAA9S,YAAAA,cAAiCM,IAC5DuW,YAAcA,YAAc,GAAK,EAAIhE,OAAOC,kBAAoB+D,WAEzD,SAAC9V,QAA0B,MAAAA,QAAOqC,KAAK,GAAIy3B,gBAAej4B,QAASiU,WAAxC7W,4OA/DpCT,WAAAD,WAAyB,sBACzBE,cAAAF,WAA4B,yBAE5BmE,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BAqDlB0C,SAAM4U,OAMrBA,MAED,IAAAikB,gBAAA,WACE,QAAAA,gBAAoBj4B,QACAiU,WACA7W,WAFAE,KAAO0C,QAAPA,QACA1C,KAAU2W,WAAVA,WACA3W,KAASF,UAATA,UAMtB,MAHE66B,gBAAAn6B,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIo5B,kBAAiBl6B,WAAYV,KAAK0C,QAAS1C,KAAK2W,WAAY3W,KAAKF,aAEjG66B,iBATa74B,SAAc64B,eAS1BA,cAcD,IAAAC,kBAAA,SAAAn7B,QAME,QAAAm7B,kBAAYj3B,YACQjB,QACAiU,WACA7W,WAClBL,OAAAM,KAAAC,KAAM2D,aAHY3D,KAAO0C,QAAPA,QACA1C,KAAU2W,WAAVA,WACA3W,KAASF,UAATA,UARZE,KAAK8K,MAAW,EAChB9K,KAAMyoB,OAAW,EACjBzoB,KAAYq6B,cAAY,EAQ1B1jB,WAAahE,OAAOC,oBACtB5S,KAAKgS,WA+DX,MA3E4C/R,WAAA26B,iBAAqBn7B,QAgBhDm7B,iBAAQh6B,SAAvB,SAA8BjC,KACrB,GAAA+B,YAAA/B,IAAU+B,WAAEsD,OAAArF,IAAMqF,OAAEpF,MAAAD,IAAKC,MAAEkM,MAAAnM,IAAKmM,KACvCpK,YAAWm6B,sBAAsB72B,OAAQpF,MAAOkM,QAGxC8vB,iBAAAp6B,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAM+E,aAAc3D,KAAK2D,WAEzB,IAAIA,YAAY8F,OAEd,WADAzJ,MAAKmK,WAIP,IAAMW,OAAQ9K,KAAK8K,OACnB,IAAI9K,KAAKyoB,OAASzoB,KAAK2W,WAAY,CACjChT,YAAY7E,KAAKF,MACjB,IAAIoF,QAAS3E,WAAQ8B,SAACnB,KAAK0C,SAAS9D,MAAOkM,MAC3C,IAAI9G,SAAW1E,cAAW+B,YACxBsC,YAAYzE,MAAMI,cAAW+B,YAACC,OAC/B,IAAWtB,KAAKF,UAEV,CACL,GAAM2B,QAA6Bf,WAAYV,KAAMgE,OAAMA,OAAEpF,MAAKA,MAAEkM,MAAKA,MACzE9K,MAAK4B,IAAI5B,KAAKF,UAAUa,SAASi6B,iBAAiBh6B,SAAU,EAAGa,YAH/DzB,MAAK66B,sBAAsB72B,OAAQpF,MAAOkM,WAM5C9K,MAAKgS,OAAO6R,KAAKjlB,QAIbg8B,iBAAAp6B,UAAqBq6B,sBAA7B,SAA8B72B,OAAapF,MAAUkM,OACnD9K,KAAKyoB,SACLzoB,KAAK4B,IAAI0B,oBAAiBW,kBAAOjE,KAAMgE,OAAQpF,MAAOkM,SAG9C8vB,iBAAAp6B,UAAS2J,UAAnB,WACEnK,KAAKq6B,cAAe,EAChBr6B,KAAKq6B,cAAgC,IAAhBr6B,KAAKyoB,QAC5BzoB,KAAK2D,YAAY5E,YAIrB67B,iBAAAp6B,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT3F,KAAK2yB,MAAMltB,aAGbm1B,iBAAAp6B,UAAcqF,eAAd,SAAeF,UACb,GAAMqM,QAAShS,KAAKgS,MACpBhS,MAAK8yB,OAAOntB,UACZ3F,KAAKyoB,SACDzW,QAAUA,OAAOzR,OAAS,GAC5BP,KAAK2yB,MAAM3gB,OAAO7P,SAEhBnC,KAAKq6B,cAAgC,IAAhBr6B,KAAKyoB,QAC5BzoB,KAAK2D,YAAY5E,YAGvB67B,kBA3E4Cr3B,kBAAeW,gBAA9CpC,SAAgB84B,iBA2E5BA,+JC1JD,SAAAvjB,UAA4BF,UAC1B,MAAO,UAACtW,QAA0B,MAAAA,QAAOqC,KAAK,GAAI43B,iBAAhB3jB,2OAdpCpI,aAAA3P,WAA2B,mBAC3B6H,eAAA7H,WAA4C,oBAY5B0C,SAAQuV,SAEvBA,QAED,IAAAyjB,iBAAA,WACE,QAAAA,iBAAoB3jB,UAAAnX,KAAQmX,SAARA,SAMtB,MAHE2jB,iBAAAt6B,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIu5B,mBAAkBr6B,WAAYV,KAAKmX,YAEnE2jB,mBAOAC,kBAAA,SAAAt7B,QACE,QAAAs7B,mBAAYp3B,YAA4BwT,UACtC1X,OAAAM,KAAAC,KAAM2D,aACN3D,KAAK4B,IAAI,GAAIqF,gBAAYa,aAACqP,WAE9B,MALmClX,WAAA86B,kBAAat7B,QAKhDs7B,mBALmChsB,aAAUkC,kICc7C,SAAAuG,MAAwBpD,UACA4C,SACtB,GAAyB,kBAAd5C,WACT,KAAM,IAAIxM,WAAU,8BAEtB,OAAO,UAAC/G,QAA0B,MAAAA,QAAOqC,KAAK,GAAI83B,mBAAkB5mB,UAAWvT,QAAQ,EAArDmW,0OAjDpCjI,aAAA3P,WAA2B,kBA4CX0C,SAAI0V,KAMnBA,IAED,IAAAwjB,mBAAA,WACE,QAAAA,mBAAoB5mB,UACAvT,OACAo6B,WACAjkB,SAHAhX,KAASoU,UAATA,UACApU,KAAMa,OAANA,OACAb,KAAUi7B,WAAVA,WACAj7B,KAAOgX,QAAPA,QAMtB,MAHEgkB,mBAAAx6B,UAAIT,KAAJ,SAAKuQ,SAAyBzP,QAC5B,MAAOA,QAAOW,UAAU,GAAI05B,qBAAoB5qB,SAAUtQ,KAAKoU,UAAWpU,KAAKa,OAAQb,KAAKi7B,WAAYj7B,KAAKgX,WAEjHgkB,oBAVal5B,SAAiBk5B,kBAU7BA,iBAOD,IAAAE,qBAAA,SAAAz7B,QAGE,QAAAy7B,qBAAYv3B,YACQyQ,UACAvT,OACAo6B,WACAjkB,SAClBvX,OAAAM,KAAAC,KAAM2D,aAJY3D,KAASoU,UAATA,UACApU,KAAMa,OAANA,OACAb,KAAUi7B,WAAVA,WACAj7B,KAAOgX,QAAPA,QANZhX,KAAK8K,MAAW,EAiC1B,MAlC4C7K,WAAAi7B,oBAAaz7B,QAW/Cy7B,oBAAA16B,UAAcqF,eAAtB,SAAuBjH,OACrB,GAAM+E,aAAc3D,KAAK2D,WAEzBA,aAAY7E,KAAKF,OACjB+E,YAAY5E,YAGJm8B,oBAAA16B,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAAsD,IAAmClC,KAA3BoU,UAAAlS,GAASkS,UAAE4C,QAAA9U,GAAO8U,QACpBlM,MAAQ9K,KAAK8K,OACnB,KACiBsJ,UAAUrU,KAAKiX,SAAWhX,KAAMpB,MAAOkM,MAAO9K,KAAKa,SAEhEb,KAAK6F,eAAe7F,KAAKi7B,WAAanwB,MAAQlM,OAEhD,MAAOK,KACPe,KAAK2D,YAAYzE,MAAMD,OAIjBi8B,oBAAA16B,UAAS2J,UAAnB,WACEnK,KAAK6F,eAAe7F,KAAKi7B,YAAc,MAAI76B,KAE/C86B,qBAlC4CnsB,aAAUkC,WAAzCnP,SAAmBo5B,oBAkC/BA,mJCpED,SAAAxjB,WAA6BtD,UACA4C,SAC3B,MAAO,UAACnW,QAA0B,MAAAA,QAAOqC,KAAK,GAAIuU,QAAiBujB,kBAAC5mB,UAAWvT,QAAQ,EAArDmW,cAtCpCS,oBAAArY,WAAkC,uBAoClB0C,SAAS4V,UAGxBA,wJC6BD,SAAAE,OAA4BxD,UACAxP,eACAmQ,cAC1B,MAAO,UAAClU,QAA0B,MAAAA,QAAOqC,KAAK,GAAIi4B,eAAc/mB,UAAWxP,eAAgBmQ,aAAzDlU,yOAtEpCkO,aAAA3P,WAA2B,mBAC3Bg8B,aAAAh8B,WAA2B,uBAkEX0C,SAAK8V,MAIpBA,KAED,IAAAujB,eAAA,WACE,QAAAA,eAAoB/mB,UACAxP,eACAmQ,aACAlU,QAHAb,KAASoU,UAATA,UACApU,KAAc4E,eAAdA,eACA5E,KAAY+U,aAAZA,aACA/U,KAAMa,OAANA,OAMtB,MAHEs6B,eAAA36B,UAAIT,KAAJ,SAAKuQ,SAAyBzP,QAC5B,MAAOA,QAAOW,UAAU,GAAI65B,iBAAgB/qB,SAAUtQ,KAAKoU,UAAWpU,KAAK4E,eAAgB5E,KAAK+U,aAAc/U,KAAKa,UAEvHs6B,iBAOAE,gBAAA,SAAA57B,QAKE,QAAA47B,iBAAY13B,YACQyQ,UACAxP,eACAmQ,aACAlU,QAClBpB,OAAAM,KAAAC,KAAM2D,aAJY3D,KAASoU,UAATA,UACApU,KAAc4E,eAAdA,eACA5E,KAAY+U,aAAZA,aACA/U,KAAMa,OAANA,OARZb,KAAK8K,MAAW,EAChB9K,KAAYq6B,cAAY,EACxBr6B,KAAQs7B,UAAY,EAsE9B,MAzEoCr7B,WAAAo7B,gBAAa57B,QAarC47B,gBAAA76B,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAMkM,OAAQ9K,KAAK8K,OACf9K,MAAKoU,UACPpU,KAAKq2B,cAAcz3B,MAAOkM,OAE1B9K,KAAKu7B,MAAM38B,MAAOkM,QAIduwB,gBAAA76B,UAAa61B,cAArB,SAAsBz3B,MAAUkM,OAC9B,GAAI9G,OACJ,KACEA,OAAShE,KAAKoU,UAAUxV,MAAOkM,MAAO9K,KAAKa,QAC3C,MAAO5B,KAEP,WADAe,MAAK2D,YAAYzE,MAAMD,KAGrB+E,QACFhE,KAAKu7B,MAAM38B,MAAOkM,QAIduwB,gBAAA76B,UAAK+6B,MAAb,SAAc38B,MAAYkM,OACxB,GAAI9K,KAAK4E,eAEP,WADA5E,MAAKw7B,mBAAmB58B,MAAOkM,MAGjC9K,MAAKy7B,WAAW78B,QAGVy8B,gBAAA76B,UAAkBg7B,mBAA1B,SAA2B58B,MAAUkM,OACnC,GAAI9G,OACJ,KACEA,OAAehE,KAAM4E,eAAehG,MAAOkM,OAC3C,MAAO7L,KAEP,WADAe,MAAK2D,YAAYzE,MAAMD,KAGzBe,KAAKy7B,WAAWz3B,SAGVq3B,gBAAA76B,UAAUi7B,WAAlB,SAAmB78B,OACjB,GAAM+E,aAAc3D,KAAK2D,WACpB3D,MAAKs7B,WACRt7B,KAAKs7B,UAAW,EAChB33B,YAAY7E,KAAKF,OACjB+E,YAAY5E,WACZiB,KAAKq6B,cAAe,IAIdgB,gBAAA76B,UAAS2J,UAAnB,WACE,GAAMxG,aAAc3D,KAAK2D,WACpB3D,MAAKq6B,kBAA6C,KAAtBr6B,KAAK+U,aAG1B/U,KAAKq6B,cACf12B,YAAYzE,MAAM,GAAIk8B,cAAUM,aAHhC/3B,YAAY7E,KAAKkB,KAAK+U,cACtBpR,YAAY5E,aAKlBs8B,iBAzEoCtsB,aAAUkC,uHC5F9C0qB,yBAAA,WAAA,QAAAA,eACS37B,KAAI47B,KAAG,EACN57B,KAAO84B,WACP94B,KAAK67B,SAuCf,MArCEF,aAAAn7B,UAAGyqB,IAAH,SAAI9e,KACF,GAAM/G,GAAIpF,KAAK67B,MAAMlW,QAAQxZ,IAC7B,QAAc,IAAP/G,MAAWhF,GAAYJ,KAAK84B,QAAQ1zB,IAG7Cu2B,YAAAn7B,UAAGs7B,IAAH,SAAI3vB,IAAUvN,OACZ,GAAMwG,GAAIpF,KAAK67B,MAAMlW,QAAQxZ,IAQ7B,QAPW,IAAP/G,GACFpF,KAAK67B,MAAMhY,KAAK1X,KAChBnM,KAAK84B,QAAQjV,KAAKjlB,OAClBoB,KAAK47B,QAEL57B,KAAK84B,QAAQ1zB,GAAKxG,MAEboB,MAGT27B,YAAAn7B,UAAM2qB,OAAN,SAAOhf,KACL,GAAM/G,GAAIpF,KAAK67B,MAAMlW,QAAQxZ,IAC7B,QAAW,IAAP/G,IACJpF,KAAK84B,QAAQnF,OAAOvuB,EAAG,GACvBpF,KAAK67B,MAAMlI,OAAOvuB,EAAG,GACrBpF,KAAK47B,QACE,IAGTD,YAAAn7B,UAAKy4B,MAAL,WACEj5B,KAAK67B,MAAMt7B,OAAS,EACpBP,KAAK84B,QAAQv4B,OAAS,EACtBP,KAAK47B,KAAO,GAGdD,YAAAn7B,UAAOu7B,QAAP,SAAQ/J,GAAchb,SACpB,IAAK,GAAI5R,GAAI,EAAGA,EAAIpF,KAAK47B,KAAMx2B,IAC7B4sB,GAAGjyB,KAAKiX,QAAShX,KAAK84B,QAAQ1zB,GAAIpF,KAAK67B,MAAMz2B,KAGnDu2B,eA1Ca75B,SAAW65B,YA0CvBA,uJC1CD9sB,oBAAAzP,WAAqB,mBACrB48B,cAAA58B,WAA4B,wBAEf0C,SAAGm6B,IAAGptB,OAAIF,KAACstB,KAAQ,WAAM,MAAAD,eAAAL,sHCHtCO,qBAAA,WAAA,QAAAA,WACUl8B,KAAMkF,UA4BhB,MA1BEg3B,SAAA17B,UAAM2qB,OAAN,SAAOhf,KAEL,MADAnM,MAAKkF,OAAOiH,KAAO,MACZ,GAGT+vB,QAAA17B,UAAGs7B,IAAH,SAAI3vB,IAAavN,OAEf,MADAoB,MAAKkF,OAAOiH,KAAOvN,MACZoB,MAGTk8B,QAAA17B,UAAGyqB,IAAH,SAAI9e,KACF,MAAOnM,MAAKkF,OAAOiH,MAGrB+vB,QAAA17B,UAAOu7B,QAAP,SAAQ/J,GAAoChb,SAC1C,GAAM9R,QAASlF,KAAKkF,MACpB,KAAK,GAAIiH,OAAOjH,QACVA,OAAOuJ,eAAetC,MAAwB,OAAhBjH,OAAOiH,MACvC6lB,GAAGjyB,KAAKiX,QAAS9R,OAAOiH,KAAMA,MAKpC+vB,QAAA17B,UAAKy4B,MAAL,WACEj5B,KAAKkF,WAETg3B,WA7Bap6B,SAAOo6B,QA6BnBA,0NCsDD,SAAApkB,SAAiCtC,YACAuC,gBACAtD,iBACAuD,iBAC/B,MAAO,UAACnX,QACN,MAAAA,QAAOqC,KAAK,GAAIi5B,iBAAgB3mB,YAAauC,gBAAiBtD,iBAA9DuD,kPAxFJjJ,aAAA3P,WAA2B,mBAC3B6H,eAAA7H,WAA6B,qBAC7BD,aAAAC,WAA2B,mBAE3B0P,UAAA1P,WAAwB,gBACxBg9B,MAAAh9B,WAAoB,iBACpBi9B,UAAAj9B,WAAwB,oBA6ER0C,SAAOgW,QAMtBA,OASD,IAAAqkB,iBAAA,WACE,QAAAA,iBAAoB3mB,YACAuC,gBACAtD,iBACAuD,iBAHAhY,KAAWwV,YAAXA,YACAxV,KAAe+X,gBAAfA,gBACA/X,KAAgByU,iBAAhBA,iBACAzU,KAAegY,gBAAfA,gBAQtB,MALEmkB,iBAAA37B,UAAIT,KAAJ,SAAKW,WAAiDG,QACpD,MAAOA,QAAOW,UAAU,GAAI86B,mBAC1B57B,WAAYV,KAAKwV,YAAaxV,KAAK+X,gBAAiB/X,KAAKyU,iBAAkBzU,KAAKgY,mBAGtFmkB,mBAOAG,kBAAA,SAAA78B,QAKE,QAAA68B,mBAAY34B,YACQ6R,YACAuC,gBACAtD,iBACAuD,iBAClBvY,OAAAM,KAAAC,KAAM2D,aAJY3D,KAAWwV,YAAXA,YACAxV,KAAe+X,gBAAfA,gBACA/X,KAAgByU,iBAAhBA,iBACAzU,KAAegY,gBAAfA,gBARZhY,KAAMu8B,OAAyB,KAChCv8B,KAAsBw8B,wBAAY,EAClCx8B,KAAK2M,MAAW,EAoGzB,MAvGyC1M,WAAAq8B,kBAAa78B,QAa1C68B,kBAAA97B,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAIuN,IACJ,KACEA,IAAMnM,KAAKwV,YAAY5W,OACvB,MAAOK,KAEP,WADAe,MAAKd,MAAMD,KAIbe,KAAKy8B,OAAO79B,MAAOuN,MAGbmwB,kBAAA97B,UAAMi8B,OAAd,SAAe79B,MAAUuN,KACvB,GAAIowB,QAASv8B,KAAKu8B,MAEbA,UACHA,OAASv8B,KAAKu8B,OAAwB,gBAARpwB,KAAmB,GAAIkwB,WAAOH,QAAK,GAAIE,OAAGH,IAG1E,IAEIS,SAFAC,MAAQJ,OAAOtR,IAAI9e,IAGvB,IAAInM,KAAK+X,gBACP,IACE2kB,QAAU18B,KAAK+X,gBAAgBnZ,OAC/B,MAAOK,KACPe,KAAKd,MAAMD,SAGby9B,SAAe99B,KAGjB,KAAK+9B,MAAO,CACVA,MAAQ38B,KAAKgY,gBAAkBhY,KAAKgY,kBAAoB,GAAIlJ,WAAOS,QACnEgtB,OAAOT,IAAI3vB,IAAKwwB,MAChB,IAAMC,mBAAoB,GAAI1kB,mBAAkB/L,IAAKwwB,MAAO38B,KAE5D,IADAA,KAAK2D,YAAY7E,KAAK89B,mBAClB58B,KAAKyU,iBAAkB,CACzB,GAAIiE,cAAA,EACJ,KACEA,SAAW1Y,KAAKyU,iBAAiB,GAAIyD,mBAAwB/L,IAAiBwwB,QAC9E,MAAO19B,KAEP,WADAe,MAAKd,MAAMD,KAGbe,KAAK4B,IAAI8W,SAASlX,UAAU,GAAIq7B,yBAAwB1wB,IAAKwwB,MAAO38B,SAInE28B,MAAMlzB,QACTkzB,MAAM79B,KAAK49B,UAILJ,kBAAA97B,UAAMuD,OAAhB,SAAiB9E,KACf,GAAMs9B,QAASv8B,KAAKu8B,MAChBA,UACFA,OAAOR,QAAQ,SAACY,MAAOxwB,KACrBwwB,MAAMz9B,MAAMD,OAGds9B,OAAOtD,SAETj5B,KAAK2D,YAAYzE,MAAMD,MAGfq9B,kBAAA97B,UAAS2J,UAAnB,WACE,GAAMoyB,QAASv8B,KAAKu8B,MAChBA,UACFA,OAAOR,QAAQ,SAACY,MAAOxwB,KACrBwwB,MAAM59B,aAGRw9B,OAAOtD,SAETj5B,KAAK2D,YAAY5E,YAGnBu9B,kBAAA97B,UAAWs8B,YAAX,SAAY3wB,KACVnM,KAAKu8B,OAAOpR,OAAOhf,MAGrBmwB,kBAAA97B,UAAWiH,YAAX,WACOzH,KAAKyJ,SACRzJ,KAAKw8B,wBAAyB,EACX,IAAfx8B,KAAK2M,OACPlN,OAAKe,UAACiH,YAAA1H,KAAaC,QAI3Bs8B,mBAvGyCvtB,aAAUkC,YA8GnD4rB,wBAAA,SAAAp9B,QACE,QAAAo9B,yBAAoB1wB,IACAwwB,MACApE,QAClB94B,OAAAM,KAAAC,KAAM28B,OAHY38B,KAAGmM,IAAHA,IACAnM,KAAK28B,MAALA,MACA38B,KAAMu4B,OAANA,OAetB,MAlB4Ct4B,WAAA48B,wBAAap9B,QAO7Co9B,wBAAAr8B,UAAKmyB,MAAf,SAAgB/zB,OACdoB,KAAKjB,YAGG89B,wBAAAr8B,UAAYq0B,aAAtB,WACE,GAAA3yB,IAA4BlC,KAApBu4B,OAAAr2B,GAAMq2B,OAAEpsB,IAAAjK,GAAGiK,GACnBnM,MAAKmM,IAAMnM,KAAKu4B,OAAS,KACrBA,QACFA,OAAOuE,YAAY3wB,MAGzB0wB,yBAlB4C9tB,aAAUkC,YA4BtDiH,kBAAA,SAAAzY,QACE,QAAAyY,mBAAmB/L,IACC4wB,aACAC,sBAClBv9B,OAAAM,KAAOC,MAHUA,KAAGmM,IAAHA,IACCnM,KAAY+8B,aAAZA,aACA/8B,KAAoBg9B,qBAApBA,qBAatB,MAhB6C/8B,WAAAiY,kBAAazY,QAO9CyY,kBAAA1X,UAAUC,WAApB,SAAqBC,YACnB,GAAM6P,cAAe,GAAItJ,gBAAYa,aACrC5F,GAAiDlC,KAA1Cg9B,qBAAA96B,GAAoB86B,qBAAED,aAAA76B,GAAY66B,YAKzC,OAJIC,wBAAyBA,qBAAqBvzB,QAChD8G,aAAa3O,IAAI,GAAIq7B,2BAA0BD,uBAEjDzsB,aAAa3O,IAAIm7B,aAAav7B,UAAUd,aACjC6P,cAEX2H,mBAhB6C/Y,aAAU0C,WAA1CC,SAAiBoW,kBAgB7BA,iBAOD,IAAA+kB,2BAAA,SAAAx9B,QACE,QAAAw9B,2BAAoB1E,QAClB94B,OAAAM,KAAOC,MADWA,KAAMu4B,OAANA,OAElBA,OAAO5rB,QAaX,MAhBwC1M,WAAAg9B,0BAAYx9B,QAMlDw9B,0BAAAz8B,UAAWiH,YAAX,WACE,GAAM8wB,QAASv4B,KAAKu4B,MACfA,QAAO9uB,QAAWzJ,KAAKyJ,SAC1BhK,OAAKe,UAACiH,YAAA1H,KAAaC,MACnBu4B,OAAO5rB,OAAS,EACK,IAAjB4rB,OAAO5rB,OAAe4rB,OAAOiE,wBAC/BjE,OAAO9wB,gBAIfw1B,2BAhBwCh2B,eAAYa,+JCtQpD,SAAAqQ,kBACE,MAAO,UAAwCtX,QAC7C,MAAOA,QAAOqC,KAAK,GAAIg6B,yPAhB3BnuB,aAAA3P,WAA2B,mBAC3BkM,OAAAlM,WAAqB,iBAaL0C,SAAcqW,eAI7BA,cAED,IAAA+kB,wBAAA,WAAA,QAAAA,2BAIA,MAHEA,wBAAA18B,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAI27B,0BAAyBz8B,cAEzDw8B,0BAOAC,yBAAA,SAAA19B,QAAA,QAAA09B,4BAA0C19B,OAAA2B,MAAApB,KAAaM,WAIvD,MAJ0CL,WAAAk9B,yBAAa19B,QAC3C09B,yBAAA38B,UAAKmyB,MAAf,SAAgBqD,QACd1qB,OAAIE,QAER2xB,0BAJ0CpuB,aAAUkC,qIC5BpD,SAAAoH,WACE,MAAO,UAACxX,QAA0B,MAAAA,QAAOqC,KAAK,GAAZk6B,kPALpCruB,aAAA3P,WAA2B,kBAIX0C,SAAOuW,QAEtBA,OAED,IAAA+kB,iBAAA,WAAA,QAAAA,oBAIA,MAHEA,iBAAA58B,UAAIT,KAAJ,SAAMuQ,SAA+BzP,QACnC,MAAOA,QAAOW,UAAU,GAAI67B,mBAAkB/sB,YAElD8sB,mBAOAC,kBAAA,SAAA59B,QACE,QAAA49B,mBAAY15B,aACVlE,OAAAM,KAAAC,KAAM2D,aAiBV,MAnBgC1D,WAAAo9B,kBAAe59B,QAKrC49B,kBAAA78B,UAAcqF,eAAtB,SAAuBwS,SACrB,GAAM1U,aAAc3D,KAAK2D,WAEzBA,aAAY7E,KAAKuZ,SACjB1U,YAAY5E,YAGJs+B,kBAAA78B,UAAKmyB,MAAf,SAAgB/zB,OACdoB,KAAK6F,gBAAe,IAGZw3B,kBAAA78B,UAAS2J,UAAnB,WACEnK,KAAK6F,gBAAe,IAExBw3B,mBAnBgCtuB,aAAUkC,yJCmB1C,SAAA2H,MAA2BxE,UACAxP,eACAmQ,cACzB,MAAO,UAAClU,QAA0B,MAAAA,QAAOqC,KAAK,GAAIo6B,cAAalpB,UAAWxP,eAAgBmQ,aAAxDlU,yOAxCpCkO,aAAA3P,WAA2B,mBAC3Bg8B,aAAAh8B,WAA2B,uBAoCX0C,SAAI8W,KAInBA,IAED,IAAA0kB,cAAA,WACE,QAAAA,cAAoBlpB,UACAxP,eACAmQ,aACAlU,QAHAb,KAASoU,UAATA,UACApU,KAAc4E,eAAdA,eACA5E,KAAY+U,aAAZA,aACA/U,KAAMa,OAANA,OAMtB,MAHEy8B,cAAA98B,UAAIT,KAAJ,SAAKuQ,SAAyBzP,QAC5B,MAAOA,QAAOW,UAAU,GAAI+7B,gBAAejtB,SAAUtQ,KAAKoU,UAAWpU,KAAK4E,eAAgB5E,KAAK+U,aAAc/U,KAAKa,UAEtHy8B,gBAOAC,eAAA,SAAA99B,QAKE,QAAA89B,gBAAY55B,YACQyQ,UACAxP,eACAmQ,aACAlU,QAClBpB,OAAAM,KAAAC,KAAM2D,aAJY3D,KAASoU,UAATA,UACApU,KAAc4E,eAAdA,eACA5E,KAAY+U,aAAZA,aACA/U,KAAMa,OAANA,OAPZb,KAAQ0yB,UAAY,EACpB1yB,KAAK8K,MAAW,MAQM,KAAjBiK,eACT/U,KAAK+2B,UAAYhiB,aACjB/U,KAAK0yB,UAAW,GAyDtB,MAtEmCzyB,WAAAs9B,eAAa99B,QAiBpC89B,eAAA/8B,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAMkM,OAAQ9K,KAAK8K,OACnB,IAAI9K,KAAKoU,UACPpU,KAAKq2B,cAAcz3B,MAAOkM,WACrB,CACL,GAAI9K,KAAK4E,eAEP,WADA5E,MAAKw7B,mBAAmB58B,MAAOkM,MAGjC9K,MAAK+2B,UAAYn4B,MACjBoB,KAAK0yB,UAAW,IAIZ6K,eAAA/8B,UAAa61B,cAArB,SAAsBz3B,MAAUkM,OAC9B,GAAI9G,OACJ,KACEA,OAAShE,KAAKoU,UAAUxV,MAAOkM,MAAO9K,KAAKa,QAC3C,MAAO5B,KAEP,WADAe,MAAK2D,YAAYzE,MAAMD,KAGzB,GAAI+E,OAAQ,CACV,GAAIhE,KAAK4E,eAEP,WADA5E,MAAKw7B,mBAAmB58B,MAAOkM,MAGjC9K,MAAK+2B,UAAYn4B,MACjBoB,KAAK0yB,UAAW,IAIZ6K,eAAA/8B,UAAkBg7B,mBAA1B,SAA2B58B,MAAUkM,OACnC,GAAI9G,OACJ,KACEA,OAAehE,KAAM4E,eAAehG,MAAOkM,OAC3C,MAAO7L,KAEP,WADAe,MAAK2D,YAAYzE,MAAMD,KAGzBe,KAAK+2B,UAAY/yB,OACjBhE,KAAK0yB,UAAW,GAGR6K,eAAA/8B,UAAS2J,UAAnB,WACE,GAAMxG,aAAc3D,KAAK2D,WACrB3D,MAAK0yB,UACP/uB,YAAY7E,KAAKkB,KAAK+2B,WACtBpzB,YAAY5E,YAEZ4E,YAAYzE,MAAM,GAAIk8B,cAAUM,aAGtC6B,gBAtEmCxuB,aAAUkC,mIC/B7C,SAAAqI,OAA4B1a,OAC1B,MAAO,UAACiC,QAA0B,MAAAA,QAAOqC,KAAK,GAAIs6B,eAAhB5+B,wOA/BpCmQ,aAAA3P,WAA2B,kBA8BX0C,SAAKwX,MAEpBA,KAED,IAAAkkB,eAAA,WAIE,QAAAA,eAAY5+B,OACVoB,KAAKpB,MAAQA,MAMjB,MAHE4+B,eAAAh9B,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIi8B,iBAAgB/8B,WAAYV,KAAKpB,SAEjE4+B,iBAOAC,gBAAA,SAAAh+B,QAIE,QAAAg+B,iBAAY95B,YAA4B/E,OACtCa,OAAAM,KAAAC,KAAM2D,aACN3D,KAAKpB,MAAQA,MAMjB,MAZoCqB,WAAAw9B,gBAAah+B,QASrCg+B,gBAAAj9B,UAAKmyB,MAAf,SAAgBniB,GACdxQ,KAAK2D,YAAY7E,KAAKkB,KAAKpB,QAE/B6+B,iBAZoC1uB,aAAUkC,6JCH9C,SAAAuI,eACE,MAAO,UAAqC3Y,QAC1C,MAAOA,QAAOqC,KAAK,GAAIw6B,sPAlD3B3uB,aAAA3P,WAA2B,mBAC3B0lB,eAAA1lB,WAA6B,oBA+Cb0C,SAAW0X,YAI1BA,WAED,IAAAkkB,qBAAA,WAAA,QAAAA,wBAIA,MAHEA,qBAAAl9B,UAAIT,KAAJ,SAAKW,WAAyCG,QAC5C,MAAOA,QAAOW,UAAU,GAAIm8B,uBAAsBj9B,cAEtDg9B,uBAOAC,sBAAA,SAAAl+B,QACE,QAAAk+B,uBAAYh6B,aACVlE,OAAAM,KAAAC,KAAM2D,aAkBV,MApBuC1D,WAAA09B,sBAAal+B,QAKxCk+B,sBAAAn9B,UAAKmyB,MAAf,SAAgB/zB,OACdoB,KAAK2D,YAAY7E,KAAKgmB,eAAYqB,aAACC,WAAWxnB,SAGtC++B,sBAAAn9B,UAAMuD,OAAhB,SAAiB9E,KACf,GAAM0E,aAAc3D,KAAK2D,WACzBA,aAAY7E,KAAKgmB,eAAYqB,aAACE,YAAYpnB,MAC1C0E,YAAY5E,YAGJ4+B,sBAAAn9B,UAAS2J,UAAnB,WACE,GAAMxG,aAAc3D,KAAK2D,WACzBA,aAAY7E,KAAKgmB,eAAYqB,aAACG,kBAC9B3iB,YAAY5E,YAEhB4+B,uBApBuC5uB,aAAUkC,uICjCjD,SAAAyI,KAAuBC,UACrB,GAAMD,KAA8C,kBAAbC,UACnC,SAACnJ,EAAGmpB,GAAM,MAAAhgB,UAASnJ,EAAGmpB,GAAK,EAAInpB,EAArBmpB,GACV,SAACnpB,EAAGmpB,GAAM,MAAAnpB,GAAImpB,EAAInpB,EAARmpB,EAEd,OAAOpd,UAAMD,OAAC5C,QAvChB6C,sBAAAnd,WAAuB,yBAkCP0C,SAAG4X,IAMlBA,gNC0CD,SAAAvO,aAA4B,GAAA1I,gBAAApC,GAAiE,EAAjEA,GAAAC,UAAiEC,OAAjEF,KAAAoC,YAAApC,GAAA,GAAAC,UAAiED,GAC5F,IAAIsW,YAAahE,OAAOC,kBACpB9S,UAAwB,KACvB8Y,KAAYnW,YAAYA,YAAYlC,OAAS,EAUjD,OATIoC,eAAWC,YAACgW,OACd9Y,UAAwB2C,YAAYI,MAChCJ,YAAYlC,OAAS,GAAoD,gBAAxCkC,aAAYA,YAAYlC,OAAS,KACpEoW,WAAqBlU,YAAYI,QAEV,gBAAT+V,QAChBjC,WAAqBlU,YAAYI,OAGjB,OAAd/C,WAA6C,IAAvB2C,YAAYlC,QAAgBkC,YAAY,YAActD,cAAU0C,WAClEY,YAAY,GAG7BuX,WAAQD,SAACpD,YAAY,GAAI3T,mBAAeC,gBAAMR,YAAa3C,eAnGpEX,0BAAAC,WAA4C,oBAE5C4D,kBAAA5D,WAAgC,mCAChCuD,cAAAvD,WAA4B,yBAC5B4a,WAAA5a,WAAyB,0BA8ET0C,SAAKqJ,MAkBpBA,mIC/BD,SAAAA,aAA4B,GAAA1I,gBAAApC,GAAiE,EAAjEA,GAAAC,UAAiEC,OAAjEF,KAAAoC,YAAApC,GAAA,GAAAC,UAAiED,GAC3F,OAAO,UAACQ,QAA0B,MAAAA,QAAOqC,KAAKnD,KAAKmL,QAAWC,MAAA/J,UAAA,IAACP,QAAAU,OAA7BkB,mBAnEpCyI,qBAAA9L,WAAqC,0BAErCya,QAAAza,WAAqC,wBAA5B0C,SAAAgY,YAAAD,QAAkD1O,MAgE3CrJ,QAAKqJ,MAEpBA,qKCbD,SAAAiP,YAAoClG,gBACAtP,eACA+R,YAKlC,WALkC,KAAAA,aAAAA,WAAqBhE,OAAOC,mBAChC,gBAAnBhO,kBACT+R,WAAqB/R,eACrBA,eAAiB,MAEZ,SAAC/D,QAA0B,MAAAA,QAAOqC,KAAK,GAAI06B,oBAAmB1pB,gBAAsBtP,eAAzD+R,6OA5DpCpT,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BAmDlB0C,SAAUsY,WAQzBA,UAID,IAAAwjB,oBAAA,WACE,QAAAA,oBAAoBC,IACAj5B,eACA+R,gBAAR,KAAAA,aAAAA,WAA6BhE,OAAOC,mBAF5B5S,KAAG69B,IAAHA,IACA79B,KAAc4E,eAAdA,eACA5E,KAAU2W,WAAVA,WAMtB,MAHEinB,oBAAAp9B,UAAIT,KAAJ,SAAKuQ,SAAyBzP,QAC5B,MAAOA,QAAOW,UAAU,GAAIs8B,sBAAqBxtB,SAAUtQ,KAAK69B,IAAK79B,KAAK4E,eAAgB5E,KAAK2W,cAEnGinB,qBATa97B,SAAkB87B,mBAS9BA,kBAOD,IAAAE,sBAAA,SAAAr+B,QAME,QAAAq+B,sBAAYn6B,YACQk6B,IACAj5B,eACA+R,gBAAR,KAAAA,aAAAA,WAA6BhE,OAAOC,mBAC9CnT,OAAAM,KAAAC,KAAM2D,aAHY3D,KAAG69B,IAAHA,IACA79B,KAAc4E,eAAdA,eACA5E,KAAU2W,WAAVA,WARZ3W,KAAYq6B,cAAY,EACxBr6B,KAAMgS,UACNhS,KAAMyoB,OAAW,EACfzoB,KAAK8K,MAAW,EA6E5B,MAjFmD7K,WAAA69B,qBAAqBr+B,QAa5Dq+B,qBAAAt9B,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAIoB,KAAKyoB,OAASzoB,KAAK2W,WAAY,CACjC,GAAM/R,gBAAiB5E,KAAK4E,eACtBkG,MAAQ9K,KAAK8K,QACb+yB,IAAM79B,KAAK69B,IACXl6B,YAAc3D,KAAK2D,WAEzB3D,MAAKyoB,SACLzoB,KAAK+9B,UAAUF,IAAKl6B,YAAaiB,eAAgBhG,MAAOkM,WAExD9K,MAAKgS,OAAO6R,KAAKjlB,QAIbk/B,qBAAAt9B,UAASu9B,UAAjB,SAAkBF,IACAl6B,YACAiB,eACAhG,MACAkM,OAChB9K,KAAK4B,IAAI0B,oBAAiBW,kBAAOjE,KAAM69B,IAAKj/B,MAAOkM,SAG3CgzB,qBAAAt9B,UAAS2J,UAAnB,WACEnK,KAAKq6B,cAAe,EACA,IAAhBr6B,KAAKyoB,QAAuC,IAAvBzoB,KAAKgS,OAAOzR,QACnCP,KAAK2D,YAAY5E,YAIrB++B,qBAAAt9B,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT,GAAAzD,IAA4ClC,KAApC4E,eAAA1C,GAAc0C,eAAEjB,YAAAzB,GAAWyB,WAC/BiB,gBACF5E,KAAK06B,gBAAgBl1B,WAAYC,WAAYH,WAAYI,YAEzD/B,YAAY7E,KAAK2G,aAIbq4B,qBAAAt9B,UAAek6B,gBAAvB,SAAwBl1B,WAAeC,WACfH,WAAoBI,YAC1C,GACI1B,QADJ9B,GAA4ClC,KAApC4E,eAAA1C,GAAc0C,eAAEjB,YAAAzB,GAAWyB,WAEnC,KACEK,OAASY,eAAeY,WAAYC,WAAYH,WAAYI,YAC5D,MAAOzG,KAEP,WADA0E,aAAYzE,MAAMD,KAIpB0E,YAAY7E,KAAKkF,SAGnB85B,qBAAAt9B,UAAWy3B,YAAX,SAAYh5B,KACVe,KAAK2D,YAAYzE,MAAMD,MAGzB6+B,qBAAAt9B,UAAcqF,eAAd,SAAeF,UACb,GAAMqM,QAAShS,KAAKgS,MACpBhS,MAAK8yB,OAAOntB,UACZ3F,KAAKyoB,SACDzW,OAAOzR,OAAS,EAClBP,KAAK2yB,MAAM3gB,OAAO7P,SACO,IAAhBnC,KAAKyoB,QAAgBzoB,KAAKq6B,cACnCr6B,KAAK2D,YAAY5E,YAGvB++B,sBAjFmDv6B,kBAAeW,gBAArDpC,SAAoBg8B,qBAiFhCA,gOC7HD,SAAAvjB,WAAgCC,YACAC,KACA9D,YAC9B,WAD8B,KAAAA,aAAAA,WAAqBhE,OAAOC,mBACnD,SAAC/R,QAA0B,MAAAA,QAAOqC,KAAK,GAAI86B,mBAAkBxjB,YAAaC,KAA/C9D,6OAzCpCtX,WAAAD,WAAyB,sBACzBE,cAAAF,WAA4B,yBAC5BkE,oBAAAlE,WAAkC,+BAClCmE,kBAAAnE,WAAgC,uBAmChB0C,SAASyY,UAIxBA,SAED,IAAAyjB,mBAAA,WACE,QAAAA,mBAAoBxjB,YACAC,KACA9D,YAFA3W,KAAWwa,YAAXA,YACAxa,KAAIya,KAAJA,KACAza,KAAU2W,WAAVA,WAQtB,MALEqnB,mBAAAx9B,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIy8B,qBAC1Bv9B,WAAYV,KAAKwa,YAAaxa,KAAKya,KAAMza,KAAK2W,cAGpDqnB,oBAXal8B,SAAiBk8B,kBAW7BA,iBAOD,IAAAC,qBAAA,SAAAx+B,QAOE,QAAAw+B,qBAAYt6B,YACQ6W,YACA0jB,IACAvnB,YAClBlX,OAAAM,KAAAC,KAAM2D,aAHY3D,KAAWwa,YAAXA,YACAxa,KAAGk+B,IAAHA,IACAl+B,KAAU2W,WAAVA,WATZ3W,KAAQ0yB,UAAY,EACpB1yB,KAAYq6B,cAAY,EACxBr6B,KAAMgS,UACNhS,KAAMyoB,OAAW,EACfzoB,KAAK8K,MAAW,EA6D5B,MAlE+C7K,WAAAg+B,oBAAqBx+B,QAcxDw+B,oBAAAz9B,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAIoB,KAAKyoB,OAASzoB,KAAK2W,WAAY,CACjC,GAAM7L,OAAQ9K,KAAK8K,QACb+yB,IAAMx+B,WAAQ8B,SAACnB,KAAKwa,aAAaxa,KAAKk+B,IAAKt/B,OAC3C+E,YAAc3D,KAAK2D,WACrBk6B,OAAQv+B,cAAW+B,YACrBsC,YAAYzE,MAAMI,cAAW+B,YAACC,IAE9BtB,KAAKyoB,SACLzoB,KAAK+9B,UAAUF,IAAKj/B,MAAOkM,YAG7B9K,MAAKgS,OAAO6R,KAAKjlB,QAIbq/B,oBAAAz9B,UAASu9B,UAAjB,SAAkBF,IAAUj/B,MAAUkM,OACpC9K,KAAK4B,IAAI0B,oBAAiBW,kBAAOjE,KAAM69B,IAAKj/B,MAAOkM,SAG3CmzB,oBAAAz9B,UAAS2J,UAAnB,WACEnK,KAAKq6B,cAAe,EACA,IAAhBr6B,KAAKyoB,QAAuC,IAAvBzoB,KAAKgS,OAAOzR,UACb,IAAlBP,KAAK0yB,UACP1yB,KAAK2D,YAAY7E,KAAKkB,KAAKk+B,KAE7Bl+B,KAAK2D,YAAY5E,aAIrBk/B,oBAAAz9B,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACD,GAAAhC,aAAA3D,KAAW2D,WACnB3D,MAAKk+B,IAAMz4B,WACXzF,KAAK0yB,UAAW,EAChB/uB,YAAY7E,KAAK2G,aAGnBw4B,oBAAAz9B,UAAcqF,eAAd,SAAeF,UACb,GAAMqM,QAAShS,KAAKgS,MACpBhS,MAAK8yB,OAAOntB,UACZ3F,KAAKyoB,SACDzW,OAAOzR,OAAS,EAClBP,KAAK2yB,MAAM3gB,OAAO7P,SACO,IAAhBnC,KAAKyoB,QAAgBzoB,KAAKq6B,gBACb,IAAlBr6B,KAAK0yB,UACP1yB,KAAK2D,YAAY7E,KAAKkB,KAAKk+B,KAE7Bl+B,KAAK2D,YAAY5E,aAGvBk/B,qBAlE+C16B,kBAAeW,gBAAjDpC,SAAmBm8B,oBAkE/BA,+IClGD,SAAAtjB,KAAuBhB,UACrB,GAAMgB,KAA8C,kBAAbhB,UACnC,SAACnJ,EAAGmpB,GAAM,MAAAhgB,UAASnJ,EAAGmpB,GAAK,EAAInpB,EAArBmpB,GACV,SAACnpB,EAAGmpB,GAAM,MAAAnpB,GAAImpB,EAAInpB,EAARmpB,EACd,OAAOpd,UAAMD,OAAC3B,QAtChB4B,sBAAAnd,WAAuB,yBAkCP0C,SAAG6Y,IAKlBA,+NC2CD,SAAA5O,yBAAwC,GAAAmP,gBAAA7a,GAE8C,EAF9CA,GAAAC,UAE8CC,OAF9CF,KAAA6a,YAAA7a,GAAA,GAAAC,UAE8CD,GAKpF,OAJ2B,KAAvB6a,YAAY3a,QAAgBuC,UAAOC,QAACmY,YAAY,MAClDA,YAAsCA,YAAY,IAG7C,SAACra,QAA0B,MAAAA,QAAOqC,KAAK,GAAIi7B,2BAAhBjjB,eAcpC,QAAAlP,+BAA8C,GAAAkP,gBAAA7a,GAE+C,EAF/CA,GAAAC,UAE+CC,OAF/CF,KAAA6a,YAAA7a,GAAA,GAAAC,UAE+CD,GAC3F,IAAIQ,QAA+B,IAOnC,OAL2B,KAAvBqa,YAAY3a,QAAgBuC,UAAOC,QAACmY,YAAY,MAClDA,YAA2CA,YAAY,IAEzDra,OAASqa,YAAY/Y,QAEd,GAAIi8B,kBAAcC,eAACx9B,OAAQ,MAAMqC,KAAK,GAAIi7B,2BAAgCjjB,6OAhHnFkjB,iBAAAh/B,WAA+B,kCAG/B0D,UAAA1D,WAAwB,qBACxBmE,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BA2ElB0C,SAAiBiK,kBAQhCA,kBAaejK,QAAuBkK,wBAWtCA,uBAED,IAAAmyB,2BAAA,WACE,QAAAA,2BAAoBjjB,aAAAlb,KAAWkb,YAAXA,YAMtB,MAHEijB,2BAAA39B,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAI88B,6BAA4B59B,WAAYV,KAAKkb,eAE7EijB,6BAEAG,4BAAA,SAAA7+B,QACE,QAAA6+B,6BAAsB36B,YACFuX,aAClBzb,OAAAM,KAAAC,KAAM2D,aAFc3D,KAAW2D,YAAXA,YACF3D,KAAWkb,YAAXA,YA4BtB,MA9BgDjb,WAAAq+B,4BAAqB7+B,QAMnE6+B,4BAAA99B,UAAWy3B,YAAX,SAAY/4B,MAAYyG,UACtB3F,KAAKu+B,yBAGPD,4BAAA99B,UAAcqF,eAAd,SAAeF,UACb3F,KAAKu+B,yBAGGD,4BAAA99B,UAAMuD,OAAhB,SAAiB9E,KACfe,KAAKu+B,yBAGGD,4BAAA99B,UAAS2J,UAAnB,WACEnK,KAAKu+B,yBAGCD,4BAAA99B,UAAqB+9B,sBAA7B,WACE,GAAMz/B,MAAOkB,KAAKkb,YAAY/Y,OAC1BrD,MACFkB,KAAK4B,IAAI0B,oBAAiBW,kBAACjE,KAAMlB,OAEjCkB,KAAK2D,YAAY5E,YAGvBu/B,6BA9BgD/6B,kBAAeW,2ICrF/D,SAAAiX,YACE,MAAO,UAACta,QAA0B,MAAAA,QAAOqC,KAAK,GAAZs7B,mPAvCpCzvB,aAAA3P,WAA2B,kBAsCX0C,SAAQqZ,SAEvBA,QAED,IAAAqjB,kBAAA,WAAA,QAAAA,qBAIA,MAHEA,kBAAAh+B,UAAIT,KAAJ,SAAKW,WAAgCG,QACnC,MAAOA,QAAOW,UAAU,GAAIi9B,oBAAmB/9B,cAEnD89B,oBAOAC,mBAAA,SAAAh/B,QAIE,QAAAg/B,oBAAY96B,aACVlE,OAAAM,KAAAC,KAAM2D,aAHA3D,KAAO0+B,SAAY,EAe7B,MAjBoCz+B,WAAAw+B,mBAAah/B,QAQ/Cg/B,mBAAAj+B,UAAKmyB,MAAL,SAAM/zB,OACAoB,KAAK0+B,QACP1+B,KAAK2D,YAAY7E,MAAMkB,KAAK2+B,KAAM//B,QAElCoB,KAAK0+B,SAAU,EAGjB1+B,KAAK2+B,KAAO//B,OAEhB6/B,oBAjBoC1vB,aAAUkC,2GCvD9C,SAAA2tB,KAAoBC,KAAgB7nB,SAClC,QAAA8nB,WACE,OAAgBA,QAASD,KAAKz9B,MAAa09B,QAAS9nB,QAAS1W,WAI/D,MAFOw+B,SAASD,KAAOA,KAChBC,QAAS9nB,QAAUA,QACnB8nB,kBANOh9B,SAAG88B,IAOlBA,4HC6CD,SAAA7nB,QAA0B3C,UACA4C,SACxB,MAAO,UAAgCnW,QACrC,MAAOA,QAAOqC,KAAK,GAAI67B,gBAAe3qB,UAAW4C,0OAtDrDjI,aAAA3P,WAA2B,kBAmDX0C,SAAMiV,OAKrBA,MAED,IAAAgoB,gBAAA,WACE,QAAAA,gBAAoB3qB,UACA4C,SADAhX,KAASoU,UAATA,UACApU,KAAOgX,QAAPA,QAMtB,MAHE+nB,gBAAAv+B,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIw9B,kBAAiBt+B,WAAYV,KAAKoU,UAAWpU,KAAKgX,WAElF+nB,kBAOAC,iBAAA,SAAAv/B,QAIE,QAAAu/B,kBAAYr7B,YACQyQ,UACA4C,SAClBvX,OAAAM,KAAAC,KAAM2D,aAFY3D,KAASoU,UAATA,UACApU,KAAOgX,QAAPA,QAJpBhX,KAAK2M,MAAW,EAsBlB,MAxBkC1M,WAAA++B,iBAAav/B,QAYnCu/B,iBAAAx+B,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAIoF,OACJ,KACEA,OAAShE,KAAKoU,UAAUrU,KAAKC,KAAKgX,QAASpY,MAAOoB,KAAK2M,SACvD,MAAO1N,KAEP,WADAe,MAAK2D,YAAYzE,MAAMD,KAGrB+E,QACFhE,KAAK2D,YAAY7E,KAAKF,QAG5BogC,kBAxBkCjwB,aAAUkC,6JC5B5C,SAAAoK,WAA6BjH,UACA4C,SAC3B,MAAO,UAACnW,QAA0B,OAChCoW,SAAMF,OAAC3C,UAAW4C,SAASnW,QAC3BoW,SAAMF,OAACkoB,MAAGL,IAACxqB,UAAW4C,UAFUnW,aAhDpCo+B,mBAAA7/B,WAAoB,kBACpB6X,SAAA7X,WAAuB,wBA6CP0C,SAASuZ,UAMxBA,oICtBD,SAAAE,aAA4B,GAAAC,eAAAnb,GAAuB,EAAvBA,GAAAC,UAAuBC,OAAvBF,KAAAmb,WAAAnb,GAAA,GAAAC,UAAuBD,GACjD,IAAME,QAASib,WAAWjb,MAC1B,IAAe,IAAXA,OACF,KAAM,IAAIkP,OAAM,sCAElB,OAAO,UAAC5O,QAA0B,MAAAwY,OAAGD,IAAC8lB,QAAQ1jB,WAAYjb,SAAxBM,SAGpC,QAAAq+B,SAAiBC,MAAiB5+B,QAchC,MAbe,UAACiQ,GAEd,IAAK,GADD4uB,aAAc5uB,EACTpL,EAAI,EAAGA,EAAI7E,OAAQ6E,IAAK,CAC/B,GAAMi6B,GAAID,YAAYD,MAAM/5B,GAC5B,QAAiB,KAANi6B,EAGT,MAFAD,aAAcC,EAKlB,MAAOD,iBAhDX/lB,mBAAAja,WAAoB,sBA6BJ0C,SAAKyZ,MAMpBA,uJCXD,SAAAG,SAA8B/b,UAC5B,MAAOA,UAAAob,YACIF,UAAC,WAAM,MAAA,IAAI/L,WAAJS,SAAkB5P,UAClCob,YAASF,UAAC,GAAI/L,WAAOS,YA3BzBT,uBAAA1P,WAAwB,iBACxB2b,YAAA3b,WAA0B,2BAuBV0C,SAAO4Z,QAItBA,gYC7BD5M,UAAA1P,WAAwB,gBAGxBkgC,0BAAAlgC,WAAwC,qCAKxCmgC,gBAAA,SAAA9/B,QAEE,QAAA8/B,iBAAoBC,QAClB//B,OAAAM,KAAOC,MADWA,KAAMw/B,OAANA,OA6BtB,MA/BwCv/B,WAAAs/B,gBAAU9/B,QAMhDyH,OAAA8xB,eAAIuG,gBAAA/+B,UAAK,aAAT,WACE,MAAOR,MAAK8nB,wCACb,IAESyX,gBAAA/+B,UAAUC,WAApB,SAAqBC,YACnB,GAAM6P,cAAe9Q,OAAKe,UAACC,WAAAV,KAAAC,KAAWU,WAItC,OAHI6P,gBAAiCA,aAAc9G,QACjD/I,WAAW5B,KAAKkB,KAAKw/B,QAEhBjvB,cAGTgvB,gBAAA/+B,UAAQsnB,SAAR,WACE,GAAI9nB,KAAKy/B,SACP,KAAMz/B,MAAK0/B,WACZ,IAAU1/B,KAAKyJ,OACd,KAAM,IAAI61B,2BAAuBK,uBAEjC,OAAO3/B,MAAKw/B,QAIhBD,gBAAA/+B,UAAI1B,KAAJ,SAAKF,OACHa,OAAKe,UAAC1B,KAAAiB,KAAAC,KAAKA,KAAKw/B,OAAS5gC,QAE7B2gC,iBA/BwCzwB,UAAOS,QAAlCzN,SAAey9B,gBA+B3BA,iLC3BD,SAAA3jB,iBAAmChd,OACjC,MAAO,UAACiC,QAA0B,MAAAka,aAASF,UAAC,GAAI+kB,mBAAeL,gBAAI3gC,QAAjCiC,YAZpC++B,+BAAAxgC,WAAgC,yBAChC2b,YAAA3b,WAA0B,2BAUV0C,SAAe8Z,gBAE9BA,qXCdD9M,UAAA1P,WAAwB,gBAExB6H,eAAA7H,WAA6B,qBAK7B0B,aAAA,SAAArB,QAAA,QAAAqB,gBAAqCrB,OAAA2B,MAAApB,KAAUM,WACrCN,KAAKpB,MAAM,KACXoB,KAAO6/B,SAAY,EACnB7/B,KAAYq6B,cAAY,EAkClC,MArCqCp6B,WAAAa,aAAUrB,QAKnCqB,aAAAN,UAAUC,WAApB,SAAqBC,YACnB,MAAIV,MAAKy/B,UACP/+B,WAAWxB,MAAMc,KAAK0/B,aACfz4B,eAAYa,aAACg4B,OACX9/B,KAAKq6B,cAAgBr6B,KAAK6/B,SACnCn/B,WAAW5B,KAAKkB,KAAKpB,OACrB8B,WAAW3B,WACJkI,eAAYa,aAACg4B,OAEfrgC,OAAKe,UAACC,WAAAV,KAAAC,KAAWU,aAG1BI,aAAAN,UAAI1B,KAAJ,SAAKF,OACEoB,KAAKq6B,eACRr6B,KAAKpB,MAAQA,MACboB,KAAK6/B,SAAU,IAInB/+B,aAAAN,UAAKtB,MAAL,SAAMA,OACCc,KAAKq6B,cACR56B,OAAKe,UAACtB,MAAAa,KAAAC,KAAMd,QAIhB4B,aAAAN,UAAQzB,SAAR,WACEiB,KAAKq6B,cAAe,EAChBr6B,KAAK6/B,SACPpgC,OAAKe,UAAC1B,KAAAiB,KAAAC,KAAKA,KAAKpB,OAElBa,OAAKe,UAACzB,SAAAgB,KAAUC,OAEpBc,cArCqCgO,UAAOS,QAA/BzN,SAAYhB,aAqCxBA,uKCtCD,SAAAob,eACE,MAAO,UAACrb,QAA0B,MAAAka,aAASF,UAAC,GAAItb,gBAAYuB,cAA1BD,YANpCtB,4BAAAH,WAA6B,sBAC7B2b,YAAA3b,WAA0B,2BAIV0C,SAAWoa,YAE1BA,yKCKD,SAAAJ,eAAoC1J,WACA2J,WACAC,oBACAlc,WAE9Bkc,qBAAsD,kBAAxBA,uBAChClc,UAAYkc,oBAGd,IAAMrc,UAA0C,kBAAxBqc,qBAAqCA,wBAAsB5b,GAC7EvB,QAAU,GAAImQ,iBAAaU,cAAI0C,WAAY2J,WAAYjc,UAE7D,OAAO,UAACe,QAA0B,MAAAka,aAASF,UAAC,WAAM,MAAAhc,UAASc,UAAzBkB,YAxBpCmO,6BAAA5P,WAA8B,uBAE9B2b,YAAA3b,WAA0B,2BAUV0C,SAAaga,cAa5BA,8NCLD,SAAAzQ,YAAwB,GAAA5I,gBAAApC,GAA+D,EAA/DA,GAAAC,UAA+DC,OAA/DF,KAAAoC,YAAApC,GAAA,GAAAC,UAA+DD,GAGrF,IAA2B,IAAvBoC,YAAYlC,OAAc,CAC5B,IAAIuC,UAAOC,QAACN,YAAY,IAGtB,MAAwBA,aAAY,EAFpCA,aAAsCA,YAAY,GAMtD,MAAO,IAAIO,mBAAeC,gBAASR,aAAaS,KAAK,GAAI68B,8OA/B3Dj9B,UAAA1D,WAAwB,qBACxB4D,kBAAA5D,WAAgC,mCAIhCmE,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BAalB0C,SAAIuJ,KAYnBA,IAED,IAAA00B,cAAA,WAAA,QAAAA,iBAIA,MAHEA,cAAAv/B,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIw+B,gBAAet/B,cAE/Cq/B,eAJaj+B,SAAYi+B,aAIxBA,YAOD,IAAAC,gBAAA,SAAAvgC,QAKE,QAAAugC,gBAAYr8B,aACVlE,OAAAM,KAAAC,KAAM2D,aALA3D,KAAQigC,UAAY,EACpBjgC,KAAWyC,eACXzC,KAAaojB,iBAkDvB,MArDuCnjB,WAAA+/B,eAAqBvgC,QAShDugC,eAAAx/B,UAAKmyB,MAAf,SAAgB3P,YACdhjB,KAAKyC,YAAYohB,KAAKb,aAGdgd,eAAAx/B,UAAS2J,UAAnB,WACE,GAAM1H,aAAczC,KAAKyC,YACnBuC,IAAMvC,YAAYlC,MAExB,IAAY,IAARyE,IACFhF,KAAK2D,YAAY5E,eACZ,CACL,IAAK,GAAIqG,GAAI,EAAGA,EAAIJ,MAAQhF,KAAKigC,SAAU76B,IAAK,CAC9C,GAAI4d,YAAavgB,YAAY2C,GACzBmL,aAAejN,oBAAiBW,kBAACjE,KAAMgjB,WAAYA,WAAY5d,EAE/DpF,MAAKojB,eACPpjB,KAAKojB,cAAcS,KAAKtT,cAE1BvQ,KAAK4B,IAAI2O,cAEXvQ,KAAKyC,YAAc,OAIvBu9B,eAAAx/B,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT,IAAK3F,KAAKigC,SAAU,CAClBjgC,KAAKigC,UAAW,CAEhB,KAAK,GAAI76B,GAAI,EAAGA,EAAIpF,KAAKojB,cAAc7iB,OAAQ6E,IAC7C,GAAIA,IAAME,WAAY,CACpB,GAAIiL,cAAevQ,KAAKojB,cAAche,EAEtCmL,cAAa9I,cACbzH,KAAK8yB,OAAOviB,cAIhBvQ,KAAKojB,cAAgB,KAGvBpjB,KAAK2D,YAAY7E,KAAK2G,aAE1Bu6B,gBArDuCz8B,kBAAeW,gBAAzCpC,SAAck+B,eAqD1BA,8JC/ED,SAAA30B,YAAwB,GAAA5I,gBAAApC,GAA2D,EAA3DA,GAAAC,UAA2DC,OAA3DF,KAAAoC,YAAApC,GAAA,GAAAC,UAA2DD,GACjF,OAAO,UAA8BQ,QAOnC,MAJ2B,KAAvB4B,YAAYlC,QAAgBuC,UAAOC,QAACN,YAAY,MAClDA,YAAoCA,YAAY,IAG3C5B,OAAOqC,KAAKnD,KAAKqL,OAAUC,KAAAjK,UAAA,IAAIP,QAAAU,OAAWkB,mBA3BrDK,uBAAA1D,WAAwB,sBAExBgM,OAAAhM,WAAmC,uBAiBnB0C,SAAIuJ,KAUnBA,+JCXD,SAAAmR,QAA0B7P,OACxB,WADwB,KAAAA,QAAAA,OAAiB,GAClC,SAAC9L,QACN,MAAc,KAAV8L,MACK,GAAIrI,mBAAeE,gBACjBmI,MAAQ,EACV9L,OAAOqC,KAAK,GAAIg9B,iBAAgB,EAAGr/B,SAEnCA,OAAOqC,KAAK,GAAIg9B,gBAAevzB,MAAQ,EAAG9L,yOAzBvDkO,aAAA3P,WAA2B,mBAE3BkF,kBAAAlF,WAAgC,kCAgBhB0C,SAAM0a,OAUrBA,MAED,IAAA0jB,gBAAA,WACE,QAAAA,gBAAoBvzB,MACA9L,QADAb,KAAK2M,MAALA,MACA3M,KAAMa,OAANA,OAKtB,MAHEq/B,gBAAA1/B,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAI2+B,kBAAiBz/B,WAAYV,KAAK2M,MAAO3M,KAAKa,UAE9Eq/B,kBAOAC,iBAAA,SAAA1gC,QACE,QAAA0gC,kBAAYx8B,YACQgJ,MACA9L,QAClBpB,OAAAM,KAAAC,KAAM2D,aAFY3D,KAAK2M,MAALA,MACA3M,KAAMa,OAANA,OActB,MAjBkCZ,WAAAkgC,iBAAa1gC,QAM7C0gC,iBAAA3/B,UAAQzB,SAAR,WACE,IAAKiB,KAAK01B,UAAW,CACnB,GAAAxzB,IAA8BlC,KAAtBa,OAAAqB,GAAMrB,OAAE8L,MAAAzK,GAAKyK,KACrB,IAAc,IAAVA,MACF,MAAOlN,QAAKe,UAACzB,SAAAgB,KAAUC,KACd2M,QAAS,IAClB3M,KAAK2M,MAAQA,MAAQ,GAEvB9L,OAAOW,UAAUxB,KAAK41B,4BAG5BuK,kBAjBkCpxB,aAAUkC,uOCjB5C,SAAAyL,YAA8BC,UAC5B,MAAO,UAAC9b,QAA0B,MAAAA,QAAOqC,KAAK,GAAIk9B,oBAAhBzjB,2OA1BpC7N,UAAA1P,WAAwB,gBAExBC,WAAAD,WAAyB,sBACzBE,cAAAF,WAA4B,yBAE5BmE,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BAkBlB0C,SAAU4a,WAEzBA,UAED,IAAA0jB,oBAAA,WACE,QAAAA,oBAAsBzjB,UAAA3c,KAAQ2c,SAARA,SAMxB,MAHEyjB,oBAAA5/B,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAI6+B,sBAAqB3/B,WAAYV,KAAK2c,SAAU9b,UAEhFu/B,sBAOAC,qBAAA,SAAA5gC,QAOE,QAAA4gC,sBAAY18B,YACQgZ,SACA9b,QAClBpB,OAAAM,KAAAC,KAAM2D,aAFY3D,KAAQ2c,SAARA,SACA3c,KAAMa,OAANA,OAJZb,KAAyBsgC,2BAAY,EAsE/C,MA3EyCrgC,WAAAogC,qBAAqB5gC,QAa5D4gC,qBAAA7/B,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT3F,KAAKsgC,2BAA4B,EACjCtgC,KAAKa,OAAOW,UAAUxB,OAGxBqgC,qBAAA7/B,UAAcqF,eAAd,SAAeF,UACb,IAAuC,IAAnC3F,KAAKsgC,0BACP,MAAO7gC,QAAKe,UAACzB,SAAAgB,KAAUC,OAI3BqgC,qBAAA7/B,UAAQzB,SAAR,WAGE,GAFAiB,KAAKsgC,2BAA4B,GAE5BtgC,KAAK01B,UAAW,CACnB,GAAK11B,KAAKugC,SAEH,GAAIvgC,KAAKwgC,oBAAoB/2B,OAClC,MAAOhK,QAAKe,UAACzB,SAAAgB,KAAUC,UAFvBA,MAAKygC,oBAKPzgC,MAAK41B,yBACL51B,KAAK0gC,cAAc5hC,SAIbuhC,qBAAA7/B,UAAYq0B,aAAtB,WACE,GAAA3yB,IAAmDlC,KAA3C0gC,cAAAx+B,GAAaw+B,cAAEF,oBAAAt+B,GAAmBs+B,mBACtCE,iBACFA,cAAcj5B,cACdzH,KAAK0gC,cAAgB,MAEnBF,sBACFA,oBAAoB/4B,cACpBzH,KAAKwgC,oBAAsB,MAE7BxgC,KAAKugC,QAAU,MAGPF,qBAAA7/B,UAAsBo1B,uBAAhC,WACE,GAAA1zB,IAA4DlC,KAApD0gC,cAAAx+B,GAAaw+B,cAAEH,QAAAr+B,GAAOq+B,QAAEC,oBAAAt+B,GAAmBs+B,mBAQnD,OAPAxgC,MAAK0gC,cAAgB,KACrB1gC,KAAKugC,QAAU,KACfvgC,KAAKwgC,oBAAsB,KAC3B/gC,OAAKe,UAACo1B,uBAAA71B,KAAwBC,MAC9BA,KAAK0gC,cAAgBA,cACrB1gC,KAAKugC,QAAUA,QACfvgC,KAAKwgC,oBAAsBA,oBACpBxgC,MAGDqgC,qBAAA7/B,UAAkBigC,mBAA1B,WACEzgC,KAAK0gC,cAAgB,GAAI5xB,WAAOS,OAChC,IAAMgxB,SAAUlhC,WAAQ8B,SAACnB,KAAK2c,UAAU3c,KAAK0gC,cAC7C,IAAIH,UAAYjhC,cAAW+B,YACzB,MAAO5B,QAAKe,UAACzB,SAAAgB,KAAUC,KAEzBA,MAAKugC,QAAUA,QACfvgC,KAAKwgC,oBAAsBl9B,oBAAiBW,kBAACjE,KAAMugC,UAEvDF,sBA3EyC98B,kBAAeW,wICvBxD,SAAA2Y,OAAyBlQ,OACvB,WADuB,KAAAA,QAAAA,OAAiB,GACjC,SAAC9L,QAA0B,MAAAA,QAAOqC,KAAK,GAAIy9B,eAAch0B,MAA9B9L,yOAvBpCkO,aAAA3P,WAA2B,kBAsBX0C,SAAK+a,MAEpBA,KAED,IAAA8jB,eAAA,WACE,QAAAA,eAAoBh0B,MACA9L,QADAb,KAAK2M,MAALA,MACA3M,KAAMa,OAANA,OAMtB,MAHE8/B,eAAAngC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIo/B,iBAAgBlgC,WAAYV,KAAK2M,MAAO3M,KAAKa,UAE7E8/B,iBAOAC,gBAAA,SAAAnhC,QACE,QAAAmhC,iBAAYj9B,YACQgJ,MACA9L,QAClBpB,OAAAM,KAAAC,KAAM2D,aAFY3D,KAAK2M,MAALA,MACA3M,KAAMa,OAANA,OActB,MAjBiCZ,WAAA2gC,gBAAanhC,QAM5CmhC,gBAAApgC,UAAKtB,MAAL,SAAMD,KACJ,IAAKe,KAAK01B,UAAW,CACnB,GAAAxzB,IAA8BlC,KAAtBa,OAAAqB,GAAMrB,OAAE8L,MAAAzK,GAAKyK,KACrB,IAAc,IAAVA,MACF,MAAOlN,QAAKe,UAACtB,MAAAa,KAAAC,KAAMf,IACV0N,QAAS,IAClB3M,KAAK2M,MAAQA,MAAQ,GAEvB9L,OAAOW,UAAUxB,KAAK41B,4BAG5BgL,iBAjBiC7xB,aAAUkC,sOCd3C,SAAA8L,WAA6BJ,UAC3B,MAAO,UAAC9b,QAA0B,MAAAA,QAAOqC,KAAK,GAAI29B,mBAAkBlkB,SAAlC9b,yOA1BpCiO,UAAA1P,WAAwB,gBAExBC,WAAAD,WAAyB,sBACzBE,cAAAF,WAA4B,yBAE5BmE,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BAkBlB0C,SAASib,UAExBA,SAED,IAAA8jB,mBAAA,WACE,QAAAA,mBAAsBlkB,SACA9b,QADAb,KAAQ2c,SAARA,SACA3c,KAAMa,OAANA,OAMxB,MAHEggC,mBAAArgC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIs/B,qBAAoBpgC,WAAYV,KAAK2c,SAAU3c,KAAKa,UAEpFggC,qBAOAC,oBAAA,SAAArhC,QAME,QAAAqhC,qBAAYn9B,YACQgZ,SACA9b,QAClBpB,OAAAM,KAAAC,KAAM2D,aAFY3D,KAAQ2c,SAARA,SACA3c,KAAMa,OAANA,OA8DtB,MAtEwCZ,WAAA6gC,oBAAqBrhC,QAY3DqhC,oBAAAtgC,UAAKtB,MAAL,SAAMD,KACJ,IAAKe,KAAK01B,UAAW,CAEnB,GAAIqL,QAAS/gC,KAAK+gC,OACdR,QAAevgC,KAAKugC,QACpBC,oBAAsBxgC,KAAKwgC,mBAE/B,IAAKD,QAQHvgC,KAAK+gC,OAAS,KACd/gC,KAAKwgC,oBAAsB,SATf,CAGZ,GAFAO,OAAS,GAAIjyB,WAAOS,SACpBgxB,QAAUlhC,WAAQ8B,SAACnB,KAAK2c,UAAUokB,WAClBzhC,cAAW+B,YACzB,MAAO5B,QAAKe,UAACtB,MAAAa,KAAAC,KAAMV,cAAW+B,YAACC,EAEjCk/B,qBAAsBl9B,oBAAiBW,kBAACjE,KAAMugC,SAMhDvgC,KAAK41B,yBAEL51B,KAAK+gC,OAASA,OACd/gC,KAAKugC,QAAUA,QACfvgC,KAAKwgC,oBAAsBA,oBAE3BO,OAAOjiC,KAAKG,OAIN6hC,oBAAAtgC,UAAYq0B,aAAtB,WACE,GAAA3yB,IAA4ClC,KAApC+gC,OAAA7+B,GAAM6+B,OAAEP,oBAAAt+B,GAAmBs+B,mBAC/BO,UACFA,OAAOt5B,cACPzH,KAAK+gC,OAAS,MAEZP,sBACFA,oBAAoB/4B,cACpBzH,KAAKwgC,oBAAsB,MAE7BxgC,KAAKugC,QAAU,MAGjBO,oBAAAtgC,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT,GAAAzD,IAAqDlC,KAA7C+gC,OAAA7+B,GAAM6+B,OAAER,QAAAr+B,GAAOq+B,QAAEC,oBAAAt+B,GAAmBs+B,mBAC5CxgC,MAAK+gC,OAAS,KACd/gC,KAAKugC,QAAU,KACfvgC,KAAKwgC,oBAAsB,KAE3BxgC,KAAK41B,yBAEL51B,KAAK+gC,OAASA,OACd/gC,KAAKugC,QAAUA,QACfvgC,KAAKwgC,oBAAsBA,oBAE3BxgC,KAAKa,OAAOW,UAAUxB,OAE1B8gC,qBAtEwCv9B,kBAAeW,4KCHvD,SAAA+Y,QAA0BN,UACxB,MAAO,UAAC9b,QAA0B,MAAAA,QAAOqC,KAAK,GAAI89B,gBAAhBrkB,2OAzCpCpZ,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BAsClB0C,SAAMmb,OAErBA,MAED,IAAA+jB,gBAAA,WACE,QAAAA,gBAAoBrkB,UAAA3c,KAAQ2c,SAARA,SAStB,MANEqkB,gBAAAxgC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,GAAMogC,kBAAmB,GAAIC,kBAAiBxgC,YACxC6P,aAAe1P,OAAOW,UAAUy/B,iBAEtC,OADA1wB,cAAa3O,IAAI0B,oBAAiBW,kBAACg9B,iBAAkBjhC,KAAK2c,WACnDpM,cAEXywB,kBAOAE,iBAAA,SAAAzhC,QAAA,QAAAyhC,oBAAqCzhC,OAAA2B,MAAApB,KAAqBM,WAEhDN,KAAQ0yB,UAAY,EAuB9B,MAzBqCzyB,WAAAihC,iBAAqBzhC,QAI9CyhC,iBAAA1gC,UAAKmyB,MAAf,SAAgB/zB,OACdoB,KAAKpB,MAAQA,MACboB,KAAK0yB,UAAW,GAGlBwO,iBAAA1gC,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT3F,KAAK02B,aAGPwK,iBAAA1gC,UAAcqF,eAAd,WACE7F,KAAK02B,aAGPwK,iBAAA1gC,UAASk2B,UAAT,WACM12B,KAAK0yB,WACP1yB,KAAK0yB,UAAW,EAChB1yB,KAAK2D,YAAY7E,KAAKkB,KAAKpB,SAGjCsiC,kBAzBqC39B,kBAAeW,oKCnBpD,SAAAiZ,YAA8BxS,OAAgB7K,WAC5C,WAD4C,KAAAA,YAAAA,UAAA2K,QAA6BG,OAClE,SAAC/J,QAA0B,MAAAA,QAAOqC,KAAK,GAAIi+B,oBAAmBx2B,OAAnC7K,aA0CpC,QAAAshC,sBAAoD3/B,OAC5C,GAAAf,YAAAe,MAAUf,WAAEiK,OAAAlJ,MAAMkJ,MACxBjK,YAAW6E,aACXvF,KAAKW,SAASc,MAAOkJ,uOA1FvBoE,aAAA3P,WAA2B,mBAG3BqL,QAAArL,WAAsB,uBAyCN0C,SAAUqb,WAEzBA,UAED,IAAAgkB,oBAAA,WACE,QAAAA,oBAAoBx2B,OACA7K,WADAE,KAAM2K,OAANA,OACA3K,KAASF,UAATA,UAMtB,MAHEqhC,oBAAA3gC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAI6/B,sBAAqB3gC,WAAYV,KAAK2K,OAAQ3K,KAAKF,aAEnFqhC,sBAOAE,qBAAA,SAAA5hC,QAIE,QAAA4hC,sBAAY19B,YACQgH,OACA7K,WAClBL,OAAAM,KAAAC,KAAM2D,aAFY3D,KAAM2K,OAANA,OACA3K,KAASF,UAATA,UAJpBE,KAAQ0yB,UAAY,EAMlB1yB,KAAK4B,IAAI9B,UAAUa,SAASygC,qBAAsBz2B,QAAUjK,WAAYV,KAAM2K,OAAMA,UAcxF,MAtBsC1K,WAAAohC,qBAAa5hC,QAWvC4hC,qBAAA7gC,UAAKmyB,MAAf,SAAgB/zB,OACdoB,KAAK+2B,UAAYn4B,MACjBoB,KAAK0yB,UAAW,GAGlB2O,qBAAA7gC,UAAU+E,WAAV,WACMvF,KAAK0yB,WACP1yB,KAAK0yB,UAAW,EAChB1yB,KAAK2D,YAAY7E,KAAKkB,KAAK+2B,aAGjCsK,sBAtBsCtyB,aAAUkC,wLCJhD,SAAAsM,eAAiCC,UACAC,UAC/B,MAAO,UAAC5c,QAA0B,MAAAA,QAAOqC,KAAK,GAAIo+B,uBAAsB9jB,UAAtCC,2OA5DpC1O,aAAA3P,WAA2B,mBAC3BC,WAAAD,WAAyB,sBACzBE,cAAAF,WAA4B,wBAwDZ0C,SAAayb,cAG5BA,aAED,IAAA+jB,uBAAA,WACE,QAAAA,uBAAoB9jB,UACAC,UADAzd,KAASwd,UAATA,UACAxd,KAAQyd,SAARA,SAMtB,MAHE6jB,uBAAA9gC,UAAIT,KAAJ,SAAKW,WAAiCG,QACpC,MAAOA,QAAOW,UAAU,GAAI+/B,yBAAwB7gC,WAAYV,KAAKwd,UAAWxd,KAAKyd,YAEzF6jB,wBARax/B,SAAqBw/B,sBAQjCA,qBAOD,IAAAC,yBAAA,SAAA9hC,QAKE,QAAA8hC,yBAAY59B,YACQ6Z,UACAC,UAClBhe,OAAAM,KAAAC,KAAM2D,aAFY3D,KAASwd,UAATA,UACAxd,KAAQyd,SAARA,SANZzd,KAAEkC,MACFlC,KAAE2rB,MACF3rB,KAAYwhC,cAAG,EAMrBxhC,KAAK4B,IAAI4b,UAAUhc,UAAU,GAAIigC,kCAAiC99B,YAAa3D,QAsDnF,MA/DmDC,WAAAshC,wBAAa9hC,QAYpD8hC,wBAAA/gC,UAAKmyB,MAAf,SAAgB/zB,OACVoB,KAAKwhC,cAAmC,IAAnBxhC,KAAK2rB,GAAGprB,OAC/BP,KAAK0hC,MAAK,IAEV1hC,KAAKkC,GAAG2hB,KAAKjlB,OACboB,KAAK2hC,gBAIFJ,wBAAA/gC,UAAS2J,UAAhB,WACMnK,KAAKwhC,aACPxhC,KAAK0hC,KAAwB,IAAnB1hC,KAAKkC,GAAG3B,QAAmC,IAAnBP,KAAK2rB,GAAGprB,QAE1CP,KAAKwhC,cAAe,GAIxBD,wBAAA/gC,UAAWmhC,YAAX,WAEE,IADA,GAAAC,IAAiC5hC,KAAzBkC,GAAA0/B,GAAE1/B,GAAEypB,GAAAiW,GAAEjW,GAAElO,SAAAmkB,GAAQnkB,SACjBvb,GAAG3B,OAAS,GAAKorB,GAAGprB,OAAS,GAAG,CACrC,GAAIyoB,GAAI9mB,GAAGC,QACP8mB,EAAI0C,GAAGxpB,QACP0/B,UAAW,CACXpkB,WACFokB,SAAWxiC,WAAQ8B,SAACsc,UAAUuL,EAAGC,MAChB3pB,cAAW+B,aAC1BrB,KAAK2D,YAAYzE,MAAMI,cAAW+B,YAACC,GAGrCugC,SAAW7Y,IAAMC,EAEd4Y,UACH7hC,KAAK0hC,MAAK,KAKhBH,wBAAA/gC,UAAIkhC,KAAJ,SAAK9iC,OACK,GAAA+E,aAAA3D,KAAW2D,WACnBA,aAAY7E,KAAKF,OACjB+E,YAAY5E,YAGdwiC,wBAAA/gC,UAAKshC,MAAL,SAAMljC,OACAoB,KAAKwhC,cAAmC,IAAnBxhC,KAAKkC,GAAG3B,OAC/BP,KAAK0hC,MAAK,IAEV1hC,KAAK2rB,GAAG9H,KAAKjlB,OACboB,KAAK2hC,gBAGXJ,yBA/DmDxyB,aAAUkC,WAAhDnP,SAAuBy/B,wBA+DnCA,uBAED,IAAAE,kCAAA,SAAAhiC,QACE,QAAAgiC,kCAAY99B,YAAkC40B,QAC5C94B,OAAAM,KAAAC,KAAM2D,aADsC3D,KAAMu4B,OAANA,OAehD,MAhBqDt4B,WAAAwhC,iCAAahiC,QAKtDgiC,iCAAAjhC,UAAKmyB,MAAf,SAAgB/zB,OACdoB,KAAKu4B,OAAOuJ,MAAMljC,QAGV6iC,iCAAAjhC,UAAMuD,OAAhB,SAAiB9E,KACfe,KAAKu4B,OAAOr5B,MAAMD,MAGVwiC,iCAAAjhC,UAAS2J,UAAnB,WACEnK,KAAKu4B,OAAOpuB,aAEhBs3B,kCAhBqD1yB,aAAUkC,mcClJ/DnC,UAAA1P,WAA2C,gBAE3CD,aAAAC,WAA2B,mBAC3B2P,aAAA3P,WAA2B,mBAC3B6H,eAAA7H,WAA4C,qBAC5C2iC,WAAA3iC,WAAgD,2BAKhD4iC,sBAAA,SAAAviC,QAOE,QAAAuiC,uBAAsBnhC,OACAohC,gBACpBxiC,OAAAM,KAAOC,MAFaA,KAAMa,OAANA,OACAb,KAAciiC,eAAdA,eALZjiC,KAASkiC,UAAW,EAE9BliC,KAAWmiC,aAAG,EAuChB,MA5C8CliC,WAAA+hC,sBAAaviC,QAY/CuiC,sBAAAxhC,UAAUC,WAApB,SAAqBC,YACnB,MAAOV,MAAKoiC,aAAa5gC,UAAUd,aAG3BshC,sBAAAxhC,UAAU4hC,WAApB,WACE,GAAMvjC,SAAUmB,KAAKqiC,QAIrB,OAHKxjC,WAAWA,QAAQ62B,YACtB11B,KAAKqiC,SAAWriC,KAAKiiC,kBAEhBjiC,KAAKqiC,UAGdL,sBAAAxhC,UAAO8hC,QAAP,WACE,GAAIC,YAAaviC,KAAKwiC,WAatB,OAZKD,cACHviC,KAAKmiC,aAAc,EACnBI,WAAaviC,KAAKwiC,YAAc,GAAIv7B,gBAAYa,aAChDy6B,WAAW3gC,IAAI5B,KAAKa,OACjBW,UAAU,GAAIihC,uBAAsBziC,KAAKoiC,aAAcpiC,QACtDuiC,WAAW94B,QACbzJ,KAAKwiC,YAAc,KACnBD,WAAat7B,eAAYa,aAACg4B,OAE1B9/B,KAAKwiC,YAAcD,YAGhBA,YAGTP,sBAAAxhC,UAAQkiC,SAAR,WACE,MAAOX,YAAmBW,WAAG1iC,OAEjCgiC,uBA5C8C7iC,aAAU0C,WAA3CC,SAAqBkgC,sBA4CjCA,qBAED,IAAMW,kBAAwBX,sBAAsBxhC,SAEvCsB,SAA+B8gC,iCAC1C9yB,UAAYlR,MAAO,MACnBsjC,WAAatjC,MAAO,EAAGikC,UAAU,GACjCR,UAAYzjC,MAAO,KAAMikC,UAAU,GACnCL,aAAe5jC,MAAO,KAAMikC,UAAU,GACtCpiC,YAAc7B,MAAO+jC,iBAAiBliC,YACtC0hC,aAAevjC,MAAO+jC,iBAAiBR,YAAaU,UAAU,GAC9DT,YAAcxjC,MAAO+jC,iBAAiBP,YACtCE,SAAW1jC,MAAO+jC,iBAAiBL,SACnCI,UAAY9jC,MAAO+jC,iBAAiBD,UAGtC,IAAAD,uBAAA,SAAAhjC,QACE,QAAAgjC,uBAAY9+B,YACQm/B,aAClBrjC,OAAAM,KAAAC,KAAM2D,aADY3D,KAAW8iC,YAAXA,YAyBtB,MA3BuC7iC,WAAAwiC,sBAAoBhjC,QAK/CgjC,sBAAAjiC,UAAMuD,OAAhB,SAAiB9E,KACfe,KAAK60B,eACLp1B,OAAKe,UAACuD,OAAAhE,KAAAC,KAAOf,MAELwjC,sBAAAjiC,UAAS2J,UAAnB,WACEnK,KAAK8iC,YAAYX,aAAc,EAC/BniC,KAAK60B,eACLp1B,OAAKe,UAAC2J,UAAApK,KAAWC,OAETyiC,sBAAAjiC,UAAYq0B,aAAtB,WACE,GAAMiO,aAAmB9iC,KAAK8iC,WAC9B,IAAIA,YAAa,CACf9iC,KAAK8iC,YAAc,IACnB,IAAMP,YAAaO,YAAYN,WAC/BM,aAAYZ,UAAY,EACxBY,YAAYT,SAAW,KACvBS,YAAYN,YAAc,KACtBD,YACFA,WAAW96B,gBAInBg7B,uBA3BuC3zB,UAAiBi0B,mBAgDxDC,oBAnBA,WACE,QAAAC,kBAAoBH,aAAA9iC,KAAW8iC,YAAXA,YAEpBG,iBAAAziC,UAAIT,KAAJ,SAAKW,WAA2BG,QAEtB,GAAAiiC,aAAA9iC,KAAW8iC,WACZA,aAAaZ,WAEpB,IAAMgB,YAAa,GAAIF,oBAAmBtiC,WAAYoiC,aAChDvyB,aAAe1P,OAAOW,UAAU0hC,WAMtC,OAJKA,YAAWz5B,SACPy5B,WAAYX,WAAaO,YAAYR,WAGvC/xB,iBAIX,SAAA9Q,QAIE,QAAAujC,oBAAYr/B,YACQm/B,aAClBrjC,OAAAM,KAAAC,KAAM2D,aADY3D,KAAW8iC,YAAXA,YAwDtB,MA7DoC7iC,WAAA+iC,mBAAavjC,QASrCujC,mBAAAxiC,UAAYq0B,aAAtB,WAEU,GAAAiO,aAAA9iC,KAAW8iC,WACnB,KAAKA,YAEH,YADA9iC,KAAKuiC,WAAa,KAIpBviC,MAAK8iC,YAAc,IACnB,IAAMJ,UAAkBI,YAAaZ,SACrC,IAAIQ,UAAY,EAEd,YADA1iC,KAAKuiC,WAAa,KAKpB,IADOO,YAAaZ,UAAYQ,SAAW,EACvCA,SAAW,EAEb,YADA1iC,KAAKuiC,WAAa,KA2BZ,IAAAA,YAAAviC,KAAUuiC,WACZY,iBAA0BL,YAAaN,WAC7CxiC,MAAKuiC,WAAa,MAEdY,kBAAsBZ,YAAcY,mBAAqBZ,YAC3DY,iBAAiB17B,eAGvBu7B,oBA7DoCj0B,aAAUkC,8JCtF9C,SAAA4J,WAAgCC,wBACAnb,UAC9B,MAAO,UAAmCkB,QACxC,GAAIohC,eASJ,IAPEA,eADqC,kBAA5BnnB,yBAC0BA,wBAElB,WACf,MAAmBA,0BAIC,kBAAbnb,UACT,MAAOkB,QAAOqC,KAAK,GAAIkgC,mBAAkBnB,eAAgBtiC,UAG3D,IAAMmjC,aAAmB57B,OAAOhH,OAAOW,OAAQwiC,wBAA+BT,gCAI9E,OAHAE,aAAYjiC,OAASA,OACrBiiC,YAAYb,eAAiBA,eAEKa,gBAhDtCO,qCAAAjkC,WAAuE,yCA4BvD0C,SAAS+Y,UAsBxBA,SAED,IAAAuoB,mBAAA,WACE,QAAAA,mBAAoBnB,eACAtiC,UADAK,KAAciiC,eAAdA,eACAjiC,KAAQL,SAARA,SAStB,MAPEyjC,mBAAA5iC,UAAIT,KAAJ,SAAKW,WAA2BG,QACtB,GAAAlB,UAAAK,KAAQL,SACVd,QAAUmB,KAAKiiC,iBACf1xB,aAAe5Q,SAASd,SAAS2C,UAAUd,WAEjD,OADA6P,cAAa3O,IAAIf,OAAOW,UAAU3C,UAC3B0R,cAEX6yB,oBAXathC,SAAiBshC,kBAW7BA,4IC5DD,SAAAV,YACE,MAAO,UAAkC7hC,QACvC,MAAOA,QAAOqC,KAAK,GAAI+/B,kBAAiBpiC,yOAR5CkO,aAAA3P,WAA2B,kBAMX0C,SAAQ4gC,SAIvBA,QAED,IAAAO,kBAAA,WACE,QAAAA,kBAAoBH,aAAA9iC,KAAW8iC,YAAXA,YAgBtB,MAdEG,kBAAAziC,UAAIT,KAAJ,SAAKW,WAA2BG,QAEtB,GAAAiiC,aAAA9iC,KAAW8iC,WACZA,aAAaZ,WAEpB,IAAMgB,YAAa,GAAIF,oBAAmBtiC,WAAYoiC,aAChDvyB,aAAe1P,OAAOW,UAAU0hC,WAMtC,OAJKA,YAAWz5B,SACPy5B,WAAYX,WAAaO,YAAYR,WAGvC/xB,cAEX0yB,oBAEAD,mBAAA,SAAAvjC,QAIE,QAAAujC,oBAAYr/B,YACQm/B,aAClBrjC,OAAAM,KAAAC,KAAM2D,aADY3D,KAAW8iC,YAAXA,YAwDtB,MA7DoC7iC,WAAA+iC,mBAAavjC,QASrCujC,mBAAAxiC,UAAYq0B,aAAtB,WAEU,GAAAiO,aAAA9iC,KAAW8iC,WACnB,KAAKA,YAEH,YADA9iC,KAAKuiC,WAAa,KAIpBviC,MAAK8iC,YAAc,IACnB,IAAMJ,UAAkBI,YAAaZ,SACrC,IAAIQ,UAAY,EAEd,YADA1iC,KAAKuiC,WAAa,KAKpB,IADOO,YAAaZ,UAAYQ,SAAW,EACvCA,SAAW,EAEb,YADA1iC,KAAKuiC,WAAa,KA2BZ,IAAAA,YAAAviC,KAAUuiC,WACZY,iBAA0BL,YAAaN,WAC7CxiC,MAAKuiC,WAAa,MAEdY,kBAAsBZ,YAAcY,mBAAqBZ,YAC3DY,iBAAiB17B,eAGvBu7B,oBA7DoCj0B,aAAUkC,qLCzB9C,SAAAqyB,uBACE,MAAO,IAAIx0B,WAAOS,QAepB,QAAAoO,SACE,MAAO,UAAC9c,QAA0B,MAAAkhC,YAAQW,WAAG3nB,YAASF,UAACyoB,qBAArBziC,aAvBpCka,yBAAA3b,WAA0B,6BAC1B2iC,WAAA3iC,WAAyB,2BACzB0P,UAAA1P,WAAwB,eAoBR0C,SAAK6b,MAEpBA,8WCzBDqK,cAAA5oB,WAA4B,8BAS5BmkC,YAAA,SAAA9jC,QAEE,QAAA8jC,aAAsBzjC,UACA0oB,MACpB/oB,OAAAM,KAAAC,KAAMF,UAAW0oB,MAFGxoB,KAASF,UAATA,UACAE,KAAIwoB,KAAJA,KA8BxB,MAjCoCvoB,WAAAsjC,YAAc9jC,QAOzC8jC,YAAA/iC,UAAQG,SAAf,SAAgBc,MAAWwT,OACzB,WADyB,KAAAA,QAAAA,MAAiB,GACtCA,MAAQ,EACHxV,OAAKe,UAACG,SAAAZ,KAAAC,KAASyB,MAAOwT,QAE/BjV,KAAKiV,MAAQA,MACbjV,KAAKyB,MAAQA,MACbzB,KAAKF,UAAUsnB,MAAMpnB,MACdA,OAGFujC,YAAA/iC,UAAO8nB,QAAd,SAAe7mB,MAAUwT,OACvB,MAAQA,OAAQ,GAAKjV,KAAKyJ,OACxBhK,OAAKe,UAAC8nB,QAAAvoB,KAAAC,KAAQyB,MAAOwT,OACrBjV,KAAK+oB,SAAStnB,MAAOwT,QAGfsuB,YAAA/iC,UAAcmoB,eAAxB,SAAyB7oB,UAA2B4oB,GAAUzT,OAI5D,WAJ4D,KAAAA,QAAAA,MAAiB,GAI9D,OAAVA,OAAkBA,MAAQ,GAAiB,OAAVA,OAAkBjV,KAAKiV,MAAQ,EAC5DxV,OAAKe,UAACmoB,eAAA5oB,KAAAC,KAAeF,UAAW4oB,GAAIzT,OAGtCnV,UAAUsnB,MAAMpnB,OAE3BujC,aAjCoCvb,cAAWkB,YAAlCpnB,SAAWyhC,YAiCvBA,0XC1CDtb,iBAAA7oB,WAA+B,iCAE/BokC,eAAA,SAAA/jC,QAAA,QAAA+jC,kBAAoC/jC,OAAA2B,MAAApB,KAAcM,WAClD,MADoCL,WAAAujC,eAAc/jC,QAClD+jC,gBADoCvb,iBAAcM,eAArCzmB,SAAc0hC,eAC1BA,qLCHDC,2BAAArkC,WAA4B,+BAC5BskC,iBAAAtkC,WAA+B,gCAgElB0C,SAAKkP,MAAG,GAAI0yB,kBAAcF,eAACC,cAAWF,oeCjEnDz0B,UAAA1P,WAAwB,gBAExBukC,QAAAvkC,WAAsB,wBAEtB6H,eAAA7H,WAA6B,qBAC7B6b,YAAA7b,WAAoC,4BACpCkgC,0BAAAlgC,WAAwC,qCACxCwkC,sBAAAxkC,WAAoC,4BAIpCsQ,cAAA,SAAAjQ,QAKE,QAAAiQ,eAAY0C,WACA2J,WACQjc,eAFR,KAAAsS,aAAAA,WAAqBO,OAAOC,uBAC5B,KAAAmJ,aAAAA,WAAqBpJ,OAAOC,mBAEtCnT,OAAAM,KAAOC,MADWA,KAASF,UAATA,UANZE,KAAO6jC,WAQb7jC,KAAK8jC,YAAc1xB,WAAa,EAAI,EAAIA,WACxCpS,KAAK+jC,YAAchoB,WAAa,EAAI,EAAIA,WA6E5C,MAvFsC9b,WAAAyP,cAAUjQ,QAa9CiQ,cAAAlP,UAAI1B,KAAJ,SAAKF,OACH,GAAMmlB,KAAM/jB,KAAKgkC,SACjBhkC,MAAK6jC,QAAQhgB,KAAK,GAAIogB,aAAYlgB,IAAKnlB,QACvCoB,KAAKkkC,2BACLzkC,OAAKe,UAAC1B,KAAAiB,KAAAC,KAAKpB,QAGH8Q,cAAAlP,UAAUC,WAApB,SAAqBC,YACnB,GAEI6P,cAFEszB,QAAU7jC,KAAKkkC,2BACfpkC,UAAYE,KAAKF,SAGvB,IAAIE,KAAKyJ,OACP,KAAM,IAAI61B,2BAAuBK,uBACxB3/B,MAAKy/B,SACdlvB,aAAetJ,eAAYa,aAACg4B,MACnB9/B,KAAK01B,UACdnlB,aAAetJ,eAAYa,aAACg4B,OAE5B9/B,KAAK2R,UAAUkS,KAAKnjB,YACpB6P,aAAe,GAAIqzB,uBAAmBO,oBAACnkC,KAAMU,aAG3CZ,WACFY,WAAWkB,IAAIlB,WAAa,GAAIua,aAAmBmpB,oBAAI1jC,WAAYZ,WAIrE,KAAK,GADCkF,KAAM6+B,QAAQtjC,OACX6E,EAAI,EAAGA,EAAIJ,MAAQtE,WAAW+I,OAAQrE,IAC7C1E,WAAW5B,KAAK+kC,QAAQz+B,GAAGxG,MAS7B,OANIoB,MAAKy/B,SACP/+B,WAAWxB,MAAMc,KAAK0/B,aACb1/B,KAAK01B,WACdh1B,WAAW3B,WAGNwR,cAGTb,cAAAlP,UAAOwjC,QAAP,WACE,OAAQhkC,KAAKF,WAAa6jC,QAAK3yB,OAAE+S,OAG3BrU,cAAAlP,UAAwB0jC,yBAAhC,WAYE,IAXA,GAAMngB,KAAM/jB,KAAKgkC,UACXF,YAAc9jC,KAAK8jC,YACnBC,YAAc/jC,KAAK+jC,YACnBF,QAAU7jC,KAAK6jC,QAEjBQ,YAAcR,QAAQtjC,OACtB+jC,YAAc,EAKXA,YAAcD,eACdtgB,IAAM8f,QAAQS,aAAa/M,KAAQwM,cAGxCO,aAWF,OARID,aAAcP,cAChBQ,YAAc1U,KAAKlW,IAAI4qB,YAAaD,YAAcP,cAGhDQ,YAAc,GAChBT,QAAQlQ,OAAO,EAAG2Q,aAGbT,SAEXn0B,eAvFsCZ,UAAOS,QAAhCzN,SAAa4N,cAuFzBA,aAED,IAAAu0B,aAAA,WACE,QAAAA,aAAmB1M,KAAqB34B,OAArBoB,KAAIu3B,KAAJA,KAAqBv3B,KAAKpB,MAALA,MAE1C,MAAAqlC,gJC5FA,SAAApmB,aAA+BzL,WAAqB2J,WAAqBjc,WACvE,MAAO,UAACe,QAA0B,MAAAA,QAAOqC,KAAKqhC,oBAAoBnyB,WAAY2J,WAA5Cjc,aAGpC,QAAAykC,qBAAgCnyB,WAAqB2J,WAAqBjc,WACxE,GAAIjB,SAEA0R,aADAmyB,SAAW,EAEXjD,UAAW,EACX+E,YAAa,CAEjB,OAAO,UAAmD3jC,QACxD6hC,WACK7jC,UAAW4gC,WACdA,UAAW,EACX5gC,QAAU,GAAImQ,iBAAaU,cAAI0C,WAAY2J,WAAYjc,WACvDyQ,aAAA1P,OAAsBW,WACpB1C,KAAA,SAAKF,OAASC,QAAQC,KAAKF,QAC3BM,MAAA,SAAMD,KACJwgC,UAAW,EACX5gC,QAAQK,MAAMD,MAEhBF,SAAA,WACEylC,YAAa,EACb3lC,QAAQE,cAKd,IAAM4G,UAAW9G,QAAQ2C,UAAUxB,KAEnC,OAAO,YACL0iC,WACA/8B,SAAS8B,cACL8I,cAA6B,IAAbmyB,UAAkB8B,YACpCj0B,aAAa9I,mBA7CrBuH,6BAAA5P,WAA8B,sBAUd0C,SAAW+b,YAE1BA,kVCHD6d,WAAA,SAAAj8B,QACE,QAAAi8B,cACE,GAAMz8B,KAAWQ,OAAAM,KAAAC,KAAM,0BAChBA,MAAMykC,KAAOxlC,IAAIwlC,KAAO,aACxBzkC,KAAM0kC,MAAQzlC,IAAIylC,MAClB1kC,KAAMsjB,QAAUrkB,IAAIqkB,QAE/B,MAPgCrjB,WAAAy7B,WAAKj8B,QAOrCi8B,YAPgCjsB,MAAnB3N,SAAU45B,WAOtBA,0JCQD,SAAA3d,QAA0B3J,WACxB,MAAO,UAACvT,QAA0B,MAAAA,QAAOqC,KAAK,GAAIyhC,gBAAevwB,UAA/BvT,yOAxBpCkO,aAAA3P,WAA2B,mBAE3Bg8B,aAAAh8B,WAA2B,uBAqBX0C,SAAMic,OAErBA,MAED,IAAA4mB,gBAAA,WACE,QAAAA,gBAAoBvwB,UACAvT,QADAb,KAASoU,UAATA,UACApU,KAAMa,OAANA,OAMtB,MAHE8jC,gBAAAnkC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIojC,kBAAiBlkC,WAAYV,KAAKoU,UAAWpU,KAAKa,UAElF8jC,kBAOAC,iBAAA,SAAAnlC,QAKE,QAAAmlC,kBAAYjhC,YACQyQ,UACAvT,QAClBpB,OAAAM,KAAAC,KAAM2D,aAFY3D,KAASoU,UAATA,UACApU,KAAMa,OAANA,OANZb,KAAS6kC,WAAY,EAErB7kC,KAAK8K,MAAW,EA+C1B,MAlDkC7K,WAAA2kC,iBAAanlC,QAWrCmlC,iBAAApkC,UAAgBskC,iBAAxB,SAAyBlmC,OACnBoB,KAAK6kC,UACP7kC,KAAK2D,YAAYzE,MAAM,4CAEvBc,KAAK6kC,WAAY,EACjB7kC,KAAK+kC,YAAcnmC,QAIbgmC,iBAAApkC,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAMkM,OAAQ9K,KAAK8K,OAEf9K,MAAKoU,UACPpU,KAAKy6B,QAAQ77B,MAAOkM,OAEpB9K,KAAK8kC,iBAAiBlmC,QAIlBgmC,iBAAApkC,UAAOi6B,QAAf,SAAgB77B,MAAUkM,OACxB,IACM9K,KAAKoU,UAAUxV,MAAOkM,MAAO9K,KAAKa,SACpCb,KAAK8kC,iBAAiBlmC,OAExB,MAAOK,KACPe,KAAK2D,YAAYzE,MAAMD,OAIjB2lC,iBAAApkC,UAAS2J,UAAnB,WACE,GAAMxG,aAAc3D,KAAK2D,WAErB3D,MAAK8K,MAAQ,GACfnH,YAAY7E,KAAKkB,KAAK6kC,UAAY7kC,KAAK+kC,gBAAc3kC,IACrDuD,YAAY5E,YAEZ4E,YAAYzE,MAAM,GAAIk8B,cAAUM,aAGtCkJ,kBAlDkC71B,aAAUkC,kIC3B5C,SAAAgN,MAAwBtR,OACtB,MAAO,UAAC9L,QAA0B,MAAAA,QAAOqC,KAAK,GAAI8hC,cAAhBr4B,wOAjBpCoC,aAAA3P,WAA2B,kBAgBX0C,SAAImc,KAEnBA,IAED,IAAA+mB,cAAA,WACE,QAAAA,cAAoB//B,OAAAjF,KAAKiF,MAALA,MAMtB,MAHE+/B,cAAAxkC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIyjC,gBAAevkC,WAAYV,KAAKiF,SAEhE+/B,gBAOAC,eAAA,SAAAxlC,QAGE,QAAAwlC,gBAAYthC,YAAoCsB,OAC9CxF,OAAAM,KAAAC,KAAM2D,aADwC3D,KAAKiF,MAALA,MAFhDjF,KAAK2M,MAAW,EAWlB,MAZgC1M,WAAAglC,eAAaxlC,QAOjCwlC,eAAAzkC,UAAKmyB,MAAf,SAAgBniB,KACRxQ,KAAK2M,MAAQ3M,KAAKiF,OACtBjF,KAAK2D,YAAY7E,KAAK0R,IAG5By0B,gBAZgCl2B,aAAUkC,0KCI1C,SAAAkN,UAA4BxR,OAC1B,MAAO,UAAC9L,QAA0B,MAAAA,QAAOqC,KAAK,GAAIgiC,kBAAhBv4B,wOAvCpCoC,aAAA3P,WAA2B,mBAC3By6B,0BAAAz6B,WAAwC,oCAqCxB0C,SAAQqc,SAEvBA,QAED,IAAA+mB,kBAAA,WACE,QAAAA,kBAAoBC,YAClB,GADkBnlC,KAAUmlC,WAAVA,WACdnlC,KAAKmlC,WAAa,EACpB,KAAM,IAAItL,2BAAuBC,wBAavC,MATEoL,kBAAA1kC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAwB,KAApBb,KAAKmlC,WAGAtkC,OAAOW,UAAU,GAAIuN,cAAUkC,WAACvQ,aAEhCG,OAAOW,UAAU,GAAI4jC,oBAAmB1kC,WAAYV,KAAKmlC,cAGtED,oBAOAE,mBAAA,SAAA3lC,QAIE,QAAA2lC,oBAAYzhC,YAAoCwhC,YAC9C1lC,OAAAM,KAAAC,KAAM2D,aADwC3D,KAAUmlC,WAAVA,WAFxCnlC,KAAM4M,OAAW,EAIvB5M,KAAKqlC,MAAQ,GAAIlgC,OAASggC,YAkB9B,MAxBoCllC,WAAAmlC,mBAAa3lC,QASrC2lC,mBAAA5kC,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAM0mC,WAAYtlC,KAAKmlC,WACjBx4B,MAAQ3M,KAAK4M,QAEnB,IAAID,MAAQ24B,UACVtlC,KAAKqlC,MAAM14B,OAAS/N,UACf,CACL,GAAM2mC,cAAe54B,MAAQ24B,UACvBE,KAAOxlC,KAAKqlC,MACZI,SAAWD,KAAKD,aAEtBC,MAAKD,cAAgB3mC,MACrBoB,KAAK2D,YAAY7E,KAAK2mC,YAG5BL,oBAxBoCr2B,aAAUkC,0KC7C9C,SAAAoN,WAA6B1B,UAC3B,MAAO,UAAC9b,QAA0B,MAAAA,QAAOqC,KAAK,GAAIwiC,mBAAhB/oB,2OAlBpCpZ,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BAelB0C,SAASuc,UAExBA,SAED,IAAAqnB,mBAAA,WACE,QAAAA,mBAAoB/oB,UAAA3c,KAAQ2c,SAARA,SAMtB,MAHE+oB,mBAAAllC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAImkC,qBAAoBjlC,WAAYV,KAAK2c,YAErE+oB,qBAOAC,oBAAA,SAAAlmC,QAKE,QAAAkmC,qBAAYhiC,YACAgZ,UACVld,OAAAM,KAAAC,KAAM2D,aALA3D,KAAQ0yB,UAAY,EACpB1yB,KAAc4lC,gBAAY,EAKhC5lC,KAAK4B,IAAI0B,oBAAiBW,kBAACjE,KAAM2c,WA6BrC,MArCwC1c,WAAA0lC,oBAAqBlmC,QAWjDkmC,oBAAAnlC,UAAKmyB,MAAf,SAAgB/zB,OACVoB,KAAK0yB,UACPjzB,OAAKe,UAACmyB,MAAA5yB,KAAAC,KAAMpB,QAIN+mC,oBAAAnlC,UAAS2J,UAAnB,WACMnK,KAAK4lC,eACPnmC,OAAKe,UAAC2J,UAAApK,KAAWC,MAEjBA,KAAKyH,eAITk+B,oBAAAnlC,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT3F,KAAK0yB,UAAW,GAGlBiT,oBAAAnlC,UAAcqF,eAAd,WACE7F,KAAK4lC,gBAAiB,EAClB5lC,KAAK01B,WACPj2B,OAAKe,UAAC2J,UAAApK,KAAWC,OAGvB2lC,qBArCwCpiC,kBAAeW,4ICrBvD,SAAAqa,WAA6BnK,WAC3B,MAAO,UAACvT,QAA0B,MAAAA,QAAOqC,KAAK,GAAI2iC,mBAAhBzxB,4OAjBpCrF,aAAA3P,WAA2B,kBAgBX0C,SAASyc,UAExBA,SAED,IAAAsnB,mBAAA,WACE,QAAAA,mBAAoBzxB,WAAApU,KAASoU,UAATA,UAMtB,MAHEyxB,mBAAArlC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIskC,qBAAoBplC,WAAYV,KAAKoU,aAErEyxB,qBAOAC,oBAAA,SAAArmC,QAIE,QAAAqmC,qBAAYniC,YACQyQ,WAClB3U,OAAAM,KAAAC,KAAM2D,aADY3D,KAASoU,UAATA,UAJZpU,KAAQ+lC,UAAY,EACpB/lC,KAAK8K,MAAW,EA0B1B,MA5BqC7K,WAAA6lC,oBAAarmC,QAStCqmC,oBAAAtlC,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAM+E,aAAc3D,KAAK2D,WACrB3D,MAAK+lC,UACP/lC,KAAKgmC,iBAAiBpnC,OAGnBoB,KAAK+lC,UACRpiC,YAAY7E,KAAKF,QAIbknC,oBAAAtlC,UAAgBwlC,iBAAxB,SAAyBpnC,OACvB,IACE,GAAMoF,QAAShE,KAAKoU,UAAUxV,MAAOoB,KAAK8K,QAC1C9K,MAAK+lC,SAAWlX,QAAQ7qB,QACxB,MAAO/E,KACPe,KAAK2D,YAAYzE,MAAMD,OAG7B6mC,qBA5BqC/2B,aAAUkC,qJCpC/CjO,+BAAA5D,WAAkC,mCAErB0C,SAAE+J,GAAG7I,kBAAeC,gBAAC4I,wJC8GlC,SAAAnN,cAAyBC,KACf,GAAAC,OAAAD,IAAKC,MAAE8B,WAAA/B,IAAU+B,UACpBA,YAAW+I,SACd/I,WAAW5B,KAAKF,OAChB8B,WAAW3B,YAQf,QAAAC,eAA0BL,KAChB,GAAAM,KAAAN,IAAGM,IAAEyB,WAAA/B,IAAU+B,UAClBA,YAAW+I,QACd/I,WAAWxB,MAAMD,oOA/HrB4P,OAAAzP,WAAqB,kBAErBD,aAAAC,WAA2B,mBAS3B2J,kBAAA,SAAAtJ,QAkCE,QAAAsJ,mBAAoBk9B,QAAiCnmC,WACnDL,OAAAM,KAAOC,MADWA,KAAOimC,QAAPA,QAAiCjmC,KAASF,UAATA,UA6DvD,MA/F0CG,WAAA8I,kBAAatJ,QA8B9CsJ,kBAAM7I,OAAb,SAAiB+lC,QAAyBnmC,WACxC,MAAO,IAAIiJ,mBAAkBk9B,QAASnmC,YAO9BiJ,kBAAAvI,UAAUC,WAApB,SAAqBC,YAArB,GAAA2H,OAwDCrI,KAvDOimC,QAAUjmC,KAAKimC,QACfnmC,UAAYE,KAAKF,SAEvB,IAAiB,MAAbA,UACEE,KAAKkmC,UACFxlC,WAAW+I,SACd/I,WAAW5B,KAAKkB,KAAKpB,OACrB8B,WAAW3B,YAGbknC,QAAQE,KACN,SAACvnC,OACCyJ,MAAKzJ,MAAQA,MACbyJ,MAAK69B,WAAY,EACZxlC,WAAW+I,SACd/I,WAAW5B,KAAKF,OAChB8B,WAAW3B,aAGf,SAACE,KACMyB,WAAW+I,QACd/I,WAAWxB,MAAMD,OAItBknC,KAAK,KAAM,SAAAlnC,KAEV4P,OAAIF,KAACuhB,WAAW,WAAQ,KAAMjxB,aAIlC,IAAIe,KAAKkmC,WACP,IAAKxlC,WAAW+I,OACd,MAAO3J,WAAUa,SAASjC,aAAc,GAAKE,MAAOoB,KAAKpB,MAAO8B,WAAUA,iBAG5EulC,SAAQE,KACN,SAACvnC,OACCyJ,MAAKzJ,MAAQA,MACbyJ,MAAK69B,WAAY,EACZxlC,WAAW+I,QACd/I,WAAWkB,IAAI9B,UAAUa,SAASjC,aAAc,GAAKE,MAAKA,MAAE8B,WAAUA,eAG1E,SAACzB,KACMyB,WAAW+I,QACd/I,WAAWkB,IAAI9B,UAAUa,SAAS3B,cAAe,GAAKC,IAAGA,IAAEyB,WAAUA,gBAGxEylC,KAAK,KAAM,SAAClnC,KAEX4P,OAAIF,KAACuhB,WAAW,WAAQ,KAAMjxB,UAK1C8J,mBA/F0C5J,aAAU0C,WAAvCC,SAAiBiH,kBA+F7BA,+LCcD,SAAAq9B,aAAqBn6B,KACnB,GAAM7G,GAAI6G,IAAIo6B,WAAeC,SAC7B,KAAKlhC,GAAoB,gBAAR6G,KACf,MAAO,IAAIs6B,gBAAet6B,IAE5B,KAAK7G,OAAoBhF,KAAf6L,IAAI1L,OACZ,MAAO,IAAIimC,eAAcv6B,IAE3B,KAAK7G,EACH,KAAM,IAAIwC,WAAU,yBAEtB,OAAOqE,KAAIo6B,WAAeC,YAK5B,QAAAG,UAAkB9X,GAChB,GAAI3pB,MAAO2pB,EAAEpuB,MACb,OAAImmC,OAAM1hC,KACC,EAEC,IAARA,KAAc2hC,eAAe3hC,MAGjCA,IAAM4hC,KAAK5hC,KAAO4qB,KAAKiX,MAAMjX,KAAKuH,IAAInyB,MAClCA,KAAO,EACA,EAEPA,IAAM8hC,eACCA,eAEJ9hC,KATIA,IAYb,QAAA2hC,gBAAwB/nC,OACtB,MAAwB,gBAAVA,QAAsBiQ,OAAIF,KAACo4B,SAASnoC,OAGpD,QAAAgoC,MAAchoC,OACZ,GAAIooC,gBAAiBpoC,KACrB,OAAsB,KAAlBooC,cACKA,cAELN,MAAMM,eACDA,cAEFA,cAAgB,GAAK,EAAI,iOAtKlCn4B,OAAAzP,WAAqB,kBAErBD,aAAAC,WAA2B,mBAC3BinC,WAAAjnC,WAA4C,wBAS5C6nC,mBAAA,SAAAxnC,QAmCE,QAAAwnC,oBAAYX,SAAuBxmC,WAGjC,GAFAL,OAAAM,KAAOC,MAD0BA,KAASF,UAATA,UAGjB,MAAZwmC,SACF,KAAM,IAAI72B,OAAM,2BAGlBzP,MAAKsmC,SAAWF,YAAYE,UA8BhC,MAxE2CrmC,WAAAgnC,mBAAaxnC,QAG/CwnC,mBAAM/mC,OAAb,SAAiBomC,SAAexmC,WAC9B,MAAO,IAAImnC,oBAAmBX,SAAUxmC,YAGnCmnC,mBAAQrmC,SAAf,SAAgBa,OAEN,GAAAqJ,OAAArJ,MAAKqJ,MAAE20B,SAAAh+B,MAAQg+B,SAAE6G,SAAA7kC,MAAQ6kC,SAAE5lC,WAAAe,MAAUf,UAE7C,IAAI++B,SAEF,WADA/+B,YAAWxB,MAAMuC,MAAMvC,MAIzB,IAAI8E,QAASsiC,SAASxnC,MACtB,OAAIkF,QAAOunB,SACT7qB,YAAW3B,YAIb2B,WAAW5B,KAAKkF,OAAOpF,OACvB6C,MAAMqJ,MAAQA,MAAQ,EAElBpK,WAAW+I,YACkB,kBAApB68B,UAASY,QAClBZ,SAASY,cAKNlnC,MAAMW,SAASc,SAadwlC,mBAAAzmC,UAAUC,WAApB,SAAqBC,YAEnB,GACAwB,IAAoClC,KAA5BsmC,SAAApkC,GAAQokC,SAAExmC,UAAAoC,GAASpC,SAE3B,IAAIA,UACF,MAAAA,WAAiBa,SAASsmC,mBAAmBrmC,SAAU,GACrDkK,MALQ,EAKDw7B,SAAQA,SAAE5lC,WAAUA,YAG7B,QAAG,CACD,GAAIsD,QAASsiC,SAASxnC,MACtB,IAAIkF,OAAOunB,KAAM,CACf7qB,WAAW3B,UACX,OAIF,GAFE2B,WAAW5B,KAAKkF,OAAOpF,OAErB8B,WAAW+I,OAAQ,CACU,kBAApB68B,UAASY,QAClBZ,SAASY,QAEX,UAKVD,oBAxE2C9nC,aAAU0C,WAAxCC,SAAkBmlC,mBAwE9BA,kBAED,IAAAV,gBAAA,WACE,QAAAA,gBAAoBY,IACA96B,IACArH,SADR,KAAAqH,MAAAA,IAAuB,OACvB,KAAArH,MAAAA,IAAsBmiC,IAAI5mC,QAFlBP,KAAGmnC,IAAHA,IACAnnC,KAAGqM,IAAHA,IACArM,KAAGgF,IAAHA,IAYtB,MAVEuhC,gBAAA/lC,UAAC6lC,WAAeC,UAAhB,WAAsB,MAAQtmC,OAC9BumC,eAAA/lC,UAAI1B,KAAJ,WACE,MAAAkB,MAAYqM,IAAMrM,KAAKgF,KACnBumB,MAAM,EACN3sB,MAAOoB,KAAKmnC,IAAIC,OAAOpnC,KAAKqM,SAE5Bkf,MAAM,EACN3sB,UAAOwB,KAGfmmC,kBAEAC,cAAA,WACE,QAAAA,eAAoBa,IACAh7B,IACArH,SADR,KAAAqH,MAAAA,IAAuB,OACvB,KAAArH,MAAAA,IAAsByhC,SAASY,MAFvBrnC,KAAGqnC,IAAHA,IACArnC,KAAGqM,IAAHA,IACArM,KAAGgF,IAAHA,IAYtB,MAVEwhC,eAAAhmC,UAAC6lC,WAAeC,UAAhB,WAAsB,MAAOtmC,OAC7BwmC,cAAAhmC,UAAI1B,KAAJ,WACE,MAAAkB,MAAYqM,IAAMrM,KAAKgF,KACnBumB,MAAM,EACN3sB,MAAOoB,KAAKqnC,IAAIrnC,KAAKqM,SAErBkf,MAAM,EACN3sB,UAAOwB,KAGfomC,iBAgBMM,eAAiBlX,KAAK0X,IAAI,EAAG,IAAM,6aCrIzCnoC,aAAAC,WAA2B,mBAC3BmoC,mBAAAnoC,WAAiC,oCACjCkF,kBAAAlF,WAAgC,mCAShCooC,oBAAA,SAAA/nC,QAmCE,QAAA+nC,qBAAoBC,UAAiC3nC,WACnDL,OAAAM,KAAOC,MADWA,KAASynC,UAATA,UAAiCznC,KAASF,UAATA,UAE9CA,WAAkC,IAArB2nC,UAAUlnC,SAC1BP,KAAKkmC,WAAY,EACjBlmC,KAAKpB,MAAQ6oC,UAAU,IAoB7B,MA3D4CxnC,WAAAunC,oBAAa/nC,QAEhD+nC,oBAAMtnC,OAAb,SAAiBunC,UAAyB3nC,WACxC,GAAMS,QAASknC,UAAUlnC,MACzB,OAAe,KAAXA,OACK,GAAI+D,mBAAeE,gBACN,IAAXjE,OACF,GAAIgnC,oBAAgBG,iBAASD,UAAU,GAAI3nC,WAE3C,GAAI0nC,qBAAoBC,UAAW3nC,YAIvC0nC,oBAAQ5mC,SAAf,SAAgBa,OACN,GAAAgmC,WAAAhmC,MAASgmC,UAAE38B,MAAArJ,MAAKqJ,MAAEvK,OAAAkB,MAAMlB,OAAEG,WAAAe,MAAUf,UAE5C,KAAIA,WAAW+I,OAAf,CAIA,GAAIqB,OAASvK,OAEX,WADAG,YAAW3B,UAIb2B,YAAW5B,KAAK2oC,UAAU38B,QAE1BrJ,MAAMqJ,MAAQA,MAAQ,EAEf9K,KAAMW,SAASc,SAcd+lC,oBAAAhnC,UAAUC,WAApB,SAAqBC,YACnB,GACAwB,IAAqClC,KAA7BynC,UAAAvlC,GAASulC,UAAE3nC,UAAAoC,GAASpC,UACtBS,OAASknC,UAAUlnC,MAEzB,IAAIT,UACF,MAAAA,WAAiBa,SAAS6mC,oBAAoB5mC,SAAU,GACtD6mC,UAASA,UAAE38B,MANH,EAMUvK,OAAMA,OAAEG,WAAUA,YAGtC,KAAK,GAAI0E,GAAI,EAAGA,EAAI7E,SAAWG,WAAW+I,OAAQrE,IAChD1E,WAAW5B,KAAK2oC,UAAUriC,GAE5B1E,YAAW3B,YAGjByoC,qBA3D4CroC,aAAU0C,WAAzCC,SAAmB0lC,oBA2D/BA,4ICtEDroC,0BAAAC,WAA2B,oBAgB3B+mB,aAAA,WAGE,QAAAA,cAAmBwhB,KAAqB/oC,MAAkBM,OAAvCc,KAAI2nC,KAAJA,KAAqB3nC,KAAKpB,MAALA,MAAkBoB,KAAKd,MAALA,MACxDc,KAAK0yB,SAAoB,MAATiV,KA6GpB,MArGExhB,cAAA3lB,UAAOgjB,QAAP,SAAQlT,UACN,OAAQtQ,KAAK2nC,MACX,IAAK,IACH,MAAOr3B,UAASxR,MAAQwR,SAASxR,KAAKkB,KAAKpB,MAC7C,KAAK,IACH,MAAO0R,UAASpR,OAASoR,SAASpR,MAAMc,KAAKd,MAC/C,KAAK,IACH,MAAOoR,UAASvR,UAAYuR,SAASvR,aAY3ConB,aAAA3lB,UAAE6V,GAAF,SAAGvX,KAA0BI,MAA4BH,UAEvD,OADaiB,KAAK2nC,MAEhB,IAAK,IACH,MAAO7oC,OAAQA,KAAKkB,KAAKpB,MAC3B,KAAK,IACH,MAAOM,QAASA,MAAMc,KAAKd,MAC7B,KAAK,IACH,MAAOH,WAAYA,aAazBonB,aAAA3lB,UAAMonC,OAAN,SAAO3xB,eAA2D/W,MAA4BH,UAC5F,MAAIkX,iBAAuE,kBAAzBA,gBAAgBnX,KACzDkB,KAAKwjB,QAA4BvN,gBAEjCjW,KAAKqW,GAAuBJ,eAAgB/W,MAAOH,WAS9DonB,aAAA3lB,UAAYqnC,aAAZ,WAEE,OADa7nC,KAAK2nC,MAEhB,IAAK,IACH,MAAOxoC,cAAU0C,WAACgK,GAAG7L,KAAKpB,MAC5B,KAAK,IACH,MAAOO,cAAU0C,WAACgM,MAAM7N,KAAKd,MAC/B,KAAK,IACH,MAAOC,cAAU0C,WAAC0C,QAEtB,KAAM,IAAIkL,OAAM,uCAaX0W,aAAUC,WAAjB,SAAqBxnB,OACnB,WAAqB,KAAVA,MACF,GAAIunB,cAAa,IAAKvnB,OAExBunB,aAAa2hB,4BAUf3hB,aAAWE,YAAlB,SAAsBpnB,KACpB,MAAO,IAAIknB,cAAa,QAAK/lB,GAAWnB,MAOnCknB,aAAcG,eAArB,WACE,MAAOH,cAAa4hB,sBAjCP5hB,aAAoB4hB,qBAAsB,GAAI5hB,cAAa,KAC3DA,aAA0B2hB,2BAAsB,GAAI3hB,cAAa,QAAK/lB,IAkCvF+lB,eAjHarkB,SAAYqkB,aAiHxBA,4JC1ED,SAAAnL,WAA6Blb,UAAuBmV,OAClD,WADkD,KAAAA,QAAAA,MAAiB,GAC5D,SAAmCpU,QACxC,MAAOA,QAAOqC,KAAK,GAAI8kC,mBAAkBloC,UAAWmV,wOAtDxDlG,aAAA3P,WAA2B,mBAC3B0lB,eAAA1lB,WAA6B,oBAmDb0C,SAASkZ,UAIxBA,SAED,IAAAgtB,mBAAA,WACE,QAAAA,mBAAoBloC,UAA+BmV,WAAR,KAAAA,QAAAA,MAAyB,GAAhDjV,KAASF,UAATA,UAA+BE,KAAKiV,MAALA,MAMrD,MAHE+yB,mBAAAxnC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAI4iC,qBAAoB1jC,WAAYV,KAAKF,UAAWE,KAAKiV,SAErF+yB,oBAPalmC,SAAiBkmC,kBAO7BA,iBAOD,IAAA5D,qBAAA,SAAA3kC,QAOE,QAAA2kC,qBAAYzgC,YACQ7D,UACAmV,WAAR,KAAAA,QAAAA,MAAyB,GACnCxV,OAAAM,KAAAC,KAAM2D,aAFY3D,KAASF,UAATA,UACAE,KAAKiV,MAALA,MAuBtB,MAhC4ChV,WAAAmkC,oBAAa3kC,QAChD2kC,oBAAQxjC,SAAf,SAAgDjC,KACtC,GAAA4kB,cAAA5kB,IAAY4kB,aAAE5f,YAAAhF,IAAWgF,WACjC4f,cAAaC,QAAQ7f,aACrB3D,KAAKyH,eASC28B,oBAAA5jC,UAAeynC,gBAAvB,SAAwB1kB,cACtBvjB,KAAK4B,IAAI5B,KAAKF,UAAUa,SACtByjC,oBAAoBxjC,SACpBZ,KAAKiV,MACL,GAAIizB,kBAAiB3kB,aAAcvjB,KAAK2D,gBAIlCygC,oBAAA5jC,UAAKmyB,MAAf,SAAgB/zB,OACdoB,KAAKioC,gBAAgBnjB,eAAYqB,aAACC,WAAWxnB,SAGrCwlC,oBAAA5jC,UAAMuD,OAAhB,SAAiB9E,KACfe,KAAKioC,gBAAgBnjB,eAAYqB,aAACE,YAAYpnB,OAGtCmlC,oBAAA5jC,UAAS2J,UAAnB,WACEnK,KAAKioC,gBAAgBnjB,eAAYqB,aAACG,mBAEtC8d,qBAhC4Cr1B,aAAUkC,WAAzCnP,SAAmBsiC,oBAgC/BA,mBAED,IAAA8D,kBAAA,WACE,QAAAA,kBAAmB3kB,aACA5f,aADA3D,KAAYujB,aAAZA,aACAvjB,KAAW2D,YAAXA,YAErB,MAAAukC,oBAJapmC,SAAgBomC,iBAI5BA,gpBClHDplC,UAAA1D,WAAwB,qBACxB+oC,cAAA/oC,WAA4B,yBAC5BgpC,YAAAhpC,WAA0B,uBAC1ByJ,oBAAAzJ,WAAkC,qCAClCipC,qBAAAjpC,WAAkC,sCAClC4D,kBAAA5D,WAAgC,mCAChCkpC,sBAAAlpC,WAAoC,uCAGpCinC,WAAAjnC,WAA4C,wBAC5CD,aAAAC,WAA4C,mBAE5C6b,YAAA7b,WAAoC,4BACpCmpC,aAAAnpC,WAAgD,0BAOhDi/B,eAAA,SAAA5+B,QACE,QAAA4+B,gBAAoBR,IAAiC/9B,WACnDL,OAAAM,KAAAC,KAAM,MADYA,KAAG69B,IAAHA,IAAiC79B,KAASF,UAATA,UA6FvD,MA9FuCG,WAAAo+B,eAAa5+B,QAgE3C4+B,eAAMn+B,OAAb,SAAiB29B,IAAyB/9B,WACxC,GAAW,MAAP+9B,IAAa,CACf,GAAsC,kBAA3BA,KAAI0K,aAAiBvlB,YAC9B,MAAI6a,eAAe1+B,cAAU0C,aAAK/B,UACzB+9B,IAEF,GAAIQ,gBAAkBR,IAAK/9B,UACnC,IAAUgD,UAAOC,QAAC86B,KACjB,MAAO,IAAI76B,mBAAeC,gBAAI46B,IAAK/9B,UAD9B,IAEIsoC,YAASI,UAAI3K,KACtB,MAAO,IAAIh1B,qBAAiBE,kBAAI80B,IAAK/9B,UADhC,IAEoC,kBAAzB+9B,KAAIwI,WAAeC,WAAmC,gBAARzI,KAC9D,MAAO,IAAIwK,sBAAkBpB,mBAAIpJ,IAAK/9B,UACjC,IAAIqoC,cAAWM,YAAC5K,KACrB,MAAO,IAAIyK,uBAAmBd,oBAAC3J,IAAK/9B,WAIxC,KAAM,IAAI8H,YAAmB,OAARi2B,WAAuBA,MAAOA,KAAO,uBAGlDQ,eAAA79B,UAAUC,WAApB,SAAqBC,YACnB,GAAMm9B,KAAM79B,KAAK69B,IACX/9B,UAAYE,KAAKF,SACvB,OAAiB,OAAbA,UACK+9B,IAAI0K,aAAiBvlB,cAAIxhB,UAAUd,YAEnCm9B,IAAI0K,aAAiBvlB,cAAIxhB,UAAU,GAAIyZ,aAAmBmpB,oBAAC1jC,WAAYZ,UAAW,KAG/Fu+B,gBA9FuCl/B,aAAU0C,WAApCC,SAAcu8B,eA8F1BA,yJClHDD,8BAAAh/B,WAAiC,kCAEpB0C,SAAIoE,KAAGk4B,iBAAcC,eAACn+B,oKCsEnC,SAAA+Z,UAAkCvX,QACAkC,eACA+R,YAChC,WADgC,KAAAA,aAAAA,WAAqBhE,OAAOC,mBACrD,SAAkC/R,QAKvC,MAJ8B,gBAAnB+D,kBACT+R,WAAqB/R,eACrBA,eAAiB,MAEZ/D,OAAOqC,KAAK,GAAIwlC,kBAAiBhmC,QAAckC,eAAgB+R,6OA5E1ErT,oBAAAlE,WAAkC,+BAClCmE,kBAAAnE,WAAgC,uBAmEhB0C,SAAQmY,SAUvBA,QAED,IAAAyuB,kBAAA,WACE,QAAAA,kBAAoBhmC,QACAkC,eACA+R,gBAAR,KAAAA,aAAAA,WAA6BhE,OAAOC,mBAF5B5S,KAAO0C,QAAPA,QACA1C,KAAc4E,eAAdA,eACA5E,KAAU2W,WAAVA,WAQtB,MALE+xB,kBAAAloC,UAAIT,KAAJ,SAAKuQ,SAAyBzP,QAC5B,MAAOA,QAAOW,UAAU,GAAImnC,oBAC1Br4B,SAAUtQ,KAAK0C,QAAS1C,KAAK4E,eAAgB5E,KAAK2W,cAGxD+xB,mBAXa5mC,SAAgB4mC,iBAW5BA,gBAOD,IAAAC,oBAAA,SAAAlpC,QAME,QAAAkpC,oBAAYhlC,YACQjB,QACAkC,eACA+R,gBAAR,KAAAA,aAAAA,WAA6BhE,OAAOC,mBAC9CnT,OAAAM,KAAAC,KAAM2D,aAHY3D,KAAO0C,QAAPA,QACA1C,KAAc4E,eAAdA,eACA5E,KAAU2W,WAAVA,WARZ3W,KAAYq6B,cAAY,EACxBr6B,KAAMgS,UACNhS,KAAMyoB,OAAW,EACfzoB,KAAK8K,MAAW,EAwE5B,MA5EiD7K,WAAA0oC,mBAAqBlpC,QAa1DkpC,mBAAAnoC,UAAKmyB,MAAf,SAAgB/zB,OACVoB,KAAKyoB,OAASzoB,KAAK2W,WACrB3W,KAAKy2B,SAAS73B,OAEdoB,KAAKgS,OAAO6R,KAAKjlB,QAIX+pC,mBAAAnoC,UAAQi2B,SAAlB,SAAmB73B,OACjB,GAAIoF,QACE8G,MAAQ9K,KAAK8K,OACnB,KACE9G,OAAShE,KAAK0C,QAAQ9D,MAAOkM,OAC7B,MAAO7L,KAEP,WADAe,MAAK2D,YAAYzE,MAAMD,KAGzBe,KAAKyoB,SACLzoB,KAAK+9B,UAAU/5B,OAAQpF,MAAOkM,QAGxB69B,mBAAAnoC,UAASu9B,UAAjB,SAAkBF,IAAyBj/B,MAAUkM,OACnD9K,KAAK4B,IAAI0B,oBAAiBW,kBAAOjE,KAAM69B,IAAKj/B,MAAOkM,SAG3C69B,mBAAAnoC,UAAS2J,UAAnB,WACEnK,KAAKq6B,cAAe,EACA,IAAhBr6B,KAAKyoB,QAAuC,IAAvBzoB,KAAKgS,OAAOzR,QACnCP,KAAK2D,YAAY5E,YAIrB4pC,mBAAAnoC,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACL3F,KAAK4E,eACP5E,KAAK4oC,sBAAsBpjC,WAAYC,WAAYH,WAAYI,YAE/D1F,KAAK2D,YAAY7E,KAAK2G,aAIlBkjC,mBAAAnoC,UAAqBooC,sBAA7B,SAA8BpjC,WAAeC,WAAeH,WAAoBI,YAC9E,GAAI1B,OACJ,KACEA,OAAShE,KAAK4E,eAAeY,WAAYC,WAAYH,WAAYI,YACjE,MAAOzG,KAEP,WADAe,MAAK2D,YAAYzE,MAAMD,KAGzBe,KAAK2D,YAAY7E,KAAKkF,SAGxB2kC,mBAAAnoC,UAAcqF,eAAd,SAAeF,UACb,GAAMqM,QAAShS,KAAKgS,MACpBhS,MAAK8yB,OAAOntB,UACZ3F,KAAKyoB,SACDzW,OAAOzR,OAAS,EAClBP,KAAK2yB,MAAM3gB,OAAO7P,SACO,IAAhBnC,KAAKyoB,QAAgBzoB,KAAKq6B,cACnCr6B,KAAK2D,YAAY5E,YAGvB4pC,oBA5EiDplC,kBAAeW,gBAAnDpC,SAAkB6mC,mBA4E9BA,0KChID,SAAA5uB,UAA4BpD,YAC1B,WAD0B,KAAAA,aAAAA,WAAqBhE,OAAOC,mBAC/CsH,WAAQD,SAAC4uB,WAA4DC,SAAE,KAAMnyB,eAjDtFuD,wBAAA9a,WAAyB,4BACzBypC,WAAAzpC,WAAyB,qBA+CT0C,SAAQiY,SAEvBA,4ICAD,SAAAlG,aACE,MAAOmG,YAAQD,SAAC,MApDlBC,wBAAA5a,WAAyB,2BAmDT0C,SAAS+R,UAExBA,gNCwDD,SAAAtS,cAA6B,GAAAkB,gBAAApC,GAAwD,EAAxDA,GAAAC,UAAwDC,OAAxDF,KAAAoC,YAAApC,GAAA,GAAAC,UAAwDD,GACnF,OAA2B,KAAvBoC,YAAYlC,QAAwC,IAAvBkC,YAAYlC,QAAgBoC,cAAWC,YAACH,YAAY,IAC5EwD,OAAIC,KAAMzD,YAAY,IAExBqR,YAASD,YAAGjI,KAAEC,GAAAzK,UAAA,GAAIqB,iBAhH3BE,2BAAAvD,WAA4B,0BAC5BwM,KAAAxM,WAAmB,sBACnB6G,OAAA7G,WAAqB,wBACrB0U,YAAA1U,WAA0B,2BAyGV0C,SAAMP,OAKrBA,wQClFD,SAAAkd,iBAA6B,GAAAC,UAAAre,GAA+B,EAA/BA,GAAAC,UAA+BC,OAA/BF,KAAAqe,MAAAre,GAAA,GAAAC,UAA+BD,GAC1D,OAAO,UAACQ,QACN,GAAIf,WAAwB4e,MAAMA,MAAMne,OAAS,EAC7CoC,eAAWC,YAAC9C,WACd4e,MAAM7b,MAEN/C,UAAY,IAGd,IAAMkF,KAAM0Z,MAAMne,MAClB,OAAY,KAARyE,IACK3B,SAAY9B,OAAC,GAAIgmC,oBAAgBG,iBAAOhpB,MAAM,GAAI5e,WAAYe,QAC5DmE,IAAM,EACR3B,SAAY9B,OAAC,GAAIyB,mBAAeC,gBAASyb,MAAO5e,WAAYe,QAE5DwC,SAAY9B,OAAC,GAAI+C,mBAAeE,gBAAI1E,WAAYe,YA9C7DmC,+BAAA5D,WAAgC,oCAChCmoC,mBAAAnoC,WAAiC,oCACjCkF,kBAAAlF,WAAgC,mCAChCiE,SAAAjE,WAAuC,0BACvCuD,cAAAvD,WAA4B,wBA2BZ0C,SAAS2c,UAkBxBA,8GCnDD,SAAAqqB,UAA4Bt4B,GAC1B,MAAOA,aADO1O,SAAQgnC,SAEvBA,kKCGD,SAAAxpB,aACE,MAAOI,aAASD,UAACopB,WAAQC,aAJ3BppB,yBAAAtgB,WAA0B,6BAC1BypC,WAAAzpC,WAAyB,qBAET0C,SAASwd,UAExBA,wKCsDD,SAAAG,WACE/c,QACAkC,gBAEA,MAAO,UAAmC/D,QACxC,MAAOA,QAAOqC,KAAK,GAAI6lC,mBAAkBrmC,QAASkC,iPA9DtDrB,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BAuDlB0C,SAAS2d,UAOxBA,SAED,IAAAspB,mBAAA,WACE,QAAAA,mBAAoBrmC,QACAkC,gBADA5E,KAAO0C,QAAPA,QACA1C,KAAc4E,eAAdA,eAMtB,MAHEmkC,mBAAAvoC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIwnC,qBAAoBtoC,WAAYV,KAAK0C,QAAS1C,KAAK4E,kBAEnFmkC,qBAOAC,oBAAA,SAAAvpC,QAIE,QAAAupC,qBAAYrlC,YACQjB,QACAkC,gBAClBnF,OAAAM,KAAAC,KAAM2D,aAFY3D,KAAO0C,QAAPA,QACA1C,KAAc4E,eAAdA,eALZ5E,KAAK8K,MAAW,EAoE1B,MArE2C7K,WAAA+oC,oBAAqBvpC,QAUpDupC,oBAAAxoC,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAIoF,QACE8G,MAAQ9K,KAAK8K,OACnB,KACE9G,OAAShE,KAAK0C,QAAQ9D,MAAOkM,OAC7B,MAAO5L,OAEP,WADAc,MAAK2D,YAAYzE,MAAMA,OAGzBc,KAAK+9B,UAAU/5B,OAAQpF,MAAOkM,QAGxBk+B,oBAAAxoC,UAASu9B,UAAjB,SAAkB/5B,OAA4BpF,MAAUkM,OACtD,GAAMzF,mBAAoBrF,KAAKqF,iBAC3BA,oBACFA,kBAAkBoC,cAEpBzH,KAAK4B,IAAI5B,KAAKqF,kBAAoB/B,oBAAiBW,kBAACjE,KAAMgE,OAAQpF,MAAOkM,SAGjEk+B,oBAAAxoC,UAAS2J,UAAnB,WACS,GAAA9E,mBAAArF,KAAiBqF,iBACnBA,qBAAqBA,kBAAkBoE,QAC1ChK,OAAKe,UAAC2J,UAAApK,KAAWC,OAIXgpC,oBAAAxoC,UAAYq0B,aAAtB,WACE70B,KAAKqF,kBAAoB,MAG3B2jC,oBAAAxoC,UAAcqF,eAAd,SAAeF,UACb3F,KAAK8yB,OAAOntB,UACZ3F,KAAKqF,kBAAoB,KACrBrF,KAAK01B,WACPj2B,OAAKe,UAAC2J,UAAApK,KAAWC,OAIrBgpC,oBAAAxoC,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACL3F,KAAK4E,eACP5E,KAAKipC,eAAezjC,WAAYC,WAAYH,WAAYI,YAExD1F,KAAK2D,YAAY7E,KAAK2G,aAIlBujC,oBAAAxoC,UAAcyoC,eAAtB,SAAuBzjC,WAAeC,WAAeH,WAAoBI,YACvE,GAAI1B,OACJ,KACEA,OAAShE,KAAK4E,eAAeY,WAAYC,WAAYH,WAAYI,YACjE,MAAOzG,KAEP,WADAe,MAAK2D,YAAYzE,MAAMD,KAGzBe,KAAK2D,YAAY7E,KAAKkF,SAE1BglC,qBArE2CzlC,kBAAeW,iLC7B1D,SAAAyb,aAAqCzL,gBACAtP,gBAInC,MAAO,UAAC/D,QAA0B,MAAAA,QAAOqC,KAAK,GAAIgmC,qBAAoBh1B,gBAApCtP,iPAzDpCrB,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BAkDlB0C,SAAW6d,YAM1BA,WAED,IAAAupB,qBAAA,WACE,QAAAA,qBAAoBlmB,WACApe,gBADA5E,KAAUgjB,WAAVA,WACAhjB,KAAc4E,eAAdA,eAMtB,MAHEskC,qBAAA1oC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAI2nC,uBAAsBzoC,WAAYV,KAAKgjB,WAAYhjB,KAAK4E,kBAExFskC,uBAOAC,sBAAA,SAAA1pC,QAIE,QAAA0pC,uBAAYxlC,YACQylC,MACAxkC,gBAClBnF,OAAAM,KAAAC,KAAM2D,aAFY3D,KAAKopC,MAALA,MACAppC,KAAc4E,eAAdA,eALZ5E,KAAK8K,MAAW,EA4D1B,MA7D6C7K,WAAAkpC,sBAAqB1pC,QAUtD0pC,sBAAA3oC,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAMyG,mBAAoBrF,KAAKqF,iBAC3BA,oBACFA,kBAAkBoC,cAEpBzH,KAAK4B,IAAI5B,KAAKqF,kBAAoB/B,oBAAiBW,kBAACjE,KAAMA,KAAKopC,MAAOxqC,MAAOoB,KAAK8K,WAG1Eq+B,sBAAA3oC,UAAS2J,UAAnB,WACS,GAAA9E,mBAAArF,KAAiBqF,iBACnBA,qBAAqBA,kBAAkBoE,QAC1ChK,OAAKe,UAAC2J,UAAApK,KAAWC,OAIXmpC,sBAAA3oC,UAAYq0B,aAAtB,WACE70B,KAAKqF,kBAAoB,MAG3B8jC,sBAAA3oC,UAAcqF,eAAd,SAAeF,UACb3F,KAAK8yB,OAAOntB,UACZ3F,KAAKqF,kBAAoB,KACrBrF,KAAK01B,WACPj2B,OAAKe,UAAC2J,UAAApK,KAAWC,OAIrBmpC,sBAAA3oC,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT,GAAAzD,IAA4ClC,KAApC4E,eAAA1C,GAAc0C,eAAEjB,YAAAzB,GAAWyB,WAC/BiB,gBACF5E,KAAKqpC,kBAAkB7jC,WAAYC,WAAYH,WAAYI,YAE3D/B,YAAY7E,KAAK2G,aAIb0jC,sBAAA3oC,UAAiB6oC,kBAAzB,SAA0B7jC,WAAeC,WACfH,WAAoBI,YAC5C,GACI1B,QADJ9B,GAA4ClC,KAApC4E,eAAA1C,GAAc0C,eAAEjB,YAAAzB,GAAWyB,WAEnC,KACEK,OAASY,eAAeY,WAAYC,WAAYH,WAAYI,YAC5D,MAAOzG,KAEP,WADA0E,aAAYzE,MAAMD,KAIpB0E,YAAY7E,KAAKkF,SAErBmlC,uBA7D6C5lC,kBAAeW,6MCtC5D,SAAA2b,MAAwBlT,OACtB,MAAO,UAAC9L,QACN,MAAc,KAAV8L,MACK,GAAIrI,mBAAeE,gBAEnB3D,OAAOqC,KAAK,GAAIomC,cAAa38B,wOA7C1CoC,aAAA3P,WAA2B,mBAC3By6B,0BAAAz6B,WAAwC,qCACxCkF,kBAAAlF,WAAgC,kCAsChB0C,SAAI+d,KAQnBA,IAED,IAAAypB,cAAA,WACE,QAAAA,cAAoBrkC,OAClB,GADkBjF,KAAKiF,MAALA,MACdjF,KAAKiF,MAAQ,EACf,KAAM,IAAI40B,2BAAuBC,wBAOvC,MAHEwP,cAAA9oC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAI+nC,gBAAe7oC,WAAYV,KAAKiF,SAEhEqkC,gBAOAC,eAAA,SAAA9pC,QAGE,QAAA8pC,gBAAY5lC,YAAoCsB,OAC9CxF,OAAAM,KAAAC,KAAM2D,aADwC3D,KAAKiF,MAALA,MAFxCjF,KAAK2M,MAAW,EAiB1B,MAlBgC1M,WAAAspC,eAAa9pC,QAOjC8pC,eAAA/oC,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAMqG,OAAQjF,KAAKiF,MACb0H,QAAU3M,KAAK2M,KACjBA,QAAS1H,QACXjF,KAAK2D,YAAY7E,KAAKF,OAClB+N,QAAU1H,QACZjF,KAAK2D,YAAY5E,WACjBiB,KAAKyH,iBAIb8hC,gBAlBgCx6B,aAAUkC,0KCxB1C,SAAAgP,WAA6BtD,UAC3B,MAAO,UAAC9b,QAA0B,MAAAA,QAAOqC,KAAK,GAAIsmC,mBAAhB7sB,2OAxCpCpZ,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BAqClB0C,SAASme,UAExBA,SAED,IAAAupB,mBAAA,WACE,QAAAA,mBAAoB7sB,UAAA3c,KAAQ2c,SAARA,SAMtB,MAHE6sB,mBAAAhpC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIioC,qBAAoB/oC,WAAYV,KAAK2c,YAErE6sB,qBAOAC,oBAAA,SAAAhqC,QAEE,QAAAgqC,qBAAY9lC,YACQgZ,UAClBld,OAAAM,KAAAC,KAAM2D,aADY3D,KAAQ2c,SAARA,SAElB3c,KAAK4B,IAAI0B,oBAAiBW,kBAACjE,KAAM2c,WAYrC,MAjBwC1c,WAAAwpC,oBAAqBhqC,QAQ3DgqC,oBAAAjpC,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT3F,KAAKjB,YAGP0qC,oBAAAjpC,UAAcqF,eAAd,aAGF4jC,qBAjBwClmC,kBAAeW,4ICpBvD,SAAAic,WAA6B/L,WAC3B,MAAO,UAACvT,QAA0B,MAAAA,QAAOqC,KAAK,GAAIwmC,mBAAhBt1B,4OAzCpCrF,aAAA3P,WAA2B,kBAwCX0C,SAASqe,UAExBA,SAED,IAAAupB,mBAAA,WACE,QAAAA,mBAAoBt1B,WAAApU,KAASoU,UAATA,UAMtB,MAHEs1B,mBAAAlpC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAImoC,qBAAoBjpC,WAAYV,KAAKoU,aAErEs1B,qBAOAC,oBAAA,SAAAlqC,QAGE,QAAAkqC,qBAAYhmC,YACQyQ,WAClB3U,OAAAM,KAAAC,KAAM2D,aADY3D,KAASoU,UAATA,UAHZpU,KAAK8K,MAAW,EA2B1B,MA5BqC7K,WAAA0pC,oBAAalqC,QAQtCkqC,oBAAAnpC,UAAKmyB,MAAf,SAAgB/zB,OACd,GACIoF,QADEL,YAAc3D,KAAK2D,WAEzB,KACEK,OAAShE,KAAKoU,UAAUxV,MAAOoB,KAAK8K,SACpC,MAAO7L,KAEP,WADA0E,aAAYzE,MAAMD,KAGpBe,KAAK4pC,eAAehrC,MAAOoF,SAGrB2lC,oBAAAnpC,UAAcopC,eAAtB,SAAuBhrC,MAAUirC,iBAC/B,GAAMlmC,aAAc3D,KAAK2D,WACrBkrB,SAAQgb,iBACVlmC,YAAY7E,KAAKF,OAEjB+E,YAAY5E,YAGlB4qC,qBA5BqC56B,aAAUkC,iICP/C,SAAAkF,KAAuBF,eACA/W,MACAH,UACrB,MAAO,UAA6B8B,QAClC,MAAOA,QAAOqC,KAAK,GAAI4mC,YAAW7zB,eAAgB/W,MAAOH,2OAxD7DgQ,aAAA3P,WAA2B,kBAoDX0C,SAAGqU,IAMlBA,GAED,IAAA2zB,YAAA,WACE,QAAAA,YAAoB7zB,eACA/W,MACAH,UAFAiB,KAAciW,eAAdA,eACAjW,KAAKd,MAALA,MACAc,KAAQjB,SAARA,SAKtB,MAHE+qC,YAAAtpC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIuoC,cAAarpC,WAAYV,KAAKiW,eAAgBjW,KAAKd,MAAOc,KAAKjB,YAE/F+qC,cAOAC,aAAA,SAAAtqC,QAIE,QAAAsqC,cAAYpmC,YACAsS,eACA/W,MACAH,UACVU,OAAAM,KAAAC,KAAM2D,YAEN,IAAMqmC,gBAAiB,GAAIj7B,cAAUkC,WAAIgF,eAAgB/W,MAAOH,SAChEirC,gBAAev8B,oBAAqB,EACpCzN,KAAK4B,IAAIooC,gBACThqC,KAAKgqC,eAAiBA,eAgC1B,MA7C8B/pC,WAAA8pC,aAAatqC,QAgB/BsqC,aAAAvpC,UAAKmyB,MAAf,SAAgB/zB,OACN,GAAAorC,gBAAAhqC,KAAcgqC,cACtBA,gBAAelrC,KAAKF,OAChBorC,eAAeC,gBACjBjqC,KAAK2D,YAAYzE,MAAM8qC,eAAeE,gBAEtClqC,KAAK2D,YAAY7E,KAAKF,QAIhBmrC,aAAAvpC,UAAMuD,OAAhB,SAAiB9E,KACP,GAAA+qC,gBAAAhqC,KAAcgqC,cACtBA,gBAAe9qC,MAAMD,KACjB+qC,eAAeC,gBACjBjqC,KAAK2D,YAAYzE,MAAM8qC,eAAeE,gBAEtClqC,KAAK2D,YAAYzE,MAAMD,MAIjB8qC,aAAAvpC,UAAS2J,UAAnB,WACU,GAAA6/B,gBAAAhqC,KAAcgqC,cACtBA,gBAAejrC,WACXirC,eAAeC,gBACjBjqC,KAAK2D,YAAYzE,MAAM8qC,eAAeE,gBAEtClqC,KAAK2D,YAAY5E,YAGvBgrC,cA7C8Bh7B,aAAUkC,yKCfxC,SAAAoP,UAA4B5L,iBACA6L,QAC1B,WAD0B,KAAAA,SAAAA,OAAAxe,QAA8C0e,uBACjE,SAAC3f,QAA0B,MAAAA,QAAOqC,KAAK,GAAIinC,kBAAiB11B,iBAAkB6L,OAAO8pB,QAAS9pB,OAAnE+pB,2OA1DpC9mC,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BASrB0C,SAAqB0e,uBAChC4pB,SAAS,EACTC,UAAU,GA2CIvoC,QAAQue,SAGvBA,QAED,IAAA8pB,kBAAA,WACE,QAAAA,kBAAoB11B,iBACA21B,QACAC,UAFArqC,KAAgByU,iBAAhBA,iBACAzU,KAAOoqC,QAAPA,QACApqC,KAAQqqC,SAARA,SAQtB,MALEF,kBAAA3pC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UACZ,GAAI8oC,oBAAmB5pC,WAAYV,KAAKyU,iBAAkBzU,KAAKoqC,QAASpqC,KAAKqqC,YAGnFF,oBAOAG,mBAAA,SAAA7qC,QAKE,QAAA6qC,oBAAsB3mC,YACF8Q,iBACA81B,SACAC,WAClB/qC,OAAAM,KAAAC,KAAM2D,aAJc3D,KAAW2D,YAAXA,YACF3D,KAAgByU,iBAAhBA,iBACAzU,KAAQuqC,SAARA,SACAvqC,KAASwqC,UAATA,UALZxqC,KAAiByqC,mBAAG,EAwE9B,MA3EuCxqC,WAAAqqC,mBAAqB7qC,QAYhD6qC,mBAAA9pC,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAIoB,KAAK4yB,UACH5yB,KAAKwqC,YACPxqC,KAAKyqC,mBAAoB,EACzBzqC,KAAK0qC,eAAiB9rC,WAEnB,CACL,GAAM8Z,UAAW1Y,KAAK2qC,oBAAoB/rC,MACtC8Z,WACF1Y,KAAK4B,IAAI5B,KAAK4yB,UAAYtvB,oBAAiBW,kBAACjE,KAAM0Y,WAEhD1Y,KAAKuqC,WACPvqC,KAAK2D,YAAY7E,KAAKF,OAClBoB,KAAKwqC,YACPxqC,KAAKyqC,mBAAoB,EACzBzqC,KAAK0qC,eAAiB9rC,UAMtB0rC,mBAAA9pC,UAAmBmqC,oBAA3B,SAA4B/rC,OAC1B,IACE,MAAOoB,MAAKyU,iBAAiB7V,OAC7B,MAAOK,KAEP,MADAe,MAAK2D,YAAYzE,MAAMD,KAChB,OAIDqrC,mBAAA9pC,UAAYq0B,aAAtB,WACE,GAAA3yB,IAAwElC,KAAhE4yB,UAAA1wB,GAAS0wB,SAAE1wB,IAAcwoC,eAAExoC,GAAiBuoC,kBAAEvoC,GAASsoC,SAE/DxqC,MAAK0qC,eAAiB,KACtB1qC,KAAKyqC,mBAAoB,EAErB7X,YACF5yB,KAAK8yB,OAAOF,WACZ5yB,KAAK4yB,UAAY,KACjBA,UAAUnrB,gBAIN6iC,mBAAA9pC,UAAaoqC,cAArB,WACE,GAAA1oC,IAAqFlC,KAA7E2D,YAAAzB,GAAWyB,YAAEivB,UAAA1wB,GAAS0wB,UAAE4X,UAAAtoC,GAASsoC,UAAEE,eAAAxoC,GAAcwoC,eAAED,kBAAAvoC,GAAiBuoC,iBACxE7X,YAAa4X,WAAaC,oBAC5B9mC,YAAY7E,KAAK4rC,gBACjB1qC,KAAK0qC,eAAiB,KACtB1qC,KAAKyqC,mBAAoB,IAI7BH,mBAAA9pC,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT3F,KAAK4qC,gBACL5qC,KAAK60B,gBAGPyV,mBAAA9pC,UAAcqF,eAAd,WACE7F,KAAK4qC,gBACL5qC,KAAK60B,gBAETyV,oBA3EuC/mC,kBAAeW,gMCpCtD,SAAAuc,cAAgC/H,SACA5Y,UACAwgB,QAC9B,WAF8B,KAAAxgB,YAAAA,UAAA2K,QAA6BG,WAC7B,KAAA0V,SAAAA,OAAAC,WAA8CC,uBACrE,SAAC3f,QAA0B,MAAAA,QAAOqC,KAAK,GAAI2nC,sBAAqBnyB,SAAU5Y,UAAWwgB,OAAO8pB,QAAS9pB,OAA1E+pB,YAoEpC,QAAA3rC,cAAyBC,KACfA,IAAU+B,WACPmyB,+OAxHb9jB,aAAA3P,WAA2B,mBAG3BqL,QAAArL,WAAsB,wBAEtBmhB,WAAAnhB,WAAsD,0BA0CtC0C,SAAY2e,aAI3BA,YAED,IAAAoqB,sBAAA,WACE,QAAAA,sBAAoBnyB,SACA5Y,UACAsqC,QACAC,UAHArqC,KAAQ0Y,SAARA,SACA1Y,KAASF,UAATA,UACAE,KAAOoqC,QAAPA,QACApqC,KAAQqqC,SAARA,SAQtB,MALEQ,sBAAArqC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UACZ,GAAIspC,wBAAuBpqC,WAAYV,KAAK0Y,SAAU1Y,KAAKF,UAAWE,KAAKoqC,QAASpqC,KAAKqqC,YAG/FQ,wBAOAC,uBAAA,SAAArrC,QAKE,QAAAqrC,wBAAYnnC,YACQ+U,SACA5Y,UACAsqC,QACAC,UAClB5qC,OAAAM,KAAAC,KAAM2D,aAJY3D,KAAQ0Y,SAARA,SACA1Y,KAASF,UAATA,UACAE,KAAOoqC,QAAPA,QACApqC,KAAQqqC,SAARA,SAPZrqC,KAAiByqC,mBAAY,EAC7BzqC,KAAc0qC,eAAM,KAqC9B,MAxCwCzqC,WAAA6qC,uBAAarrC,QAazCqrC,uBAAAtqC,UAAKmyB,MAAf,SAAgB/zB,OACVoB,KAAK4yB,UACH5yB,KAAKqqC,WACPrqC,KAAK0qC,eAAiB9rC,MACtBoB,KAAKyqC,mBAAoB,IAG3BzqC,KAAK4B,IAAI5B,KAAK4yB,UAAY5yB,KAAKF,UAAUa,SAASjC,aAAcsB,KAAK0Y,UAAYhY,WAAYV,QACzFA,KAAKoqC,SACPpqC,KAAK2D,YAAY7E,KAAKF,SAK5BksC,uBAAAtqC,UAAaqyB,cAAb,WACE,GAAMD,WAAY5yB,KAAK4yB,SACnBA,aACE5yB,KAAKqqC,UAAYrqC,KAAKyqC,oBACxBzqC,KAAK2D,YAAY7E,KAAKkB,KAAK0qC,gBAC3B1qC,KAAK0qC,eAAiB,KACtB1qC,KAAKyqC,mBAAoB,GAE3B7X,UAAUnrB,cACVzH,KAAK8yB,OAAOF,WACZ5yB,KAAK4yB,UAAY,OAGvBkY,wBAxCwC/7B,aAAUkC,iKClElD,SAAA2P,cAAgC9gB,WAC9B,WAD8B,KAAAA,YAAAA,UAAA2K,QAA6BG,OACpD,SAAC/J,QAA0B,MAAAA,QAAOqC,KAAK,GAAI6nC,sBAAhBjrC,4OANpCiP,aAAA3P,WAA2B,mBAE3BqL,QAAArL,WAAsB,uBAGN0C,SAAY8e,aAE3BA,YAED,IAAA+B,cAAA,WACE,QAAAA,cAAmB/jB,MAAiBoM,UAAjBhL,KAAKpB,MAALA,MAAiBoB,KAAQgL,SAARA,SAGtC,MAAA2X,gBAJa7gB,SAAY6gB,aAIxBA,YAED,IAAAooB,sBAAA,WACE,QAAAA,sBAAoBjrC,WAAAE,KAASF,UAATA,UAOtB,MAHEirC,sBAAAvqC,UAAIT,KAAJ,SAAKuQ,SAAuCzP,QAC1C,MAAOA,QAAOW,UAAU,GAAIwpC,wBAAuB16B,SAAUtQ,KAAKF,aAEtEirC,wBAOAC,uBAAA,SAAAvrC,QAGE,QAAAurC,wBAAYrnC,YAAkD7D,WAC5DL,OAAAM,KAAAC,KAAM2D,aADsD3D,KAASF,UAATA,UAFtDE,KAAQirC,SAAW,EAKzBjrC,KAAKirC,SAAWnrC,UAAUikB,MAU9B,MAhBwC9jB,WAAA+qC,uBAAavrC,QASzCurC,uBAAAxqC,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAImlB,KAAM/jB,KAAKF,UAAUikB,MACrBmnB,KAAOnnB,IAAM/jB,KAAKirC,QACtBjrC,MAAKirC,SAAWlnB,IAEhB/jB,KAAK2D,YAAY7E,KAAK,GAAI6jB,cAAa/jB,MAAOssC,QAElDF,wBAhBwCj8B,aAAUkC,oVCzBlDk6B,aAAA,SAAA1rC,QACE,QAAA0rC,gBACE,GAAMlsC,KAAWQ,OAAAM,KAAAC,KAAM,uBAChBA,MAAMykC,KAAOxlC,IAAIwlC,KAAO,eACxBzkC,KAAM0kC,MAAQzlC,IAAIylC,MAClB1kC,KAAMsjB,QAAUrkB,IAAIqkB,QAE/B,MAPkCrjB,WAAAkrC,aAAK1rC,QAOvC0rC,cAPkC17B,MAArB3N,SAAYqpC,aAOxBA,yMC8DD,SAAAtqB,SAA2BC,IACAhhB,eAAA,KAAAA,YAAAA,UAAA2K,QAA6BG,MACtD,IAAMwgC,iBAAkBrY,SAAME,OAACnS,KACzBuqB,QAAUD,iBAAoBtqB,IAAMhhB,UAAUikB,MAAS6L,KAAKuH,IAAYrW,IAC9E,OAAO,UAACjgB,QAA0B,MAAAA,QAAOqC,KAAK,GAAIooC,iBAAgBD,QAASD,gBAAiBtrC,UAAW,GAAIyrC,gBAAzEJ,+OA/EpC1gC,QAAArL,WAAsB,wBACtB2zB,SAAA3zB,WAAuB,oBAEvB2P,aAAA3P,WAA2B,mBAI3BmsC,eAAAnsC,WAA6B,yBAoEb0C,SAAO+e,QAKtBA,OAED,IAAAyqB,iBAAA,WACE,QAAAA,iBAAoBD,QACAD,gBACAtrC,UACA0rC,eAHAxrC,KAAOqrC,QAAPA,QACArrC,KAAeorC,gBAAfA,gBACAprC,KAASF,UAATA,UACAE,KAAawrC,cAAbA,cAQtB,MALEF,iBAAA9qC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIiqC,mBAC1B/qC,WAAYV,KAAKorC,gBAAiBprC,KAAKqrC,QAASrrC,KAAKF,UAAWE,KAAKwrC,iBAG3EF,mBAOAG,kBAAA,SAAAhsC,QAIE,QAAAgsC,mBAAY9nC,YACQynC,gBACAC,QACAvrC,UACA0rC,eAClB/rC,OAAAM,KAAAC,KAAM2D,aAJY3D,KAAeorC,gBAAfA,gBACAprC,KAAOqrC,QAAPA,QACArrC,KAASF,UAATA,UACAE,KAAawrC,cAAbA,cANZxrC,KAAMooB,OAAiC,KAQ7CpoB,KAAK0rC,kBAmCT,MA7CmCzrC,WAAAwrC,kBAAahsC,QAa/BgsC,kBAAeE,gBAA9B,SAAkCjrC,YAChCA,WAAWxB,MAAMwB,WAAW8qC,gBAGtBC,kBAAAjrC,UAAekrC,gBAAvB,WACU,GAAAtjB,QAAApoB,KAAMooB,MACVA,QAMFpoB,KAAKooB,OAAyCA,OAAOznB,SAASX,KAAMA,KAAKqrC,SAEzErrC,KAAK4B,IAAI5B,KAAKooB,OAAyCpoB,KAAKF,UAAUa,SACpE8qC,kBAAkBE,gBAAiB3rC,KAAKqrC,QAASrrC,QAK7CyrC,kBAAAjrC,UAAKmyB,MAAf,SAAgB/zB,OACToB,KAAKorC,iBACRprC,KAAK0rC,kBAEPjsC,OAAKe,UAACmyB,MAAA5yB,KAAAC,KAAMpB,QAGJ6sC,kBAAAjrC,UAAYq0B,aAAtB,WACE70B,KAAKooB,OAAS,KACdpoB,KAAKF,UAAY,KACjBE,KAAKwrC,cAAgB,MAEzBC,mBA7CmC18B,aAAUkC,8GCtG7C,SAAAgiB,QAAuBr0B,OACrB,MAAOA,iBAAiBgtC,QAASlF,OAAO9nC,iBAD1BkD,SAAMmxB,OAErBA,iNC8DD,SAAAjS,aAAkCF,IACAG,eACAnhB,WAChC,WADgC,KAAAA,YAAAA,UAAA2K,QAA6BG,OACtD,SAAC/J,QACN,GAAIuqC,iBAAkBrY,SAAME,OAACnS,KACzBuqB,QAAUD,iBAAoBtqB,IAAMhhB,UAAUikB,MAAS6L,KAAKuH,IAAYrW,IAC5E,OAAOjgB,QAAOqC,KAAK,GAAI2oC,qBAAoBR,QAASD,gBAAiBnqB,eAAgBnhB,4OAlEzF2K,QAAArL,WAAsB,wBAGtB2zB,SAAA3zB,WAAuB,oBACvBmE,kBAAAnE,WAAgC,wBAChCkE,oBAAAlE,WAAkC,8BAuDlB0C,SAAWkf,YAQ1BA,WAED,IAAA6qB,qBAAA,WACE,QAAAA,qBAAoBR,QACAD,gBACAnqB,eACAnhB,WAHAE,KAAOqrC,QAAPA,QACArrC,KAAeorC,gBAAfA,gBACAprC,KAAcihB,eAAdA,eACAjhB,KAASF,UAATA,UAQtB,MALE+rC,qBAAArrC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIsqC,uBAC1BprC,WAAYV,KAAKorC,gBAAiBprC,KAAKqrC,QAASrrC,KAAKihB,eAAgBjhB,KAAKF,aAGhF+rC,uBAOAC,sBAAA,SAAArsC,QAIE,QAAAqsC,uBAAYnoC,YACQynC,gBACAC,QACApqB,eACAnhB,WAClBL,OAAAM,KAAAC,KAAM2D,aAJY3D,KAAeorC,gBAAfA,gBACAprC,KAAOqrC,QAAPA,QACArrC,KAAcihB,eAAdA,eACAjhB,KAASF,UAATA,UANZE,KAAMooB,OAAwC,KAQpDpoB,KAAK0rC,kBAqCT,MA/C0CzrC,WAAA6rC,sBAAqBrsC,QAa9CqsC,sBAAeH,gBAA9B,SAAqCjrC,YAC3B,GAAAugB,gBAAAvgB,WAAcugB,cACfvgB,YAAYk1B,yBACnBl1B,WAAWkB,IAAI0B,oBAAiBW,kBAACvD,WAAYugB,kBAGvC6qB,sBAAAtrC,UAAekrC,gBAAvB,WACU,GAAAtjB,QAAApoB,KAAMooB,MACVA,QAMFpoB,KAAKooB,OAAgDA,OAAOznB,SAASX,KAAMA,KAAKqrC,SAEhFrrC,KAAK4B,IAAI5B,KAAKooB,OAAgDpoB,KAAKF,UAAUa,SAC3EmrC,sBAAsBH,gBAAiB3rC,KAAKqrC,QAASrrC,QAKjD8rC,sBAAAtrC,UAAKmyB,MAAf,SAAgB/zB,OACToB,KAAKorC,iBACRprC,KAAK0rC,kBAEPjsC,OAAKe,UAACmyB,MAAA5yB,KAAAC,KAAMpB,QAGJktC,sBAAAtrC,UAAYq0B,aAAtB,WACE70B,KAAKooB,OAAS,KACdpoB,KAAKF,UAAY,KACjBE,KAAKihB,eAAiB,MAE1B6qB,uBA/C0CvoC,kBAAeW,sICvDzD,SAAAkV,KAA0B1W,QAAyCsU,SACjE,MAAO,UAAsBnW,QAC3B,GAAuB,kBAAZ6B,SACT,KAAM,IAAIkF,WAAU,6DAEtB,OAAO/G,QAAOqC,KAAK,GAAI6oC,aAAYrpC,QAASsU,0OA1ChDjI,aAAA3P,WAA2B,kBAqCX0C,SAAGsX,IAOlBA,GAED,IAAA2yB,aAAA,WACE,QAAAA,aAAoBrpC,QAAiDsU,SAAjDhX,KAAO0C,QAAPA,QAAiD1C,KAAOgX,QAAPA,QAMvE,MAHE+0B,aAAAvrC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIwqC,eAActrC,WAAYV,KAAK0C,QAAS1C,KAAKgX,WAE7E+0B,cAPajqC,SAAWiqC,YAOvBA,WAOD,IAAAC,eAAA,SAAAvsC,QAIE,QAAAusC,eAAYroC,YACQjB,QACRsU,SACVvX,OAAAM,KAAAC,KAAM2D,aAFY3D,KAAO0C,QAAPA,QAJpB1C,KAAK2M,MAAW,EAOd3M,KAAKgX,QAAUA,SAAWhX,KAe9B,MAvBkCC,WAAA+rC,cAAavsC,QAanCusC,cAAAxrC,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAIoF,OACJ,KACEA,OAAShE,KAAK0C,QAAQ3C,KAAKC,KAAKgX,QAASpY,MAAOoB,KAAK2M,SACrD,MAAO1N,KAEP,WADAe,MAAK2D,YAAYzE,MAAMD,KAGzBe,KAAK2D,YAAY7E,KAAKkF,SAE1BgoC,eAvBkCj9B,aAAUkC,iKCjD5C,SAAAkQ,WAA6BrhB,WAC3B,WAD2B,KAAAA,YAAAA,UAAA2K,QAA6BG,OACxDyO,MAAUD,IAAC,SAACxa,OAAa,MAAA,IAAIqtC,WAAUrtC,MAAOkB,UAArBikB,YAX3BtZ,qBAAArL,WAAsB,yBAEtBia,MAAAja,WAAoB,qBAQJ0C,SAASqf,UAGxBA,SAED,IAAA8qB,WAAA,WACE,QAAAA,WAAmBrtC,MAAiBuiB,WAAjBnhB,KAAKpB,MAALA,MAAiBoB,KAASmhB,UAATA,UAEtC,MAAA8qB,aAHanqC,SAASmqC,UAGrBA,gIC4BD,SAAA5uB,MAA2B7C,YAAqDC,MAC9E,GAAIyxB,UAAU,CAUd,OAJI5rC,WAAUC,QAAU,IACtB2rC,SAAU,GAGL,SAA8BrrC,QACnC,MAAOA,QAAOqC,KAAK,GAAIipC,cAAa3xB,YAAaC,KAAMyxB,0OA1D3Dn9B,aAAA3P,WAA2B,kBA8CX0C,SAAIub,KAcnBA,IAED,IAAA8uB,cAAA,WACE,QAAAA,cAAoB3xB,YAA6DC,KAAsByxB,aAAR,KAAAA,UAAAA,SAAgC,GAA3GlsC,KAAWwa,YAAXA,YAA6Dxa,KAAIya,KAAJA,KAAsBza,KAAOksC,QAAPA,QAKzG,MAHEC,cAAA3rC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAI4qC,gBAAe1rC,WAAYV,KAAKwa,YAAaxa,KAAKya,KAAMza,KAAKksC,WAE7FC,gBAOAC,eAAA,SAAA3sC,QAYE,QAAA2sC,gBAAYzoC,YAAoC6W,YAA6D6xB,MACzFH,SAClBzsC,OAAAM,KAAAC,KAAM2D,aAFwC3D,KAAWwa,YAAXA,YAA6Dxa,KAAKqsC,MAALA,MACzFrsC,KAAOksC,QAAPA,QAZZlsC,KAAK8K,MAAW,EAoC1B,MArCmC7K,WAAAmsC,eAAa3sC,QAG9CyH,OAAA8xB,eAAIoT,eAAA5rC,UAAI,YAAR,WACE,MAAOR,MAAKqsC,WAGd,SAASztC,OACPoB,KAAKksC,SAAU,EACflsC,KAAKqsC,MAAQztC,mCAJd,IAYSwtC,eAAA5rC,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAKoB,KAAKksC,QAIR,MAAOlsC,MAAKy2B,SAAS73B,MAHrBoB,MAAKya,KAAO7b,MACZoB,KAAK2D,YAAY7E,KAAKF,QAMlBwtC,eAAA5rC,UAAQi2B,SAAhB,SAAiB73B,OACf,GACIoF,QADE8G,MAAQ9K,KAAK8K,OAEnB,KACE9G,OAAShE,KAAKwa,YAAexa,KAAKya,KAAM7b,MAAOkM,OAC/C,MAAO7L,KACPe,KAAK2D,YAAYzE,MAAMD,KAEzBe,KAAKya,KAAOzW,OACZhE,KAAK2D,YAAY7E,KAAKkF,SAE1BooC,gBArCmCr9B,aAAUkC,+VCnE7C6oB,wBAAA,SAAAr6B,QACE,QAAAq6B,2BACE,GAAM76B,KAAWQ,OAAAM,KAAAC,KAAM,wBAChBA,MAAMykC,KAAOxlC,IAAIwlC,KAAO,0BACxBzkC,KAAM0kC,MAAQzlC,IAAIylC,MAClB1kC,KAAMsjB,QAAUrkB,IAAIqkB,QAE/B,MAP6CrjB,WAAA65B,wBAAKr6B,QAOlDq6B,yBAP6CrqB,MAAhC3N,SAAuBg4B,wBAOnCA,wNC2BD,SAAA/Z,UAA4BpT,OAC1B,MAAO,UAAkC9L,QACvC,MAAc,KAAV8L,MACK,GAAIrI,mBAAeE,gBAEnB3D,OAAOqC,KAAK,GAAIopC,kBAAiB3/B,wOAhD9CoC,aAAA3P,WAA2B,mBAC3By6B,0BAAAz6B,WAAwC,qCACxCkF,kBAAAlF,WAAgC,kCAyChB0C,SAAQie,SAQvBA,QAED,IAAAusB,kBAAA,WACE,QAAAA,kBAAoBrnC,OAClB,GADkBjF,KAAKiF,MAALA,MACdjF,KAAKiF,MAAQ,EACf,KAAM,IAAI40B,2BAAuBC,wBAOvC,MAHEwS,kBAAA9rC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAI+qC,oBAAmB7rC,WAAYV,KAAKiF,SAEpEqnC,oBAOAC,mBAAA,SAAA9sC,QAIE,QAAA8sC,oBAAY5oC,YAAoCsB,OAC9CxF,OAAAM,KAAAC,KAAM2D,aADwC3D,KAAKiF,MAALA,MAHxCjF,KAAIwlC,KAAa,GAAIrgC,OACrBnF,KAAK2M,MAAW,EAmC1B,MArCoC1M,WAAAssC,mBAAa9sC,QAQrC8sC,mBAAA/rC,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAM4mC,MAAOxlC,KAAKwlC,KACZvgC,MAAQjF,KAAKiF,MACb0H,MAAQ3M,KAAK2M,OAEnB,IAAI64B,KAAKjlC,OAAS0E,MAChBugC,KAAK3hB,KAAKjlB,WACL,CAEL4mC,KADc74B,MAAQ1H,OACRrG,QAIR2tC,mBAAA/rC,UAAS2J,UAAnB,WACE,GAAMxG,aAAc3D,KAAK2D,YACrBgJ,MAAQ3M,KAAK2M,KAEjB,IAAIA,MAAQ,EAIV,IAAK,GAHC1H,OAAQjF,KAAK2M,OAAS3M,KAAKiF,MAAQjF,KAAKiF,MAAQjF,KAAK2M,MACrD64B,KAAQxlC,KAAKwlC,KAEVpgC,EAAI,EAAGA,EAAIH,MAAOG,IAAK,CAC9B,GAAMiH,KAAOM,QAAW1H,KACxBtB,aAAY7E,KAAK0mC,KAAKn5B,MAI1B1I,YAAY5E,YAEhBwtC,oBArCoCx9B,aAAUkC,4IC/B9C,SAAA6D,gBAAqCC,cACnC,WADmC,KAAAA,eAAAA,aAAsB,MAClD,SAAClU,QAA0B,MAAAA,QAAOqC,KAAK,GAAIspC,wBAAhBz3B,+OAvCpChG,aAAA3P,WAA2B,kBAsCX0C,SAAcgT,eAE7BA,cAED,IAAA03B,wBAAA,WAEE,QAAAA,wBAAoBz3B,cAAA/U,KAAY+U,aAAZA,aAMtB,MAHEy3B,wBAAAhsC,UAAIT,KAAJ,SAAKW,WAA+BG,QAClC,MAAOA,QAAOW,UAAU,GAAIirC,0BAAyB/rC,WAAYV,KAAK+U,gBAE1Ey3B,0BAOAC,yBAAA,SAAAhtC,QAGE,QAAAgtC,0BAAY9oC,YAAwCoR,cAClDtV,OAAAM,KAAAC,KAAM2D,aAD4C3D,KAAY+U,aAAZA,aAF5C/U,KAAOqY,SAAY,EAiB7B,MAlB6CpY,WAAAwsC,yBAAahtC,QAO9CgtC,yBAAAjsC,UAAKmyB,MAAf,SAAgB/zB,OACdoB,KAAKqY,SAAU,EACfrY,KAAK2D,YAAY7E,KAAKF,QAGd6tC,yBAAAjsC,UAAS2J,UAAnB,WACMnK,KAAKqY,SACPrY,KAAK2D,YAAY7E,KAAKkB,KAAK+U,cAE7B/U,KAAK2D,YAAY5E,YAErB0tC,0BAlB6C19B,aAAUkC,mNCFvD,SAAAqL,QAA6B9B,YAAsDC,MAMjF,MAAIna,WAAUC,QAAU,EACf,SAAwCM,QAC7C,MAAO6rC,QAAIC,KAACrvB,OAAID,KAAC7C,YAAaC,MAAOuF,WAAQD,SAAC,GAAI/K,iBAAcF,eAAC2F,OAAO5Z,SAGrE,SAAgCA,QACrC,MAAA6rC,QAAWC,KAAArvB,OAAKD,KAAW,SAAC6gB,IAAKt/B,MAAOkM,OACtC,MAAO0P,aAAe0jB,IAAKt/B,MAAOkM,MAAQ,KACxCkV,WAAQD,SAAC,IAAIlf,YAtErByc,oBAAAle,WAAqB,wBACrB4gB,WAAA5gB,WAAyB,2BACzB4V,iBAAA5V,WAA+B,iCAE/BstC,OAAAttC,WAAqB,iBAoDL0C,SAAMwa,OAgBrBA,sICtED,SAAAswB,gBAA2BvF,IAAUwF,KAAS/hC,OAE5C,MADAu8B,KAAIxjB,KAAKgpB,MACFxF,IAGT,QAAAhmB,WACE,MAAO9E,UAAMD,OAACswB,sBAThBrwB,sBAAAnd,WAAuB,yBAQP0C,SAAOuf,QAEtBA,kLCmCD,SAAAE,QAA0BC,kBACxB,MAAO,UAAgC3gB,QACrC,MAAOA,QAAOqC,KAAK,GAAI4pC,gBAAetrB,mPA7C1C1S,UAAA1P,WAAwB,gBAExBmE,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BAuClB0C,SAAMyf,OAIrBA,MAED,IAAAurB,gBAAA,WAEE,QAAAA,gBAAoBtrB,kBAAAxhB,KAAgBwhB,iBAAhBA,iBAWtB,MAREsrB,gBAAAtsC,UAAIT,KAAJ,SAAKW,WAAuCG,QAC1C,GAAMksC,kBAAmB,GAAIC,kBAAiBtsC,YACxCusC,mBAAqBpsC,OAAOW,UAAUurC,iBAI5C,OAHKE,oBAAmBxjC,QACtBsjC,iBAAiBnrC,IAAI0B,oBAAiBW,kBAAC8oC,iBAAkB/sC,KAAKwhB,mBAEzDyrB,oBAEXH,kBAOAE,iBAAA,SAAAvtC,QAIE,QAAAutC,kBAAYrpC,aACVlE,OAAAM,KAAAC,KAAM2D,aAHA3D,KAAMuhB,OAAe,GAAIzS,WAAOS,QAItC5L,YAAY7E,KAAKkB,KAAKuhB,QA4C1B,MAlDkCthB,WAAA+sC,iBAAuBvtC,QASvDutC,iBAAAxsC,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT3F,KAAKktC,cAGPF,iBAAAxsC,UAAWy3B,YAAX,SAAY/4B,MAAYyG,UACtB3F,KAAK+D,OAAO7E,QAGd8tC,iBAAAxsC,UAAcqF,eAAd,SAAeF,UACb3F,KAAKmK,aAGG6iC,iBAAAxsC,UAAKmyB,MAAf,SAAgB/zB,OACdoB,KAAKuhB,OAAOziB,KAAKF,QAGTouC,iBAAAxsC,UAAMuD,OAAhB,SAAiB9E,KACfe,KAAKuhB,OAAOriB,MAAMD,KAClBe,KAAK2D,YAAYzE,MAAMD,MAGf+tC,iBAAAxsC,UAAS2J,UAAnB,WACEnK,KAAKuhB,OAAOxiB,WACZiB,KAAK2D,YAAY5E,YAGTiuC,iBAAAxsC,UAAYq0B,aAAtB,WACE70B,KAAKuhB,OAAS,MAGRyrB,iBAAAxsC,UAAU0sC,WAAlB,WACE,GAAMC,YAAantC,KAAKuhB,MACpB4rB,aACFA,WAAWpuC,UAEb,IAAM4E,aAAc3D,KAAK2D,YACnBypC,UAAYptC,KAAKuhB,OAAS,GAAIzS,WAAOS,OAC3C5L,aAAY7E,KAAKsuC,YAErBJ,kBAlDkCzpC,kBAAeW,6JCjBjD,SAAAwd,aAA+BC,WACAC,kBAC7B,WAD6B,KAAAA,mBAAAA,iBAA4B,GAClD,SAAqC/gB,QAC1C,MAAOA,QAAOqC,KAAK,GAAImqC,qBAAuB1rB,WAAYC,mPAxD9D7S,aAAA3P,WAA2B,mBAE3B0P,UAAA1P,WAAwB,eAmDR0C,SAAW4f,YAK1BA,WAED,IAAA2rB,qBAAA,WAEE,QAAAA,qBAAoB1rB,WACAC,kBADA5hB,KAAU2hB,WAAVA,WACA3hB,KAAgB4hB,iBAAhBA,iBAMtB,MAHEyrB,qBAAA7sC,UAAIT,KAAJ,SAAKW,WAAuCG,QAC1C,MAAOA,QAAOW,UAAU,GAAI8rC,uBAAsB5sC,WAAYV,KAAK2hB,WAAY3hB,KAAK4hB,oBAExFyrB,uBAOAC,sBAAA,SAAA7tC,QAIE,QAAA6tC,uBAAsB3pC,YACFge,WACAC,kBAClBniB,OAAAM,KAAAC,KAAM2D,aAHc3D,KAAW2D,YAAXA,YACF3D,KAAU2hB,WAAVA,WACA3hB,KAAgB4hB,iBAAhBA,iBALZ5hB,KAAOutC,SAAmB,GAAIz+B,WAAOS,SACrCvP,KAAK2M,MAAW,EAMtBhJ,YAAY7E,KAAKkB,KAAKutC,QAAQ,IAgDlC,MAxDuCttC,WAAAqtC,sBAAa7tC,QAWxC6tC,sBAAA9sC,UAAKmyB,MAAf,SAAgB/zB,OAOd,IAAK,GANCgjB,kBAAoB5hB,KAAK4hB,iBAAmB,EAAK5hB,KAAK4hB,iBAAmB5hB,KAAK2hB,WAC9Ehe,YAAc3D,KAAK2D,YACnBge,WAAa3hB,KAAK2hB,WAClB4rB,QAAUvtC,KAAKutC,QACfvoC,IAAMuoC,QAAQhtC,OAEX6E,EAAI,EAAGA,EAAIJ,MAAQhF,KAAKyJ,OAAQrE,IACvCmoC,QAAQnoC,GAAGtG,KAAKF,MAElB,IAAM6oB,GAAIznB,KAAK2M,MAAQgV,WAAa,CAIpC,IAHI8F,GAAK,GAAKA,EAAI7F,kBAAqB,IAAM5hB,KAAKyJ,QAChD8jC,QAAQprC,QAAQpD,aAEZiB,KAAK2M,MAAQiV,kBAAqB,IAAM5hB,KAAKyJ,OAAQ,CACzD,GAAMgY,UAAS,GAAI3S,WAAOS,OAC1Bg+B,SAAQ1pB,KAAKpC,UACb9d,YAAY7E,KAAK2iB,YAIX6rB,sBAAA9sC,UAAMuD,OAAhB,SAAiB9E,KACf,GAAMsuC,SAAUvtC,KAAKutC,OACrB,IAAIA,QACF,KAAOA,QAAQhtC,OAAS,IAAMP,KAAKyJ,QACjC8jC,QAAQprC,QAAQjD,MAAMD,IAG1Be,MAAK2D,YAAYzE,MAAMD,MAGfquC,sBAAA9sC,UAAS2J,UAAnB,WACE,GAAMojC,SAAUvtC,KAAKutC,OACrB,IAAIA,QACF,KAAOA,QAAQhtC,OAAS,IAAMP,KAAKyJ,QACjC8jC,QAAQprC,QAAQpD,UAGpBiB,MAAK2D,YAAY5E,YAGTuuC,sBAAA9sC,UAAYq0B,aAAtB,WACE70B,KAAK2M,MAAQ,EACb3M,KAAKutC,QAAU,MAEnBD,uBAxDuCv+B,aAAUkC,sWC5EjDhK,eAAA7H,WAA6B,qBAgB7BouC,OAAA,SAAA/tC,QACE,QAAA+tC,QAAY1tC,UAAsB0oB,MAChC/oB,OAAAM,KAAOC,MAeX,MAjB+BC,WAAAutC,OAAY/tC,QAclC+tC,OAAAhtC,UAAQG,SAAf,SAAgBc,MAAWwT,OACzB,WADyB,KAAAA,QAAAA,MAAiB,GACnCjV,MAEXwtC,QAjB+BvmC,eAAYa,aAA9BhG,SAAM0rC,OAiBlBA,2XClCD3+B,OAAAzP,WAAqB,kBACrBquC,SAAAruC,WAAuB,yBASvB8pB,YAAA,SAAAzpB,QAOE,QAAAypB,aAAsBppB,UACA0oB,MACpB/oB,OAAAM,KAAAC,KAAMF,UAAW0oB,MAFGxoB,KAASF,UAATA,UACAE,KAAIwoB,KAAJA,KAHZxoB,KAAO0tC,SAAY,EA0I/B,MA/IoCztC,WAAAipB,YAASzpB,QAYpCypB,YAAA1oB,UAAQG,SAAf,SAAgBc,MAAWwT,OAEzB,OAFyB,KAAAA,QAAAA,MAAiB,GAEtCjV,KAAKyJ,OACP,MAAOzJ,KAITA,MAAKyB,MAAQA,MAIbzB,KAAK0tC,SAAU,CAEf,IAAMhlB,IAAK1oB,KAAK0oB,GACV5oB,UAAYE,KAAKF,SA+BvB,OARU,OAAN4oB,KACF1oB,KAAK0oB,GAAK1oB,KAAK8oB,eAAehpB,UAAW4oB,GAAIzT,QAG/CjV,KAAKiV,MAAQA,MAEbjV,KAAK0oB,GAAK1oB,KAAK0oB,IAAM1oB,KAAK2oB,eAAe7oB,UAAWE,KAAK0oB,GAAIzT,OAEtDjV,MAGCkpB,YAAA1oB,UAAcmoB,eAAxB,SAAyB7oB,UAA2B4oB,GAAUzT,OAC5D,WAD4D,KAAAA,QAAAA,MAAiB,GACtEpG,OAAIF,KAACg/B,YAAY7tC,UAAUsnB,MAAMqG,KAAK3tB,UAAWE,MAAOiV,QAGvDiU,YAAA1oB,UAAcsoB,eAAxB,SAAyBhpB,UAA2B4oB,GAASzT,OAE3D,WAF2D,KAAAA,QAAAA,MAAiB,GAE9D,OAAVA,OAAkBjV,KAAKiV,QAAUA,QAA0B,IAAjBjV,KAAK0tC,QAC1ChlB,GAIF7Z,OAAIF,KAACi/B,cAAcllB,SAAOtoB,QAAaA,IAOzC8oB,YAAA1oB,UAAO8nB,QAAd,SAAe7mB,MAAUwT,OAEvB,GAAIjV,KAAKyJ,OACP,MAAO,IAAIgG,OAAM,+BAGnBzP,MAAK0tC,SAAU,CACf,IAAMxuC,OAAQc,KAAK+oB,SAAStnB,MAAOwT,MACnC,IAAI/V,MACF,MAAOA,QACmB,IAAjBc,KAAK0tC,SAAgC,MAAX1tC,KAAK0oB,KAcxC1oB,KAAK0oB,GAAK1oB,KAAK8oB,eAAe9oB,KAAKF,UAAWE,KAAK0oB,GAAI,QAIjDQ,YAAA1oB,UAAQuoB,SAAlB,SAAmBtnB,MAAUwT,OAC3B,GAAIqiB,UAAmB,EACnBvQ,eAAkB3mB,EACtB,KACEJ,KAAKwoB,KAAK/mB,OACV,MAAOH,GACPg2B,SAAU,EACVvQ,aAAezlB,GAAKA,GAAK,GAAImO,OAAMnO,GAErC,GAAIg2B,QAEF,MADAt3B,MAAKyH,cACEsf,YAIDmC,YAAA1oB,UAAYq0B,aAAtB,WAEE,GAAMnM,IAAK1oB,KAAK0oB,GACV5oB,UAAYE,KAAKF,UACjBuoB,QAAUvoB,UAAUuoB,QACpBvd,MAAQud,QAAQ1C,QAAQ3lB,KAE9BA,MAAKwoB,KAAQ,KACbxoB,KAAKyB,MAAQ,KACbzB,KAAK0tC,SAAU,EACf1tC,KAAKF,UAAY,MAEF,IAAXgL,OACFud,QAAQsL,OAAO7oB,MAAO,GAGd,MAAN4d,KACF1oB,KAAK0oB,GAAK1oB,KAAK8oB,eAAehpB,UAAW4oB,GAAI,OAG/C1oB,KAAKiV,MAAQ,MAEjBiU,aA/IoCukB,SAAMD,OAA7B1rC,SAAWonB,YA+IvBA,gHClID2kB,uBAAA,WAIE,QAAAA,WAAoB3lB,gBACRnE,SAAA,KAAAA,MAAAA,IAAoB8pB,UAAU9pB,KADtB/jB,KAAekoB,gBAAfA,gBAElBloB,KAAK+jB,IAAMA,IAiCf,MAHS8pB,WAAArtC,UAAQG,SAAf,SAAmB6nB,KAA4CvT,MAAmBxT,OAChF,WAD6D,KAAAwT,QAAAA,MAAiB,GACvE,GAAIjV,MAAKkoB,gBAAmBloB,KAAMwoB,MAAM7nB,SAASc,MAAOwT,QAnCnD44B,UAAG9pB,IAAiB6nB,KAAK7nB,IAAM6nB,KAAK7nB,IAAM,WAAM,OAAC,GAAD6nB,OAqChEiC,aAvCa/rC,SAAS+rC,UAuCrBA,yWC9DDC,YAAA1uC,WAA0B,kBAG1BmpB,eAAA,SAAA9oB,QAAA,QAAA8oB,kBAAoC9oB,OAAA2B,MAAApB,KAASM,WACpCN,KAAOqoB,WAMProB,KAAMyoB,QAAY,EAOlBzoB,KAASgxB,cAAQ5wB,GA6B1B,MA3CoCH,WAAAsoB,eAAS9oB,QAgBpC8oB,eAAA/nB,UAAK4mB,MAAZ,SAAagB,QAEJ,GAAAC,SAAAroB,KAAOqoB,OAEd,IAAIroB,KAAKyoB,OAEP,WADAJ,SAAQxE,KAAKuE,OAIf,IAAIlpB,MACJc,MAAKyoB,QAAS,CAEd,IACE,GAAIvpB,MAAQkpB,OAAOE,QAAQF,OAAO3mB,MAAO2mB,OAAOnT,OAC9C,YAEKmT,OAASC,QAAQlmB,QAI1B,IAFAnC,KAAKyoB,QAAS,EAEVvpB,MAAO,CACT,KAAOkpB,OAASC,QAAQlmB,SACtBimB,OAAO3gB,aAET,MAAMvI,SAGZqpB,gBA3CoCulB,YAASD,UAAhC/rC,SAAcymB,eA2C1BA,qLC9CDP,2BAAA5oB,WAA4B,+BAC5B6oB,iBAAA7oB,WAA+B,gCA6ClB0C,SAAK8I,MAAG,GAAIqd,kBAAcM,eAACP,cAAWkB,qIC5CnD,SAAAre,WAA0BkjC,KAKxB,OAAQjrC,UAAOC,QAACgrC,MAASA,IAAMC,WAAWD,KAAO,GAAM,KAPzDjrC,uBAAA1D,WAAwB,qBAER0C,SAAS+I,UAMxBA,0NC0ED,SAAAkR,YAA8B+F,gBAC5B,GAAIhiB,WAAwB2K,QAAKG,MAC7BmX,uBAAiC,KACjCC,cAAwBrP,OAAOC,iBAkBnC,OAhBIjQ,eAAWC,YAACtC,UAAU,MACxBR,UAAYQ,UAAU,IAGpBqC,cAAWC,YAACtC,UAAU,IACxBR,UAAYQ,UAAU,GACbkK,YAASK,UAACvK,UAAU,MAC7B0hB,cAAgB1hB,UAAU,IAGxBqC,cAAWC,YAACtC,UAAU,IACxBR,UAAYQ,UAAU,GACbkK,YAASK,UAACvK,UAAU,MAC7ByhB,uBAAyBzhB,UAAU,IAG9B,SAAoCO,QACzC,MAAOA,QAAOqC,KAAK,GAAI+qC,oBAAsBnsB,eAAgBC,uBAAwBC,cAAeliB,aAmIxG,QAAAouC,4BAA2EzsC,OACjE,GAAAf,YAAAe,MAAUf,WAAEohB,eAAArgB,MAAcqgB,eAAEP,OAAA9f,MAAM8f,MACtCA,SACF7gB,WAAWytC,YAAY5sB,QAEzB9f,MAAM8f,OAAS7gB,WAAWwsC,aAC1BltC,KAAKW,SAASc,MAAOqgB,gBAGvB,QAAAssB,wBAAmE3sC,OACzD,GAAAqgB,gBAAArgB,MAAcqgB,eAAEphB,WAAAe,MAAUf,WAAEZ,UAAA2B,MAAS3B,UAAEiiB,uBAAAtgB,MAAsBsgB,uBAC/DR,OAAS7gB,WAAWwsC,aACpB9kB,OAASpoB,KACXH,SAAmCuoB,OAAMA,OAAE7X,aAAmB,MAC5D89B,eAAiC3tC,WAAUA,WAAE6gB,OAAMA,OAAE1hB,QAAOA,QAClEA,SAAQ0Q,aAAezQ,UAAUa,SAAS2tC,oBAAqBxsB,eAAgBusB,eAC/EjmB,OAAOxmB,IAAI/B,QAAQ0Q,cACnB6X,OAAOznB,SAASc,MAAOsgB,wBAGzB,QAAAusB,qBAAgC7sC,OACtB,GAAAf,YAAAe,MAAUf,WAAE6gB,OAAA9f,MAAM8f,OAAE1hB,QAAA4B,MAAO5B,OAC/BA,UAAWA,QAAQuoB,QAAUvoB,QAAQ0Q,cACvC1Q,QAAQuoB,OAAO0K,OAAOjzB,QAAQ0Q,cAEhC7P,WAAWytC,YAAY5sB,uOAlQzBzS,UAAA1P,WAAwB,gBAExBqL,QAAArL,WAAsB,wBACtB2P,aAAA3P,WAA2B,mBAG3BoL,YAAApL,WAA0B,uBAC1BuD,cAAAvD,WAA4B,wBAyEZ0C,SAAUia,WAwBzBA,UAED,IAAAkyB,oBAAA,WAEE,QAAAA,oBAAoBnsB,eACAC,uBACAC,cACAliB,WAHAE,KAAc8hB,eAAdA,eACA9hB,KAAsB+hB,uBAAtBA,uBACA/hB,KAAagiB,cAAbA,cACAhiB,KAASF,UAATA,UAQtB,MALEmuC,oBAAAztC,UAAIT,KAAJ,SAAKW,WAAuCG,QAC1C,MAAOA,QAAOW,UAAU,GAAI+sC,sBAC1B7tC,WAAYV,KAAK8hB,eAAgB9hB,KAAK+hB,uBAAwB/hB,KAAKgiB,cAAehiB,KAAKF,aAG7FmuC,sBA0BAO,eAAA,SAAA/uC,QAAA,QAAA+uC,kBAAgC/uC,OAAA2B,MAAApB,KAAUM,WAChCN,KAAqByuC,sBAAW,EAU1C,MAXgCxuC,WAAAuuC,eAAU/uC,QAGxC+uC,eAAAhuC,UAAI1B,KAAJ,SAAKF,OACHoB,KAAKyuC,wBACLhvC,OAAKe,UAAC1B,KAAAiB,KAAAC,KAAKpB,QAGbsI,OAAA8xB,eAAIwV,eAAAhuC,UAAoB,4BAAxB,WACE,MAAOR,MAAKyuC,mDACb,IACHD,gBAXgC1/B,UAAOS,SAkBvCg/B,qBAAA,SAAA9uC,QAGE,QAAA8uC,sBAAsB5qC,YACFme,eACAC,uBACAC,cACAliB,WAClBL,OAAAM,KAAAC,KAAM2D,aALc3D,KAAW2D,YAAXA,YACF3D,KAAc8hB,eAAdA,eACA9hB,KAAsB+hB,uBAAtBA,uBACA/hB,KAAagiB,cAAbA,cACAhiB,KAASF,UAATA,UANZE,KAAOutC,UASb,IAAMhsB,QAASvhB,KAAKktC,YACpB,IAA+B,OAA3BnrB,wBAAmCA,wBAA0B,EAAG,CAClE,GAAM0S,aAA8B/zB,WAAYV,KAAMuhB,OAAMA,OAAE1hB,QAAc,MACtE60B,eAAoC5S,eAAcA,eAAEC,uBAAsBA,uBAAErhB,WAAYV,KAAMF,UAASA,UAC7GE,MAAK4B,IAAI9B,UAAUa,SAAS2tC,oBAAqBxsB,eAAgB2S,aACjEz0B,KAAK4B,IAAI9B,UAAUa,SAASytC,uBAAwBrsB,uBAAwB2S,oBACvE,CACL,GAAMF,oBAA4C9zB,WAAYV,KAAMuhB,OAAMA,OAAEO,eAAcA,eAC1F9hB,MAAK4B,IAAI9B,UAAUa,SAASutC,2BAA4BpsB,eAAgB0S,qBAkD9E,MApEsCv0B,WAAAsuC,qBAAa9uC,QAsBvC8uC,qBAAA/tC,UAAKmyB,MAAf,SAAgB/zB,OAGd,IAAK,GAFC2uC,SAAUvtC,KAAKutC,QACfvoC,IAAMuoC,QAAQhtC,OACX6E,EAAI,EAAGA,EAAIJ,IAAKI,IAAK,CAC5B,GAAMqc,UAAS8rB,QAAQnoC,EAClBqc,UAAOhY,SACVgY,SAAO3iB,KAAKF,OACR6iB,SAAOitB,sBAAwB1uC,KAAKgiB,eACtChiB,KAAKmuC,YAAY1sB,aAMf8sB,qBAAA/tC,UAAMuD,OAAhB,SAAiB9E,KAEf,IADA,GAAMsuC,SAAUvtC,KAAKutC,QACdA,QAAQhtC,OAAS,GACtBgtC,QAAQprC,QAAQjD,MAAMD,IAExBe,MAAK2D,YAAYzE,MAAMD,MAGfsvC,qBAAA/tC,UAAS2J,UAAnB,WAEE,IADA,GAAMojC,SAAUvtC,KAAKutC,QACdA,QAAQhtC,OAAS,GAAG,CACzB,GAAMouC,UAASpB,QAAQprC,OAClBwsC,UAAOllC,QACVklC,SAAO5vC,WAGXiB,KAAK2D,YAAY5E,YAGZwvC,qBAAA/tC,UAAU0sC,WAAjB,WACE,GAAM3rB,QAAS,GAAIitB,eAInB,OAHAxuC,MAAKutC,QAAQ1pB,KAAKtC,QACEvhB,KAAK2D,YACb7E,KAAKyiB,QACVA,QAGFgtB,qBAAA/tC,UAAW2tC,YAAlB,SAAmB5sB,QACjBA,OAAOxiB,UACP,IAAMwuC,SAAUvtC,KAAKutC,OACrBA,SAAQ5Z,OAAO4Z,QAAQ5nB,QAAQpE,QAAS,IAE5CgtB,sBApEsCx/B,aAAUkC,6PChHhD,SAAAiR,cAAmCnP,SACAC,iBACjC,MAAO,UAACnS,QAA0B,MAAAA,QAAOqC,KAAK,GAAI0rC,sBAA2B77B,SAA3CC,kPApDpClE,UAAA1P,WAAwB,gBACxB6H,eAAA7H,WAA6B,qBAC7BC,WAAAD,WAAyB,sBACzBE,cAAAF,WAA4B,yBAC5BmE,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BA4ClB0C,SAAYogB,aAG3BA,YAED,IAAA0sB,sBAAA,WAEE,QAAAA,sBAAoB77B,SACAC,iBADAhT,KAAQ+S,SAARA,SACA/S,KAAegT,gBAAfA,gBAQtB,MALE47B,sBAAApuC,UAAIT,KAAJ,SAAKW,WAAuCG,QAC1C,MAAOA,QAAOW,UAAU,GAAIqtC,wBAC1BnuC,WAAYV,KAAK+S,SAAU/S,KAAKgT,mBAGtC47B,wBAYAC,uBAAA,SAAApvC,QAIE,QAAAovC,wBAAYlrC,YACQoP,SACAC,iBAClBvT,OAAAM,KAAAC,KAAM2D,aAFY3D,KAAQ+S,SAARA,SACA/S,KAAegT,gBAAfA,gBALZhT,KAAQs0B,YAOdt0B,KAAK4B,IAAI5B,KAAK8uC,iBAAmBxrC,oBAAiBW,kBAACjE,KAAM+S,SAAUA,WAoHvE,MA5H2C9S,WAAA4uC,uBAAuBpvC,QAWtDovC,uBAAAruC,UAAKmyB,MAAf,SAAgB/zB,OACN,GAAA01B,UAAAt0B,KAAQs0B,QAChB,IAAIA,SAEF,IAAK,GADCtvB,KAAMsvB,SAAS/zB,OACZ6E,EAAI,EAAGA,EAAIJ,IAAKI,IACvBkvB,SAASlvB,GAAGmc,OAAOziB,KAAKF,QAKpBiwC,uBAAAruC,UAAMuD,OAAhB,SAAiB9E,KAEP,GAAAq1B,UAAAt0B,KAAQs0B,QAGhB,IAFAt0B,KAAKs0B,SAAW,KAEZA,SAIF,IAHA,GAAMtvB,KAAMsvB,SAAS/zB,OACjBuK,OAAS,IAEJA,MAAQ9F,KAAK,CACpB,GAAMnF,SAAUy0B,SAASxpB,MACzBjL,SAAQ0hB,OAAOriB,MAAMD,KACrBY,QAAQ0Q,aAAa9I,cAIzBhI,OAAKe,UAACuD,OAAAhE,KAAAC,KAAOf,MAGL4vC,uBAAAruC,UAAS2J,UAAnB,WACU,GAAAmqB,UAAAt0B,KAAQs0B,QAEhB,IADAt0B,KAAKs0B,SAAW,KACZA,SAGF,IAFA,GAAMtvB,KAAMsvB,SAAS/zB,OACjBuK,OAAS,IACJA,MAAQ9F,KAAK,CACpB,GAAMnF,SAAUy0B,SAASxpB,MACzBjL,SAAQ0hB,OAAOxiB,WACfc,QAAQ0Q,aAAa9I,cAGzBhI,OAAKe,UAAC2J,UAAApK,KAAWC,OAGT6uC,uBAAAruC,UAAYq0B,aAAtB,WACU,GAAAP,UAAAt0B,KAAQs0B,QAEhB,IADAt0B,KAAKs0B,SAAW,KACZA,SAGF,IAFA,GAAMtvB,KAAMsvB,SAAS/zB,OACjBuK,OAAS,IACJA,MAAQ9F,KAAK,CACpB,GAAMnF,SAAUy0B,SAASxpB,MACzBjL,SAAQ0hB,OAAO9Z,cACf5H,QAAQ0Q,aAAa9I,gBAK3BonC,uBAAAruC,UAAU+E,WAAV,SAAWC,WAAiBC,WACjBH,WAAoBI,WACpBC,UAET,GAAIH,aAAexF,KAAK+S,SAAU,CAExB,GAAAC,iBAAAhT,KAAegT,gBACjBf,gBAAkB5S,WAAQ8B,SAAC6R,iBAAiBvN,WAElD,IAAIwM,kBAAoB3S,cAAW+B,YACjC,MAAOrB,MAAKd,MAAMI,cAAW+B,YAACC,EAE9B,IAAMmgB,UAAS,GAAI3S,WAAOS,QACpBgB,aAAe,GAAItJ,gBAAYa,aAC/BjI,SAAY0hB,OAAME,SAAElR,aAAYA,aACtCvQ,MAAKs0B,SAASzQ,KAAKhkB,QACnB,IAAMwF,mBAAoB/B,oBAAiBW,kBAACjE,KAAMiS,gBAAiBpS,QAE/DwF,mBAAkBoE,OACpBzJ,KAAKmuC,YAAYnuC,KAAKs0B,SAAS/zB,OAAS,IAEjC8E,kBAAmBxF,QAAUA,QACpC0Q,aAAa3O,IAAIyD,oBAGnBrF,KAAK2D,YAAY7E,KAAK2iB,cAIxBzhB,MAAKmuC,YAAYnuC,KAAKs0B,SAAS3O,QAAQngB,cAI3CqpC,uBAAAruC,UAAWy3B,YAAX,SAAYh5B,KACVe,KAAKd,MAAMD,MAGb4vC,uBAAAruC,UAAcqF,eAAd,SAAeujC,OACTA,QAAUppC,KAAK8uC,kBACjB9uC,KAAKmuC,YAAYnuC,KAAKs0B,SAAS3O,QAAeyjB,MAAOvpC,WAIjDgvC,uBAAAruC,UAAW2tC,YAAnB,SAAoBrjC,OAClB,IAAe,IAAXA,MAAJ,CAIQ,GAAAwpB,UAAAt0B,KAAQs0B,SACVz0B,QAAUy0B,SAASxpB,OACjByW,OAAA1hB,QAAM0hB,OAAEhR,aAAA1Q,QAAY0Q,YAC5B+jB,UAASX,OAAO7oB,MAAO,GACvByW,OAAOxiB,WACPwR,aAAa9I,gBAEjBonC,wBA5H2CtrC,kBAAeW,oWCxE1Dy7B,wBAAA,SAAAlgC,QACE,QAAAkgC,2BACE,GAAM1gC,KAAWQ,OAAAM,KAAAC,KAAM,sBAChBA,MAAMykC,KAAOxlC,IAAIwlC,KAAO,0BACxBzkC,KAAM0kC,MAAQzlC,IAAIylC,MAClB1kC,KAAMsjB,QAAUrkB,IAAIqkB,QAE/B,MAP6CrjB,WAAA0/B,wBAAKlgC,QAOlDkgC,yBAP6ClwB,MAAhC3N,SAAuB69B,wBAOnCA,qXCdD14B,eAAA7H,WAA6B,qBAO7B+kC,oBAAA,SAAA1kC,QAGE,QAAA0kC,qBAAmBtlC,QAA4B6B,YAC7CjB,OAAAM,KAAOC,MADUA,KAAOnB,QAAPA,QAA4BmB,KAAUU,WAAVA,WAF/CV,KAAMyJ,QAAY,EA4BpB,MA7B4CxJ,WAAAkkC,oBAAY1kC,QAOtD0kC,oBAAA3jC,UAAWiH,YAAX,WACE,IAAIzH,KAAKyJ,OAAT,CAIAzJ,KAAKyJ,QAAS,CAEd,IAAM5K,SAAUmB,KAAKnB,QACf8S,UAAY9S,QAAQ8S,SAI1B,IAFA3R,KAAKnB,QAAU,KAEV8S,WAAkC,IAArBA,UAAUpR,SAAgB1B,QAAQ62B,YAAa72B,QAAQ4K,OAAzE,CAIA,GAAMslC,iBAAkBp9B,UAAUgU,QAAQ3lB,KAAKU,aAEtB,IAArBquC,iBACFp9B,UAAUgiB,OAAOob,gBAAiB,MAGxC5K,qBA7B4Cl9B,eAAYa,aAA3ChG,SAAmBqiC,oBA6B/BA,meCpCDhlC,aAAAC,WAA2B,mBAC3B2P,aAAA3P,WAA2B,mBAC3B6H,eAAA7H,WAA2D,qBAC3DkgC,0BAAAlgC,WAAwC,qCACxCwkC,sBAAAxkC,WAAoC,4BACpC4vC,eAAA5vC,WAAmD,4BAKnD2jC,kBAAA,SAAAtjC,QACE,QAAAsjC,mBAAsBp/B,aACpBlE,OAAAM,KAAAC,KAAM2D,aADc3D,KAAW2D,YAAXA,YAGxB,MAJ0C1D,WAAA8iC,kBAAatjC,QAIvDsjC,mBAJ0Ch0B,aAAUkC,WAAvCnP,SAAiBihC,kBAI7BA,iBAKD,IAAAxzB,SAAA,SAAA9P,QAgBE,QAAA8P,WACE9P,OAAAM,KAAOC,MAXTA,KAAS2R,aAET3R,KAAMyJ,QAAG,EAETzJ,KAAS01B,WAAG,EAEZ11B,KAAQy/B,UAAG,EAEXz/B,KAAW0/B,YAAQ,KA8FrB,MA5GgCz/B,WAAAsP,QAAa9P,QAE3C8P,QAAA/O,UAACwuC,eAAkBC,cAAnB,WACE,MAAO,IAAIlM,mBAAkB/iC,OAqB/BuP,QAAA/O,UAAI0C,KAAJ,SAAQ4M,UACN,GAAMjR,SAAU,GAAI+S,kBAAiB5R,KAAMA,KAE3C,OADAnB,SAAQiR,SAAgBA,SACZjR,SAGd0Q,QAAA/O,UAAI1B,KAAJ,SAAKF,OACH,GAAIoB,KAAKyJ,OACP,KAAM,IAAI61B,2BAAuBK,uBAEnC,KAAK3/B,KAAK01B,UAIR,IAAK,GAHG/jB,WAAA3R,KAAS2R,UACX3M,IAAM2M,UAAUpR,OAChB2uC,KAAOv9B,UAAUse,QACd7qB,EAAI,EAAGA,EAAIJ,IAAKI,IACvB8pC,KAAK9pC,GAAGtG,KAAKF,QAKnB2Q,QAAA/O,UAAKtB,MAAL,SAAMD,KACJ,GAAIe,KAAKyJ,OACP,KAAM,IAAI61B,2BAAuBK,uBAEnC3/B,MAAKy/B,UAAW,EAChBz/B,KAAK0/B,YAAczgC,IACnBe,KAAK01B,WAAY,CAIjB,KAAK,GAHG/jB,WAAA3R,KAAS2R,UACX3M,IAAM2M,UAAUpR,OAChB2uC,KAAOv9B,UAAUse,QACd7qB,EAAI,EAAGA,EAAIJ,IAAKI,IACvB8pC,KAAK9pC,GAAGlG,MAAMD,IAEhBe,MAAK2R,UAAUpR,OAAS,GAG1BgP,QAAA/O,UAAQzB,SAAR,WACE,GAAIiB,KAAKyJ,OACP,KAAM,IAAI61B,2BAAuBK,uBAEnC3/B,MAAK01B,WAAY,CAIjB,KAAK,GAHG/jB,WAAA3R,KAAS2R,UACX3M,IAAM2M,UAAUpR,OAChB2uC,KAAOv9B,UAAUse,QACd7qB,EAAI,EAAGA,EAAIJ,IAAKI,IACvB8pC,KAAK9pC,GAAGrG,UAEViB,MAAK2R,UAAUpR,OAAS,GAG1BgP,QAAA/O,UAAWiH,YAAX,WACEzH,KAAK01B,WAAY,EACjB11B,KAAKyJ,QAAS,EACdzJ,KAAK2R,UAAY,MAGTpC,QAAA/O,UAAa2uC,cAAvB,SAAwBzuC,YACtB,GAAIV,KAAKyJ,OACP,KAAM,IAAI61B,2BAAuBK,uBAEjC,OAAOlgC,QAAKe,UAAC2uC,cAAApvC,KAAAC,KAAcU,aAIrB6O,QAAA/O,UAAUC,WAApB,SAAqBC,YACnB,GAAIV,KAAKyJ,OACP,KAAM,IAAI61B,2BAAuBK,uBAClC,OAAU3/B,MAAKy/B,UACd/+B,WAAWxB,MAAMc,KAAK0/B,aACfz4B,eAAYa,aAACg4B,OACX9/B,KAAK01B,WACdh1B,WAAW3B,WACJkI,eAAYa,aAACg4B,QAEpB9/B,KAAK2R,UAAUkS,KAAKnjB,YACb,GAAIkjC,uBAAmBO,oBAACnkC,KAAMU,cAIzC6O,QAAA/O,UAAY4uC,aAAZ,WACE,GAAMpsB,YAAa,GAAI7jB,cAAU0C,UAEjC,OADMmhB,YAAYniB,OAASb,KACpBgjB,YAtFFzT,QAAMrP,OAAa,SAAIyD,YAA0B9C,QACtD,MAAO,IAAI+Q,kBAAoBjO,YAAa9C,SAuFhD0O,SA5GgCpQ,aAAU0C,WAA7BC,SAAOyN,QA4GnBA,OAKD,IAAAqC,kBAAA,SAAAnS,QACE,QAAAmS,kBAAsBjO,YAA2B9C,QAC/CpB,OAAAM,KAAOC,MADaA,KAAW2D,YAAXA,YAEpB3D,KAAKa,OAASA,OAgClB,MAnCyCZ,WAAA2R,iBAAUnS,QAMjDmS,iBAAApR,UAAI1B,KAAJ,SAAKF,OACK,GAAA+E,aAAA3D,KAAW2D,WACfA,cAAeA,YAAY7E,MAC7B6E,YAAY7E,KAAKF,QAIrBgT,iBAAApR,UAAKtB,MAAL,SAAMD,KACI,GAAA0E,aAAA3D,KAAW2D,WACfA,cAAeA,YAAYzE,OAC7Bc,KAAK2D,YAAYzE,MAAMD,MAI3B2S,iBAAApR,UAAQzB,SAAR,WACU,GAAA4E,aAAA3D,KAAW2D,WACfA,cAAeA,YAAY5E,UAC7BiB,KAAK2D,YAAY5E,YAIX6S,iBAAApR,UAAUC,WAApB,SAAqBC,YAEnB,MADQV,MAAMa,OAELb,KAAKa,OAAOW,UAAUd,YAEtBuG,eAAYa,aAACg4B,OAG1BluB,kBAnCyCrC,QAA5BzN,SAAgB8P,iBAmC5BA,4OCvHD,SAAAwQ,YAA8BpP,iBAC5B,MAAO,UAAoCnS,QACzC,MAAOA,QAAOqC,KAAK,GAAI4pC,gBAAkB95B,kPAjD7ClE,UAAA1P,WAAwB,gBAExBC,WAAAD,WAAyB,sBACzBE,cAAAF,WAA4B,yBAC5BmE,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BAyClB0C,SAAUsgB,WAIzBA,UAED,IAAA0qB,gBAAA,WACE,QAAAA,gBAAoB95B,iBAAAhT,KAAegT,gBAAfA,gBAMtB,MAHE85B,gBAAAtsC,UAAIT,KAAJ,SAAKW,WAAuCG,QAC1C,MAAOA,QAAOW,UAAU,GAAIwrC,kBAAiBtsC,WAAYV,KAAKgT,mBAElE85B,kBAOAE,iBAAA,SAAAvtC,QAIE,QAAAutC,kBAAsBrpC,YACFqP,iBAClBvT,OAAAM,KAAAC,KAAM2D,aAFc3D,KAAW2D,YAAXA,YACF3D,KAAegT,gBAAfA,gBAElBhT,KAAKktC,aA8DT,MArEkCjtC,WAAA+sC,iBAAuBvtC,QAUvDutC,iBAAAxsC,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT3F,KAAKktC,WAAWvnC,WAGlBqnC,iBAAAxsC,UAAWy3B,YAAX,SAAY/4B,MAAYyG,UACtB3F,KAAK+D,OAAO7E,QAGd8tC,iBAAAxsC,UAAcqF,eAAd,SAAeF,UACb3F,KAAKktC,WAAWvnC,WAGRqnC,iBAAAxsC,UAAKmyB,MAAf,SAAgB/zB,OACdoB,KAAKuhB,OAAOziB,KAAKF,QAGTouC,iBAAAxsC,UAAMuD,OAAhB,SAAiB9E,KACfe,KAAKuhB,OAAOriB,MAAMD,KAClBe,KAAK2D,YAAYzE,MAAMD,KACvBe,KAAKqvC,kCAGGrC,iBAAAxsC,UAAS2J,UAAnB,WACEnK,KAAKuhB,OAAOxiB,WACZiB,KAAK2D,YAAY5E,WACjBiB,KAAKqvC,kCAGCrC,iBAAAxsC,UAA8B6uC,+BAAtC,WACMrvC,KAAKsvC,qBACPtvC,KAAKsvC,oBAAoB7nC,eAIrBulC,iBAAAxsC,UAAU0sC,WAAlB,SAAmBvnC,cAAA,KAAAA,WAAAA,SAAwC,MACrDA,WACF3F,KAAK8yB,OAAOntB,UACZA,SAAS8B,cAGX,IAAM0lC,YAAantC,KAAKuhB,MACpB4rB,aACFA,WAAWpuC,UAGb,IAAMwiB,QAASvhB,KAAKuhB,OAAS,GAAIzS,WAAOS,OACxCvP,MAAK2D,YAAY7E,KAAKyiB,OAEtB,IAAMtP,iBAAkB5S,WAAQ8B,SAACnB,KAAKgT,kBACtC,IAAIf,kBAAoB3S,cAAW+B,YAAE,CACnC,GAAMpC,KAAMK,cAAW+B,YAACC,CACxBtB,MAAK2D,YAAYzE,MAAMD,KACvBe,KAAKuhB,OAAOriB,MAAMD,SAElBe,MAAK4B,IAAI5B,KAAKsvC,oBAAsBhsC,oBAAiBW,kBAACjE,KAAMiS,mBAGlE+6B,kBArEkCzpC,kBAAeW,oLCPjD,SAAAoe,sBAAqC,GAAA1iB,SAAAS,GAAqE,EAArEA,GAAAC,UAAqEC,OAArEF,KAAAT,KAAAS,GAAA,GAAAC,UAAqED,GACxG,OAAO,UAACQ,QACN,GAAI6B,QACiC,mBAA1B9C,MAAKA,KAAKW,OAAS,KAC5BmC,QAAU9C,KAAKiD,MAEjB,IAAMJ,aAAiC7C,IACvC,OAAOiB,QAAOqC,KAAK,GAAIqsC,wBAAuB9sC,YAAaC,0OAnE/Da,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,8BA0DlB0C,SAAcwgB,eAS7BA,cAED,IAAAitB,wBAAA,WACE,QAAAA,wBAAoB9sC,YACAC,SADA1C,KAAWyC,YAAXA,YACAzC,KAAO0C,QAAPA,QAMtB,MAHE6sC,wBAAA/uC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAIguC,0BAAyB9uC,WAAYV,KAAKyC,YAAazC,KAAK0C,WAE5F6sC,0BAOAC,yBAAA,SAAA/vC,QAIE,QAAA+vC,0BAAY7rC,YACQlB,YACAC,SAClBjD,OAAAM,KAAAC,KAAM2D,aAFY3D,KAAWyC,YAAXA,YACAzC,KAAO0C,QAAPA,QAJZ1C,KAAS+1B,YAMf,IAAM/wB,KAAMvC,YAAYlC,MACxBP,MAAKkF,OAAS,GAAIC,OAAMH,IAExB,KAAK,GAAII,GAAI,EAAGA,EAAIJ,IAAKI,IACvBpF,KAAK+1B,UAAUlS,KAAKze,EAGtB,KAAK,GAAIA,GAAI,EAAGA,EAAIJ,IAAKI,IAAK,CAC5B,GAAI4d,YAAavgB,YAAY2C,EAC7BpF,MAAK4B,IAAI0B,oBAAiBW,kBAAOjE,KAAMgjB,WAAiBA,WAAY5d,KA0C1E,MA3D6CnF,WAAAuvC,yBAAqB/vC,QAqBhE+vC,yBAAAhvC,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT3F,KAAKkF,OAAOI,YAAcG,UAC1B,IAAMswB,WAAY/1B,KAAK+1B,SACvB,IAAIA,UAAUx1B,OAAS,EAAG,CACxB,GAAMkvC,OAAQ1Z,UAAUpQ,QAAQrgB,aACjB,IAAXmqC,OACF1Z,UAAUpC,OAAO8b,MAAO,KAK9BD,yBAAAhvC,UAAcqF,eAAd,aAIU2pC,yBAAAhvC,UAAKmyB,MAAf,SAAgB/zB,OACd,GAA8B,IAA1BoB,KAAK+1B,UAAUx1B,OAAc,CAC/B,GAAMX,OAAQhB,OAAA2C,OAAUvB,KAAKkF,OACzBlF,MAAK0C,QACP1C,KAAKk2B,YAAYt2B,MAEjBI,KAAK2D,YAAY7E,KAAKc,QAKpB4vC,yBAAAhvC,UAAW01B,YAAnB,SAAoBt2B,MAClB,GAAIoE,OACJ,KACEA,OAAShE,KAAK0C,QAAQtB,MAAMpB,KAAMJ,MAClC,MAAOX,KAEP,WADAe,MAAK2D,YAAYzE,MAAMD,KAGzBe,KAAK2D,YAAY7E,KAAKkF,SAE1BwrC,0BA3D6CjsC,kBAAeW,oXCxF5D/E,aAAAC,WAA2B,mBAS3BsoC,iBAAA,SAAAjoC,QAwBE,QAAAioC,kBAAmB9oC,MAAkBkB,WACnCL,OAAAM,KAAOC,MADUA,KAAKpB,MAALA,MAAkBoB,KAASF,UAATA,UAFrCE,KAASkmC,WAAY,EAIfpmC,YACFE,KAAKkmC,WAAY,GAmBvB,MA9CyCjmC,WAAAynC,iBAAajoC,QAC7CioC,iBAAMxnC,OAAb,SAAiBtB,MAAUkB,WACzB,MAAO,IAAI4nC,kBAAiB9oC,MAAOkB,YAG9B4nC,iBAAQ9mC,SAAf,SAAgBa,OACN,GAAA8pB,MAAA9pB,MAAI8pB,KAAE3sB,MAAA6C,MAAK7C,MAAE8B,WAAAe,MAAUf,UAE/B,IAAI6qB,KAEF,WADA7qB,YAAW3B,UAIb2B,YAAW5B,KAAKF,OACZ8B,WAAW+I,SAIfhI,MAAM8pB,MAAO,EACNvrB,KAAMW,SAASc,SAYdimC,iBAAAlnC,UAAUC,WAApB,SAAqBC,YACnB,GAAM9B,OAAQoB,KAAKpB,MACbkB,UAAYE,KAAKF,SAEvB,IAAIA,UACF,MAAAA,WAAiBa,SAAS+mC,iBAAiB9mC,SAAU,GACnD2qB,MAAM,EAAO3sB,MAAKA,MAAE8B,WAAUA,YAGhCA,YAAW5B,KAAKF,OACX8B,WAAW+I,QACd/I,WAAW3B,YAInB2oC,kBA9CyCvoC,aAAU0C,WAAtCC,SAAgB4lC,iBA8C5BA,mXCtDDvoC,aAAAC,WAA2B,mBAY3BoF,gBAAA,SAAA/E,QAsDE,QAAA+E,iBAAoB1E,WAClBL,OAAAM,KAAOC,MADWA,KAASF,UAATA,UActB,MApEwCG,WAAAuE,gBAAa/E,QA6C5C+E,gBAAMtE,OAAb,SAAiBJ,WACf,MAAO,IAAI0E,iBAAmB1E,YAGzB0E,gBAAQ5D,SAAf,SAAmBjC,KACTA,IAAU+B,WACP3B,YAOHyF,gBAAAhE,UAAUC,WAApB,SAAqBC,YAEnB,GAAMZ,WAAYE,KAAKF,SAEvB,IAAIA,UACF,MAAOA,WAAUa,SAAS6D,gBAAgB5D,SAAU,GAAKF,WAAUA,YAEnEA,YAAW3B,YAGjByF,iBApEwCrF,aAAU0C,WAArCC,SAAe0C,gBAoE3BA,uHCjFD,SAAA5B,aAA4BhE,OAC1B,MAAOA,QAA0C,kBAApBA,OAAO+B,mBADtBmB,SAAWc,YAE1BA,2cCFDzD,aAAAC,WAA2B,mBAC3BmoC,mBAAAnoC,WAAiC,oCACjCkF,kBAAAlF,WAAgC,mCAEhCuD,cAAAvD,WAA4B,yBAQ5B6D,gBAAA,SAAAxD,QA0FE,QAAAwD,iBAAoByb,MAAoB5e,WACtCL,OAAAM,KAAOC,MADWA,KAAK0e,MAALA,MAAoB1e,KAASF,UAATA,UAEjCA,WAA8B,IAAjB4e,MAAMne,SACtBP,KAAKkmC,WAAY,EACjBlmC,KAAKpB,MAAQ8f,MAAM,IAqBzB,MAnHwCze,WAAAgD,gBAAaxD,QAE5CwD,gBAAM/C,OAAb,SAAiBwe,MAAY5e,WAC3B,MAAO,IAAImD,iBAAgByb,MAAO5e,YA8C7BmD,gBAAE4I,GAAT,eAAa,GAAA6S,UAAAre,GAA+B,EAA/BA,GAAAC,UAA+BC,OAA/BF,KAAAqe,MAAAre,GAAA,GAAAC,UAA+BD,GAC1C,IAAIP,WAAwB4e,MAAMA,MAAMne,OAAS,EAC7CoC,eAAWC,YAAC9C,WACd4e,MAAM7b,MAEN/C,UAAY,IAGd,IAAMkF,KAAM0Z,MAAMne,MAClB,OAAIyE,KAAM,EACD,GAAI/B,iBAAwByb,MAAO5e,WACzB,IAARkF,IACF,GAAIuiC,oBAAgBG,iBAAShpB,MAAM,GAAI5e,WAEvC,GAAIwE,mBAAeE,gBAAI1E,YAI3BmD,gBAAQrC,SAAf,SAAgBa,OAEN,GAAAid,OAAAjd,MAAKid,MAAE5T,MAAArJ,MAAKqJ,MAAE6B,MAAAlL,MAAKkL,MAAEjM,WAAAe,MAAUf,UAEvC,IAAIoK,OAAS6B,MAEX,WADAjM,YAAW3B,UAIb2B,YAAW5B,KAAK4f,MAAM5T,QAElBpK,WAAW+I,SAIfhI,MAAMqJ,MAAQA,MAAQ,EAEf9K,KAAMW,SAASc,SAcdwB,gBAAAzC,UAAUC,WAApB,SAAqBC,YACnB,GACMge,OAAQ1e,KAAK0e,MACb/R,MAAQ+R,MAAMne,OACdT,UAAYE,KAAKF,SAEvB,IAAIA,UACF,MAAAA,WAAiBa,SAASsC,gBAAgBrC,SAAU,GAClD8d,MAAKA,MAAE5T,MAPC,EAOM6B,MAAKA,MAAEjM,WAAUA,YAGjC,KAAK,GAAI0E,GAAI,EAAGA,EAAIuH,QAAUjM,WAAW+I,OAAQrE,IAC/C1E,WAAW5B,KAAK4f,MAAMtZ,GAExB1E,YAAW3B,YAGjBkE,iBAnHwC9D,aAAU0C,WAArCC,SAAemB,gBAmH3BA,uWChID8L,aAAA3P,WAA2B,mBAQ3B8E,gBAAA,SAAAzE,QAAA,QAAAyE,mBAA2CzE,OAAA2B,MAAApB,KAAaM,WAcxD,MAd2CL,WAAAiE,gBAAazE,QACtDyE,gBAAA1D,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT3F,KAAK2D,YAAY7E,KAAK2G,aAGxBvB,gBAAA1D,UAAWy3B,YAAX,SAAY/4B,MAAYyG,UACtB3F,KAAK2D,YAAYzE,MAAMA,QAGzBgF,gBAAA1D,UAAcqF,eAAd,SAAeF,UACb3F,KAAK2D,YAAY5E,YAErBmF,iBAd2C6K,aAAUkC,WAAxCnP,SAAeoC,gBAc3BA,kICtBYpC,SAAW2mC,YAAI,SAAIj4B,GAA8B,MAAAA,IAAA,gBAAYA,GAAEjQ,6GCA5E,SAAAioC,WAA6B5pC,OAC3B,MAAOA,QAA2C,kBAArBA,OAAO4C,WAA2D,kBAAvB5C,OAAcunC,eADxErkC,SAAS0mC,UAExBA,8KCED,SAAAkH,cACEz5B,eACA/W,MACAH,UAEA,GAAIkX,eAAgB,CAClB,GAAIA,yBAA0BlH,cAAUkC,WACtC,MAAwBgF,eAG1B,IAAIA,eAAe+4B,eAAkBC,cACnC,MAAOh5B,gBAAe+4B,eAAkBC,gBAI5C,MAAKh5B,iBAAmB/W,OAAUH,SAI3B,GAAIgQ,cAAUkC,WAACgF,eAAgB/W,MAAOH,UAHpC,GAAIgQ,cAAUkC,WAAC0+B,WAAaprC,UApBvCwK,0BAAA3P,WAA2B,oBAC3B4vC,eAAA5vC,WAAmD,4BACnDuwC,WAAAvwC,WAAwD,gBAExC0C,SAAY4tC,aAoB3BA,6GCvBD,SAAAlkC,mBAAgB1J,SAAI0J,KAAMA,qHCe1B,SAAAmhC,YAA2B,GAAAiD,QAAAvvC,GAAkC,EAAlCA,GAAAC,UAAkCC,OAAlCF,KAAAuvC,IAAAvvC,GAAA,GAAAC,UAAkCD,GAC3D,OAAOwvC,eAAcD,KAIvB,QAAAC,eAAoCD,KAClC,MAAKA,KAIc,IAAfA,IAAIrvC,OACCqvC,IAAI,GAGN,SAAeE,OACpB,MAAAF,KAAWtzB,OAAO,SAACqiB,KAAWrP,IAA4B,MAAAA,IAAAqP,OAAUmR,QAR7DxkC,OAA+BE,QAvB1CF,oBAAAlM,WAAqB,kBAgBL0C,SAAI6qC,KAEnBA,KAGe7qC,QAAa+tC,cAY5BA,sMC7BDhhC,oBAAAzP,WAAqB,mBACrB2wC,eAAA3wC,WAA6B,0BAG7BmpC,aAAAnpC,WAAgD,0BAEhDstC,OAAAttC,WAA8B,kBAiB9ByC,WAAA,WAcE,QAAAA,YAAYL,WAZLxB,KAASkmC,WAAY,EAatB1kC,YACFxB,KAAKS,WAAae,WAsTxB,MA7REK,YAAArB,UAAI0C,KAAJ,SAAQ4M,UACN,GAAMkT,YAAa,GAAInhB,WAGvB,OAFAmhB,YAAWniB,OAASb,KACpBgjB,WAAWlT,SAAWA,SACfkT,YAuHTnhB,WAAArB,UAASgB,UAAT,SAAUwuC,eACA9wC,MACAH,UAEA,GAAA+Q,UAAA9P,KAAQ8P,SACVmgC,KAAOF,eAAYL,aAACM,eAAgB9wC,MAAOH,SAQjD,IANI+Q,SACFA,SAAS/P,KAAKkwC,KAAMjwC,KAAKa,QAEzBovC,KAAKruC,IAAI5B,KAAKa,SAAWovC,KAAKxiC,mBAAqBzN,KAAKS,WAAWwvC,MAAQjwC,KAAKmvC,cAAcc,OAG5FA,KAAKxiC,qBACPwiC,KAAKxiC,oBAAqB,EACtBwiC,KAAKhG,iBACP,KAAMgG,MAAK/F,cAIf,OAAO+F,OAGCpuC,WAAArB,UAAa2uC,cAAvB,SAAwBc,MACtB,IACE,MAAOjwC,MAAKS,WAAWwvC,MACvB,MAAOhxC,KACPgxC,KAAKhG,iBAAkB,EACvBgG,KAAK/F,eAAiBjrC,IACtBgxC,KAAK/wC,MAAMD,OAWf4C,WAAArB,UAAOu7B,QAAP,SAAQj9B,KAA0BoxC,aAAlC,GAAA7nC,OAwCCrI,IA/BC,IARKkwC,cACCrhC,OAAIF,KAACwhC,IAAMthC,OAAIF,KAACwhC,GAAG7vB,QAAUzR,OAAIF,KAACwhC,GAAG7vB,OAAO8vB,QAC9CF,YAAcrhC,OAAIF,KAACwhC,GAAG7vB,OAAO8vB,QACpBvhC,OAAIF,KAACyhC,UACdF,YAAcrhC,OAAIF,KAACyhC,WAIlBF,YACH,KAAM,IAAIzgC,OAAM,wBAGlB,OAAA,IAAWygC,aAAkB,SAACG,QAASC,QAGrC,GAAI//B,aACJA,cAAAlI,MAAoB7G,UAAU,SAAC5C,OAC7B,GAAI2R,aAKF,IACEzR,KAAKF,OACL,MAAOK,KACPqxC,OAAOrxC,KACPsR,aAAa9I,kBASf3I,MAAKF,QAEN0xC,OAAQD,YAILxuC,WAAArB,UAAUC,WAApB,SAAqBC,YACnB,MAAOV,MAAKa,OAAOW,UAAUd,aAY/BmB,WAAArB,UAAC+nC,aAAiBvlB,YAAlB,WACE,MAAOhjB,OAkCT6B,WAAArB,UAAImsC,KAAJ,eAAQ,GAAA4D,eAAAlwC,GAAuC,EAAvCA,GAAAC,UAAuCC,OAAvCF,KAAAkwC,WAAAlwC,GAAA,GAAAC,UAAuCD,GAC7C,OAA0B,KAAtBkwC,WAAWhwC,OACNP,KAGF0sC,OAAamD,cAACU,YAAYvwC,OASnC6B,WAAArB,UAASgwC,UAAT,SAAUN,aAAV,GAAA7nC,OAiBCrI,IARC,IARKkwC,cACCrhC,OAAIF,KAACwhC,IAAMthC,OAAIF,KAACwhC,GAAG7vB,QAAUzR,OAAIF,KAACwhC,GAAG7vB,OAAO8vB,QAC9CF,YAAcrhC,OAAIF,KAACwhC,GAAG7vB,OAAO8vB,QACpBvhC,OAAIF,KAACyhC,UACdF,YAAcrhC,OAAIF,KAACyhC,WAIlBF,YACH,KAAM,IAAIzgC,OAAM,wBAGlB,OAAA,IAAWygC,aAAY,SAACG,QAASC,QAC/B,GAAI1xC,MACJyJ,OAAK7G,UAAU,SAACgP,GAAS,MAAA5R,OAAA4R,GAAW,SAACvR,KAAa,MAAAqxC,QAAArxC,MAAa,WAAM,MAAAoxC,SAAAzxC,YArSlEiD,WAAM3B,OAAa,SAAIsB,WAC5B,MAAO,IAAIK,YAAcL,YAuS7BK,aAtUaC,SAAUD,WAsUtBA,yHCjWYC,SAAOiB,QAAGoC,MAAMpC,SAAY,SAAIyN,GAAqB,MAAAA,IAAA,gBAAYA,GAAEjQ,4GCAhF,SAAAkwC,UAAyBjgC,GACvB,MAAY,OAALA,GAA0B,gBAANA,aADb1O,SAAQ2uC,SAEvBA,+GCFD,SAAAlpC,YAA2BiJ,GACzB,MAAoB,kBAANA,aADA1O,SAAUyF,WAEzBA,sICED,SAAAmpC,cACE,IACE,MAAOC,gBAAevvC,MAAMpB,KAAMM,WAClC,MAAOgB,GAEP,MADAhC,eAAW+B,YAACC,EAAIA,EACThC,cAAW+B,aAItB,QAAAF,UAA6CmuB,IAE3C,MADAqhB,gBAAiBrhB,GACLohB,cAbVC,gBAFJrxC,0BAAAF,WAA4B,yBAaZ0C,SAAQX,SAGvBA,2HCfYW,SAAWT,aAAUC,qVCGlCsvC,oBAAA,SAAAnxC,QACE,QAAAmxC,qBAAmB7P,QACjBthC,OAAAM,KAAOC,MADUA,KAAM+gC,OAANA,MAEjB,IAAM9hC,KAAWwQ,MAAM1P,KAAKC,KAAA+gC,OACvBA,OAAOxgC,OAAA,8CAAAwgC,OACL3nB,IAAI,SAACna,IAAKmG,GAAM,MAAGA,GAAI,EAAA,KAAMnG,IAAb0H,aAA+B0lB,KAAK,QAAY,GAChErsB,MAAMykC,KAAOxlC,IAAIwlC,KAAO,sBACxBzkC,KAAM0kC,MAAQzlC,IAAIylC,MAClB1kC,KAAMsjB,QAAUrkB,IAAIqkB,QAE/B,MAVyCrjB,WAAA2wC,oBAAKnxC,QAU9CmxC,qBAVyCnhC,MAA5B3N,SAAmB8uC,oBAU/BA,mQC6MD,SAAAC,6BAAqC9P,QACpC,MAAAA,QAAczkB,OAAO,SAACw0B,KAAM7xC,KAAQ,MAAA6xC,MAAKvvC,OAAQtC,cAAe8xC,uBAAmBH,oBAAI3xC,IAAI8hC,OAAvD9hC,aA5NrC6D,uBAAA1D,WAAwB,sBACxB4xC,WAAA5xC,WAAyB,sBACzB4H,aAAA5H,WAA2B,wBAC3BC,WAAAD,WAAyB,sBACzBE,cAAAF,WAA4B,yBAC5B2xC,sBAAA3xC,WAAoC,iCAyBpC0I,aAAA,WAoBE,QAAAA,cAAYL,aAVLzH,KAAMyJ,QAAY,EAEfzJ,KAAOixC,QAAiB,KACxBjxC,KAAQkxC,SAAmB,KAC7BlxC,KAAcmxC,eAAoB,KAOpC1pC,cACKzH,KAAM60B,aAAeptB,aAqKlC,MA3JEK,cAAAtH,UAAWiH,YAAX,WACE,GACIs5B,QADAqQ,WAAY,CAGhB,KAAIpxC,KAAKyJ,OAAT,CAIA,GAAAvH,IAAsElC,KAAhEixC,QAAA/uC,GAAO+uC,QAAEC,SAAAhvC,GAAQgvC,SAAErc,aAAA3yB,GAAY2yB,aAAEsc,eAAAjvC,GAAcivC,cAErDnxC,MAAKyJ,QAAS,EACdzJ,KAAKixC,QAAU,KACfjxC,KAAKkxC,SAAW,KAGhBlxC,KAAKmxC,eAAiB,IAOtB,KALA,GAAIrmC,QAAS,EACT9F,IAAMksC,SAAWA,SAAS3wC,OAAS,EAIhC0wC,SACLA,QAAQne,OAAO9yB,MAGfixC,UAAYnmC,MAAQ9F,KAAOksC,SAASpmC,QAAU,IAGhD,IAAI9D,aAAUO,WAACstB,cAAe,CAC5B,GAAIwc,OAAQhyC,WAAQ8B,SAAC0zB,cAAc90B,KAAKC,KACpCqxC,SAAU/xC,cAAW+B,cACvB+vC,WAAY,EACZrQ,OAASA,SACPzhC,cAAW+B,YAACC,YAAayvC,uBAAmBH,oBAC1CC,4BAA4BvxC,cAAW+B,YAACC,EAAEy/B,SAAWzhC,cAAW+B,YAACC,KAKzE,GAAIwB,UAAOC,QAACouC,gBAKV,IAHArmC,OAAS,EACT9F,IAAMmsC,eAAe5wC,SAEZuK,MAAQ9F,KAAK,CACpB,GAAMssC,KAAMH,eAAermC,MAC3B,IAAIkmC,WAAQP,SAACa,KAAM,CACjB,GAAID,OAAQhyC,WAAQ8B,SAACmwC,IAAI7pC,aAAa1H,KAAKuxC,IAC3C,IAAID,QAAU/xC,cAAW+B,YAAE,CACzB+vC,WAAY,EACZrQ,OAASA,UACT,IAAI9hC,KAAMK,cAAW+B,YAACC,CAClBrC,eAAe8xC,uBAAmBH,oBACpC7P,OAASA,OAAOx/B,OAAOsvC,4BAA4B5xC,IAAI8hC,SAEvDA,OAAOld,KAAK5kB,OAOtB,GAAImyC,UACF,KAAM,IAAIL,uBAAmBH,oBAAC7P,UAsBlCj5B,aAAAtH,UAAGoB,IAAH,SAAI2vC,UACF,IAAKA,UAAaA,WAAazpC,aAAag4B,MAC1C,MAAOh4B,cAAag4B,KAGtB,IAAIyR,WAAavxC,KACf,MAAOA,KAGT,IAAIuQ,cAA+BghC,QAEnC,cAAeA,WACb,IAAK,WACHhhC,aAAe,GAAIzI,cAA6BypC,SAClD,KAAK,SACH,GAAIhhC,aAAa9G,QAA8C,kBAA7B8G,cAAa9I,YAC7C,MAAO8I,aACR,IAAUvQ,KAAKyJ,OAEd,MADA8G,cAAa9I,cACN8I,YACF,IAAuC,kBAA5BA,cAAaihC,WAA6C,CAC1E,GAAMC,KAAMlhC,YACZA,cAAe,GAAIzI,cACnByI,aAAa4gC,gBAAkBM,KAEjC,KACF,SACE,KAAM,IAAIhiC,OAAM,yBAA2B8hC,SAAW,2BAQ1D,OALsBvxC,KAAKmxC,iBAAmBnxC,KAAKmxC,oBAErCttB,KAAKtT,cACnBA,aAAaihC,WAAWxxC,MAEjBuQ,cASTzI,aAAAtH,UAAMsyB,OAAN,SAAOviB,cACL,GAAM6S,eAAgBpjB,KAAKmxC,cAC3B,IAAI/tB,cAAe,CACjB,GAAMsuB,mBAAoBtuB,cAAcuC,QAAQpV,eACrB,IAAvBmhC,mBACFtuB,cAAcuQ,OAAO+d,kBAAmB,KAKtC5pC,aAAAtH,UAAUgxC,WAAlB,SAAmBjZ,QACjB,GAAAr2B,IAAgClC,KAA1BixC,QAAA/uC,GAAO+uC,QAAEC,SAAAhvC,GAAQgvC,QAClBD,UAAWA,UAAY1Y,OAIhB2Y,UAI6B,IAA9BA,SAASvrB,QAAQ4S,SAE1B2Y,SAASrtB,KAAK0U,QAHdv4B,KAAKkxC,UAAY3Y,QAJjBv4B,KAAKixC,QAAU1Y,QAhLLzwB,aAAKg4B,MAAA,SAA2Bv7B,OAE5C,MADAA,OAAMkF,QAAS,EACRlF,OACP,GAAIuD,eAuLRA,eA3LahG,SAAYgG,aA2LxBA,uHC3LYhG,SAAKyC,OAChBkF,QAAQ,EACR3K,KAAA,SAAKF,SACLM,MAAA,SAAMD,KAAkB,KAAMA,MAC9BF,SAAA,4IClCF8P,oBAAAzP,WAAqB,mBAEfuyC,OAAc9iC,OAAIF,KAACgjC,MAEZ7vC,SAAYmtC,aAAsB,kBAAX0C,SAA+C,kBAAfA,QAAOC,IACzED,OAAOC,IAAI,gBAAkB,iBAKlB9vC,QAAc+vC,eAAG/vC,QAAYmtC,maCV1CjoC,aAAA5H,WAA2B,wBAE3B6H,eAAA7H,WAA6B,qBAC7BuwC,WAAAvwC,WAAuC,iBACvC4vC,eAAA5vC,WAAmD,4BAYnD6R,WAAA,SAAAxR,QAsCE,QAAAwR,YAAY6gC,kBACA5yC,MACAH,UAGV,OAFAU,OAAAM,KAAOC,MAlBFA,KAAckqC,eAAQ,KACtBlqC,KAAeiqC,iBAAY,EAC3BjqC,KAAkByN,oBAAY,EAE3BzN,KAAS01B,WAAY,EAgBrBp1B,UAAUC,QAChB,IAAK,GACHP,KAAK2D,YAAcgsC,WAAaprC,KAChC,MACF,KAAK,GACH,IAAKutC,kBAAmB,CACtB9xC,KAAK2D,YAAcgsC,WAAaprC,KAChC,OAEF,GAAiC,gBAAtButC,mBAAgC,CACrCA,4BAA6B7gC,aAC/BjR,KAAKyN,mBAAqBqkC,kBAAkBrkC,mBAC5CzN,KAAK2D,YAAiCmuC,kBAC/B9xC,KAAK2D,YAAa/B,IAAI5B,QAE7BA,KAAKyN,oBAAqB,EAC1BzN,KAAK2D,YAAc,GAAIouC,gBAAkB/xC,KAA6B8xC,mBAExE,OAEJ,QACE9xC,KAAKyN,oBAAqB,EAC1BzN,KAAK2D,YAAc,GAAIouC,gBAAkB/xC,KAA6B8xC,kBAAmB5yC,MAAOH,WA8ExG,MA/ImCkB,WAAAgR,WAAYxR,QAE7CwR,WAAAzQ,UAACwuC,eAAkBC,cAAnB,WAAyB,MAAOjvC,OAazBiR,WAAM/Q,OAAb,SAAiBpB,KACAI,MACAH,UACf,GAAM2B,YAAa,GAAIuQ,YAAWnS,KAAMI,MAAOH,SAE/C,OADA2B,YAAW+M,oBAAqB,EACzB/M,YAyDTuQ,WAAAzQ,UAAI1B,KAAJ,SAAKF,OACEoB,KAAK01B,WACR11B,KAAK2yB,MAAM/zB,QAWfqS,WAAAzQ,UAAKtB,MAAL,SAAMD,KACCe,KAAK01B,YACR11B,KAAK01B,WAAY,EACjB11B,KAAK+D,OAAO9E,OAUhBgS,WAAAzQ,UAAQzB,SAAR,WACOiB,KAAK01B,YACR11B,KAAK01B,WAAY,EACjB11B,KAAKmK,cAIT8G,WAAAzQ,UAAWiH,YAAX,WACMzH,KAAKyJ,SAGTzJ,KAAK01B,WAAY,EACjBj2B,OAAKe,UAACiH,YAAA1H,KAAaC,QAGXiR,WAAAzQ,UAAKmyB,MAAf,SAAgB/zB,OACdoB,KAAK2D,YAAY7E,KAAKF,QAGdqS,WAAAzQ,UAAMuD,OAAhB,SAAiB9E,KACfe,KAAK2D,YAAYzE,MAAMD,KACvBe,KAAKyH,eAGGwJ,WAAAzQ,UAAS2J,UAAnB,WACEnK,KAAK2D,YAAY5E,WACjBiB,KAAKyH,eAGGwJ,WAAAzQ,UAAsBo1B,uBAAhC,WACE,GAAA1zB,IAAkClC,KAA1BixC,QAAA/uC,GAAO+uC,QAAEC,SAAAhvC,GAAQgvC,QAQzB,OAPAlxC,MAAKixC,QAAU,KACfjxC,KAAKkxC,SAAW,KAChBlxC,KAAKyH,cACLzH,KAAKyJ,QAAS,EACdzJ,KAAK01B,WAAY,EACjB11B,KAAKixC,QAAUA,QACfjxC,KAAKkxC,SAAWA,SACTlxC,MAEXiR,YA/ImChK,eAAYa,aAAlChG,SAAUmP,WA+ItBA,UAOD,IAAA8gC,gBAAA,SAAAtyC,QAIE,QAAAsyC,gBAAoBC,kBACRhC,eACA9wC,MACAH,UACVU,OAAAM,KAAOC,MAJWA,KAAiBgyC,kBAAjBA,iBAMlB,IAAIlzC,MACAe,QAAeG,IAEfgH,cAAUO,WAACyoC,gBACblxC,KAA+BkxC,eACtBA,iBACTlxC,KAA6BkxC,eAAgBlxC,KAC7CI,MAA8B8wC,eAAgB9wC,MAC9CH,SAAiCixC,eAAgBjxC,SAC7CixC,iBAAmBL,WAAaprC,QAClC1E,QAAUqH,OAAOhH,OAAO8vC,gBACpBhpC,aAAUO,WAAC1H,QAAQ4H,cACrBzH,KAAK4B,IAAiB/B,QAAQ4H,YAAYgmB,KAAK5tB,UAEjDA,QAAQ4H,YAAczH,KAAKyH,YAAYgmB,KAAKztB,QAIhDA,KAAKiyC,SAAWpyC,QAChBG,KAAK2yB,MAAQ7zB,KACbkB,KAAK+D,OAAS7E,MACdc,KAAKmK,UAAYpL,SAiFrB,MAhHgCkB,WAAA8xC,eAAatyC,QAkC3CsyC,eAAAvxC,UAAI1B,KAAJ,SAAKF,OACH,IAAKoB,KAAK01B,WAAa11B,KAAK2yB,MAAO,CACzB,GAAAqf,mBAAAhyC,KAAiBgyC,iBACpBA,mBAAkBvkC,mBAEZzN,KAAKkyC,gBAAgBF,kBAAmBhyC,KAAK2yB,MAAO/zB,QAC7DoB,KAAKyH,cAFLzH,KAAKmyC,aAAanyC,KAAK2yB,MAAO/zB,SAOpCmzC,eAAAvxC,UAAKtB,MAAL,SAAMD,KACJ,IAAKe,KAAK01B,UAAW,CACX,GAAAsc,mBAAAhyC,KAAiBgyC,iBACzB,IAAIhyC,KAAK+D,OACFiuC,kBAAkBvkC,oBAIrBzN,KAAKkyC,gBAAgBF,kBAAmBhyC,KAAK+D,OAAQ9E,KACrDe,KAAKyH,gBAJLzH,KAAKmyC,aAAanyC,KAAK+D,OAAQ9E,KAC/Be,KAAKyH,mBAKR,CAAA,IAAWuqC,kBAAkBvkC,mBAE5B,KADAzN,MAAKyH,cACCxI,GAEN+yC,mBAAkB9H,eAAiBjrC,IACnC+yC,kBAAkB/H,iBAAkB,EACpCjqC,KAAKyH,iBAKXsqC,eAAAvxC,UAAQzB,SAAR,WAAA,GAAAsJ,OAiBCrI,IAhBC,KAAKA,KAAK01B,UAAW,CACX,GAAAsc,mBAAAhyC,KAAiBgyC,iBACzB,IAAIhyC,KAAKmK,UAAW,CAClB,GAAMioC,iBAAkB,WAAM,MAAA/pC,OAAK8B,UAAUpK,KAAKsI,MAApB4pC,UAEzBD,mBAAkBvkC,oBAIrBzN,KAAKkyC,gBAAgBF,kBAAmBI,iBACxCpyC,KAAKyH,gBAJLzH,KAAKmyC,aAAaC,iBAClBpyC,KAAKyH,mBAMPzH,MAAKyH,gBAKHsqC,eAAAvxC,UAAY2xC,aAApB,SAAqB7iB,GAAc1wB,OACjC,IACE0wB,GAAGvvB,KAAKC,KAAKiyC,SAAUrzC,OACvB,MAAOK,KAEP,KADAe,MAAKyH,cACCxI,MAIF8yC,eAAAvxC,UAAe0xC,gBAAvB,SAAwB3Z,OAAuBjJ,GAAc1wB,OAC3D,IACE0wB,GAAGvvB,KAAKC,KAAKiyC,SAAUrzC,OACvB,MAAOK,KAGP,MAFAs5B,QAAO2R,eAAiBjrC,IACxBs5B,OAAO0R,iBAAkB,GAClB,EAET,OAAO,GAGC8H,eAAAvxC,UAAYq0B,aAAtB,WACU,GAAAmd,mBAAAhyC,KAAiBgyC,iBACzBhyC,MAAKiyC,SAAW,KAChBjyC,KAAKgyC,kBAAoB,KACzBA,kBAAkBvqC,eAEtBsqC,gBAhHgC9gC,mWCtKhClC,aAAA3P,WAA2B,mBAQ3BizC,gBAAA,SAAA5yC,QAGE,QAAA4yC,iBAAoB9Z,OAAuC/yB,WAAuBF,YAChF7F,OAAAM,KAAOC,MADWA,KAAMu4B,OAANA,OAAuCv4B,KAAUwF,WAAVA,WAAuBxF,KAAUsF,WAAVA,WAF1EtF,KAAK8K,MAAW,EAmB1B,MApB2C7K,WAAAoyC,gBAAa5yC,QAO5C4yC,gBAAA7xC,UAAKmyB,MAAf,SAAgB/zB,OACdoB,KAAKu4B,OAAOhzB,WAAWvF,KAAKwF,WAAY5G,MAAOoB,KAAKsF,WAAYtF,KAAK8K,QAAS9K,OAGtEqyC,gBAAA7xC,UAAMuD,OAAhB,SAAiB7E,OACfc,KAAKu4B,OAAON,YAAY/4B,MAAOc,MAC/BA,KAAKyH,eAGG4qC,gBAAA7xC,UAAS2J,UAAnB,WACEnK,KAAKu4B,OAAO1yB,eAAe7F,MAC3BA,KAAKyH,eAET4qC,iBApB2CtjC,aAAUkC,WAAxCnP,SAAeuwC,gBAoB3BA,wIC1BD,SAAAC,qBAAoCzyC,SAClC,GAAI0yC,cACAZ,OAAS9xC,QAAQ8xC,MAarB,OAXsB,kBAAXA,QACLA,OAAO3uB,WACTuvB,aAAeZ,OAAO3uB,YAEpBuvB,aAAeZ,OAAO,cACtBA,OAAO3uB,WAAauvB,cAGxBA,aAAe,eAGVA,gBAjBT1jC,oBAAAzP,WAAqB,kBAEL0C,SAAmBwwC,oBAgBlCA,oBAEYxwC,QAAUkhB,WAAGsvB,oBAAoBzjC,OAAIF,MAKrC7M,QAAYywC,aAAGzwC,QAAUkhB,oSCTtC,SAAA/e,mBAAqCuuC,gBACAxuC,OACAwB,WACAF,YACnC,GAAI3B,aAA+B,GAAI8uC,mBAAeJ,gBAACG,gBAAiBhtC,WAAYF,WAEpF,IAAI3B,YAAY8F,OACd,MAAO,KAGT,IAAIzF,iBAAkB7E,cAAU0C,WAC9B,MAAImC,QAAOkiC,WACTviC,YAAY7E,KAAWkF,OAAQpF,OAC/B+E,YAAY5E,WACL,OAEP4E,YAAY8J,oBAAqB,EAC1BzJ,OAAOxC,UAAUmC,aAE3B,IAAUwkC,cAAWM,YAACzkC,QAAS,CAC9B,IAAK,GAAIoB,GAAI,EAAGJ,IAAMhB,OAAOzD,OAAQ6E,EAAIJ,MAAQrB,YAAY8F,OAAQrE,IACnEzB,YAAY7E,KAAKkF,OAAOoB,GAErBzB,aAAY8F,QACf9F,YAAY5E,eALT,CAAA,GAOIqpC,YAASI,UAACxkC,QAcnB,MAbAA,QAAOmiC,KACL,SAACvnC,OACM+E,YAAY8F,SACf9F,YAAY7E,KAAUF,OACtB+E,YAAY5E,aAGhB,SAACE,KAAa,MAAA0E,aAAYzE,MAAZD,OAEfknC,KAAK,KAAM,SAAClnC,KAEX4P,OAAIF,KAACuhB,WAAW,WAAQ,KAAMjxB,SAEzB0E,WAdF,IAeIK,QAA6C,kBAA5BA,QAAOqiC,WAAeC,UAEhD,IADA,GAAMA,UAAgBtiC,OAAOqiC,WAAeC,cACzC,CACD,GAAIuG,MAAOvG,SAASxnC,MACpB,IAAI+tC,KAAKthB,KAAM,CACb5nB,YAAY5E,UACZ,OAGF,GADA4E,YAAY7E,KAAK+tC,KAAKjuC,OAClB+E,YAAY8F,OACd,UAVC,IAaIzF,QAA+C,kBAA9BA,QAAOukC,aAAiBvlB,YAAkB,CACpE,GAAM0vB,KAAM1uC,OAAOukC,aAAiBvlB,aACpC,IAA6B,kBAAlB0vB,KAAIlxC,UAGb,MAAOkxC,KAAIlxC,UAAU,GAAIixC,mBAAeJ,gBAACG,gBAAiBhtC,WAAYF,YAFtE3B,aAAYzE,MAAM,GAAI0I,WAAU,uEAI7B,CACL,GAAMhJ,OAAQoyC,WAAQP,SAACzsC,QAAU,oBAAsB,IAAIA,OAAS,IAC9D2uC,IAAA,gBAAsB/zC,MAAoC,2FAEhE+E,aAAYzE,MAAM,GAAI0I,WAAU+qC,OAElC,MAAO,SAnFT9jC,oBAAAzP,WAAqB,mBACrB+oC,cAAA/oC,WAA4B,yBAC5BgpC,YAAAhpC,WAA0B,uBAC1B4xC,WAAA5xC,WAAyB,sBAEzBD,aAAAC,WAA4C,mBAC5CinC,WAAAjnC,WAA4C,wBAE5CqzC,kBAAArzC,WAAgC,wBAEhCmpC,aAAAnpC,WAAgD,yBAMhC0C,SAAiBmC,kBAoEhCA,yICrEK2uC,SAA6B,mBAAXrxB,SAA0BA,OAC5CsxB,OAAyB,mBAATnxC,OAAqD,mBAAtBoxC,oBACjDpxC,eAAgBoxC,oBAAqBpxC,KACnCqxC,aAA6B,KAAXC,QAA0BA,OAC5CC,MAAaL,UAAYG,UAAYF,MAWzB/wC,SAAI6M,KAX4BskC,MAKlD,WACE,IAAKA,MACH,KAAM,IAAIxjC,OAAM,0LCxBpB,SAAAyjC,wBAAuCvkC,MACrC,GAAMgjC,QAAchjC,KAAKgjC,MAEzB,IAAsB,kBAAXA,QAIT,MAHKA,QAAOrL,WACVqL,OAAOrL,SAAWqL,OAAO,sBAEpBA,OAAOrL,QAGN,IAAAlN,OAAAzqB,KAAGuqB,GACX,IAAIE,OAA0C,mBAA5B,GAAIA,QAAM,cAC1B,MAAO,YAED,IAAAgD,OAAAztB,KAAGstB,GAEX,IAAIG,MAEF,IAAK,GADDlwB,MAAOhF,OAAOqd,oBAAoB6X,MAAI57B,WACjC4E,EAAI,EAAGA,EAAI8G,KAAK3L,SAAU6E,EAAG,CACpC,GAAI+G,KAAMD,KAAK9G,EAEf,IAAY,YAAR+G,KAA6B,SAARA,KAAkBiwB,MAAI57B,UAAU2L,OAASiwB,MAAI57B,UAAU,QAC9E,MAAO2L,KAIb,MAAO,gBA5BX0C,oBAAAzP,WAAqB,kBAEL0C,SAAsBoxC,uBA4BrCA,uBAEYpxC,QAAQwkC,SAAG4M,uBAAuBrkC,OAAIF,MAKtC7M,QAAUqxC,WAAGrxC,QAAQwkC,gQCFlC,SAAAr4B,WAA0B,GAAAxL,gBAAApC,GAA4E,EAA5EA,GAAAC,UAA4EC,OAA5EF,KAAAoC,YAAApC,GAAA,GAAAC,UAA4ED,GACpG,OAAO,UAA6BQ,QAClC,MAAOA,QAAOqC,KAAKnD,KAAKmO,UAAA9M,UAAA,IAAaP,QAAAU,OAAWkB,gBA2DpD,QAAAyL,iBAAgC,GAAAzL,gBAAApC,GAA4E,EAA5EA,GAAAC,UAA4EC,OAA5EF,KAAAoC,YAAApC,GAAA,GAAAC,UAA4ED,GAC1G,IAAMqC,SAAuCD,YAAYA,YAAYlC,OAAS,EAI9E,OAHuB,kBAAZmC,UACTD,YAAYI,MAEP,GAAIG,mBAAeC,gBAACR,aAAaS,KAAK,GAAIkwC,aAAY1wC,yOApG/DM,kBAAA5D,WAAgC,mCAChC0D,UAAA1D,WAAwB,qBAGxB2P,aAAA3P,WAA2B,mBAC3BmE,kBAAAnE,WAAgC,wBAEhCkE,oBAAAlE,WAAkC,+BAClCinC,WAAAjnC,WAA4C,uBA0B5B0C,SAAGmM,IAIlBA,IAyDenM,QAASoM,UAMxBA,SAED,IAAAklC,aAAA,WAIE,QAAAA,aAAY1wC,SACV1C,KAAK0C,QAAUA,QAMnB,MAHE0wC,aAAA5yC,UAAIT,KAAJ,SAAKW,WAA2BG,QAC9B,MAAOA,QAAOW,UAAU,GAAI6xC,eAAc3yC,WAAYV,KAAK0C,WAE/D0wC,cAXatxC,SAAWsxC,YAWvBA,WAOD,IAAAC,eAAA,SAAA5zC,QAME,QAAA4zC,eAAY1vC,YACAjB,QACAwC,YAAA,KAAAA,SAAAA,OAAcgC,OAAOhH,OAAO,OACtCT,OAAAM,KAAAC,KAAM2D,aANA3D,KAASszC,aACTtzC,KAAMyoB,OAAG,EAMfzoB,KAAK0C,QAA8B,kBAAZA,SAA0BA,QAAU,KAC3D1C,KAAKkF,OAASA,OA+FlB,MA1GyCjF,WAAAozC,cAAa5zC,QAc1C4zC,cAAA7yC,UAAKmyB,MAAf,SAAgB/zB,OACd,GAAM00C,WAAYtzC,KAAKszC,SACnBxwC,WAAOC,QAACnE,OACV00C,UAAUzvB,KAAK,GAAI0vB,qBAAoB30C,QACI,kBAA3BA,OAAMynC,WAAeC,UACrCgN,UAAUzvB,KAAK,GAAI2vB,gBAAe50C,MAAMynC,WAAeC,cAEvDgN,UAAUzvB,KAAK,GAAI4vB,mBAAkBzzC,KAAK2D,YAAa3D,KAAMpB,SAIvDy0C,cAAA7yC,UAAS2J,UAAnB,WACE,GAAMmpC,WAAYtzC,KAAKszC,UACjBtuC,IAAMsuC,UAAU/yC,MAEtB,IAAY,IAARyE,IAEF,WADAhF,MAAK2D,YAAY5E,UAInBiB,MAAKyoB,OAASzjB,GACd,KAAK,GAAII,GAAI,EAAGA,EAAIJ,IAAKI,IAAK,CAC5B,GAAIkhC,UAA6CgN,UAAUluC,EACvDkhC,UAASoN,kBACX1zC,KAAK4B,IAAI0kC,SAAS9kC,UAAU8kC,SAAUlhC,IAEtCpF,KAAKyoB,WAKX4qB,cAAA7yC,UAAcmzC,eAAd,WAEsB,MADpB3zC,KAAKyoB,QAEHzoB,KAAK2D,YAAY5E,YAIrBs0C,cAAA7yC,UAAcozC,eAAd,WAME,IAAK,GALCN,WAAYtzC,KAAKszC,UACjBtuC,IAAMsuC,UAAU/yC,OAChBoD,YAAc3D,KAAK2D,YAGhByB,EAAI,EAAGA,EAAIJ,IAAKI,IAAK,CAC5B,GAAIkhC,UAAWgN,UAAUluC,EACzB,IAAiC,kBAAtBkhC,UAAS5T,WAA4B4T,SAAS5T,WACvD,OAMJ,IAAK,GAFDmhB,iBAAiB,EACfj0C,QACGwF,EAAI,EAAGA,EAAIJ,IAAKI,IAAK,CAC5B,GAAIkhC,UAAWgN,UAAUluC,GACrBpB,OAASsiC,SAASxnC,MAQtB,IAJIwnC,SAASjM,iBACXwZ,gBAAiB,GAGf7vC,OAAOunB,KAET,WADA5nB,aAAY5E,UAIda,MAAKikB,KAAK7f,OAAOpF,OAGfoB,KAAK0C,QACP1C,KAAKk2B,YAAYt2B,MAEjB+D,YAAY7E,KAAKc,MAGfi0C,gBACFlwC,YAAY5E,YAINs0C,cAAA7yC,UAAW01B,YAArB,SAAsBt2B,MACpB,GAAIoE,OACJ,KACEA,OAAShE,KAAK0C,QAAQtB,MAAMpB,KAAMJ,MAClC,MAAOX,KAEP,WADAe,MAAK2D,YAAYzE,MAAMD,KAGzBe,KAAK2D,YAAY7E,KAAKkF,SAE1BqvC,eA1GyCtkC,aAAUkC,WAAtCnP,SAAauxC,cA0GzBA,aAOD,IAAAG,gBAAA,WAGE,QAAAA,gBAAoBlN,UAAAtmC,KAAQsmC,SAARA,SAClBtmC,KAAK8zC,WAAaxN,SAASxnC,OAiB/B,MAdE00C,gBAAAhzC,UAAQkyB,SAAR,WACE,OAAO,GAGT8gB,eAAAhzC,UAAI1B,KAAJ,WACE,GAAMkF,QAAShE,KAAK8zC,UAEpB,OADA9zC,MAAK8zC,WAAa9zC,KAAKsmC,SAASxnC,OACzBkF,QAGTwvC,eAAAhzC,UAAY65B,aAAZ,WACE,GAAMyZ,YAAa9zC,KAAK8zC,UACxB,OAAOA,aAAcA,WAAWvoB,MAEpCioB,kBAEAD,oBAAA,WAIE,QAAAA,qBAAoB70B,OAAA1e,KAAK0e,MAALA,MAHZ1e,KAAK8K,MAAG,EACR9K,KAAMO,OAAG,EAGfP,KAAKO,OAASme,MAAMne,OAoBxB,MAjBEgzC,qBAAA/yC,UAAC6lC,WAAeC,UAAhB,WACE,MAAOtmC,OAGTuzC,oBAAA/yC,UAAI1B,KAAJ,SAAKF,OACH,GAAMwG,GAAIpF,KAAK8K,QACT4T,MAAQ1e,KAAK0e,KACnB,OAAOtZ,GAAIpF,KAAKO,QAAW3B,MAAO8f,MAAMtZ,GAAImmB,MAAM,IAAY3sB,MAAO,KAAM2sB,MAAM,IAGnFgoB,oBAAA/yC,UAAQkyB,SAAR,WACE,MAAO1yB,MAAK0e,MAAMne,OAASP,KAAK8K,OAGlCyoC,oBAAA/yC,UAAY65B,aAAZ,WACE,MAAOr6B,MAAK0e,MAAMne,SAAWP,KAAK8K,OAEtCyoC,uBAOAE,kBAAA,SAAAh0C,QAKE,QAAAg0C,mBAAY9vC,YACQ40B,OACAvV,YAClBvjB,OAAAM,KAAAC,KAAM2D,aAFY3D,KAAMu4B,OAANA,OACAv4B,KAAUgjB,WAAVA,WANpBhjB,KAAiB0zC,mBAAG,EACpB1zC,KAAMgS,UACNhS,KAAUwkC,YAAG,EAkDf,MArDsCvkC,WAAAwzC,kBAAqBh0C,QAWzDg0C,kBAAAjzC,UAAC6lC,WAAeC,UAAhB,WACE,MAAOtmC,OAKTyzC,kBAAAjzC,UAAI1B,KAAJ,WACE,GAAMkT,QAAShS,KAAKgS,MACpB,OAAsB,KAAlBA,OAAOzR,QAAgBP,KAAKwkC,YACrB5lC,MAAO,KAAM2sB,MAAM,IAEnB3sB,MAAOoT,OAAO7P,QAASopB,MAAM,IAI1CkoB,kBAAAjzC,UAAQkyB,SAAR,WACE,MAAO1yB,MAAKgS,OAAOzR,OAAS,GAG9BkzC,kBAAAjzC,UAAY65B,aAAZ,WACE,MAA8B,KAAvBr6B,KAAKgS,OAAOzR,QAAgBP,KAAKwkC,YAG1CiP,kBAAAjzC,UAAcqF,eAAd,WACM7F,KAAKgS,OAAOzR,OAAS,GACvBP,KAAKwkC,YAAa,EAClBxkC,KAAKu4B,OAAOob,kBAEZ3zC,KAAK2D,YAAY5E,YAIrB00C,kBAAAjzC,UAAU+E,WAAV,SAAWC,WAAeC,WACfH,WAAoBI,WACpBC,UACT3F,KAAKgS,OAAO6R,KAAKpe,YACjBzF,KAAKu4B,OAAOqb,kBAGdH,kBAAAjzC,UAASgB,UAAT,SAAU5C,MAAYkM,OACpB,MAAOxH,qBAAiBW,kBAAWjE,KAAMA,KAAKgjB,WAAYhjB,KAAM8K,QAEpE2oC,mBArDsClwC,kBAAeW,4IC9RrD,SAAAue,QAA6B/f,SAC3B,MAAO,UAAC7B,QAA0B,MAAAA,QAAOqC,KAAK,GAAI8K,OAAWolC,YAA3B1wC,cALpCsL,mBAAA5O,WAA4B,sBAIZ0C,SAAM2gB,OAErBA,6sFCNDjK,qBAAApZ,WAAsB,wBAAb0C,SAAAyW,MAAAC,QAAiCD,KAC1C,IAAAI,aAAAvZ,WAA0B,2BAAjB0C,SAAA2W,UAAAE,YAAyCF,SAClD,IAAAvG,UAAA9S,WAAuB,wBAAd0C,SAAAkQ,OAAAE,SAAmCF,MAC5C,IAAAM,eAAAlT,WAA4B,6BAAnB0C,SAAAqQ,YAAAG,cAA6CH,WACtD,IAAAU,cAAAzT,WAA2B,4BAAlB0C,SAAAyQ,WAAAM,aAA2CN,UACpD,IAAAU,gBAAA7T,WAA6B,8BAApB0C,SAAAgR,aAAAG,eAA+CH,YACxD,IAAAK,cAAA/T,WAA2B,4BAAlB0C,SAAAoR,WAAAC,aAA2CD,UACpD,IAAAG,cAAAjU,WAA2B,4BAAlB0C,SAAAwR,WAAAD,aAA2CC,UACpD,IAAAI,cAAAtU,WAA2B,4BAAlB0C,SAAA2R,WAAAC,aAA2CD,UACpD,IAAAtQ,iBAAA/D,WAA8B,+BAArB0C,SAAAU,cAAAW,gBAAiDX,aAC1D,IAAAa,UAAAjE,WAAuB,wBAAd0C,SAAAP,OAAA8B,SAAmC9B,MAC5C,IAAAuS,aAAA1U,WAA0B,2BAAjB0C,SAAA+R,UAAAC,YAAyCD,SAClD,IAAAG,aAAA5U,WAA0B,2BAAjB0C,SAAAiS,UAAAC,YAAyCD,SAClD,IAAAI,eAAA/U,WAA4B,6BAAnB0C,SAAAmS,YAAAE,cAA6CF,WACtD,IAAAI,SAAAjV,WAAsB,uBAAb0C,SAAA6K,MAAA0H,QAAiC1H,KAC1C,IAAA+H,YAAAtV,WAAyB,0BAAhB0C,SAAA0S,SAAAE,WAAuCF,QAChD,IAAAK,gBAAAzV,WAA6B,8BAApB0C,SAAA6S,aAAAE,eAA+CF,YACxD,IAAAK,kBAAA5V,WAA+B,gCAAtB0C,SAAAgT,eAAAE,iBAAmDF,cAC5D,IAAAI,SAAA9V,WAAsB,uBAAb0C,SAAAmT,MAAAC,QAAiCD,KAC1C,IAAAK,aAAAlW,WAA0B,2BAAjB0C,SAAAqT,UAAAG,YAAyCH,SAClD,IAAAZ,iBAAAnV,WAA8B,+BAArB0C,SAAAwS,cAAAC,gBAAiDD,aAC1D,IAAAoB,YAAAtW,WAAyB,0BAAhB0C,SAAAyT,SAAAG,WAAuCH,QAChD,IAAAM,wBAAAzW,WAAqC,sCAA5B0C,SAAA6T,qBAAAE,uBAA+DF,oBACxE,IAAAI,2BAAA3W,WAAwC,yCAA/B0C,SAAAgU,wBAAAC,0BAAqED,uBAC9E,IAAAgB,aAAA1X,WAA0B,2BAAjB0C,SAAA+U,UAAAC,YAAyCD,SAClD,IAAAsC,SAAA/Z,WAAsB,uBAAb0C,SAAAoX,MAAAC,QAAiCD,KAC1C,IAAA3C,WAAAnX,WAAwB,yBAAf0C,SAAAwU,QAAAC,UAAqCD,OAC9C,IAAAG,cAAArX,WAA2B,4BAAlB0C,SAAA0U,WAAAC,aAA2CD,UACpD,IAAAI,UAAAxX,WAAuB,wBAAd0C,SAAA4U,OAAAE,SAAmCF,MAC5C,IAAAO,UAAA7X,WAAuB,wBAAd0C,SAAAiV,OAAAE,SAAmCF,MAC5C,IAAAK,YAAAhY,WAAyB,0BAAhB0C,SAAAuV,SAAAD,WAAuCC,QAChD,IAAAI,QAAArY,WAAqB,sBAAZ0C,SAAA0V,KAAAC,OAA+BD,IACxC,IAAAG,aAAAvY,WAA0B,2BAAjB0C,SAAA4V,UAAAC,YAAyCD,SAClD,IAAAG,SAAAzY,WAAsB,uBAAb0C,SAAA8V,MAAAC,QAAiCD,KAC1C,IAAAK,WAAA7Y,WAAwB,yBAAf0C,SAAAgW,QAAAG,UAAqCH,OAC9C,IAAAM,kBAAAhZ,WAA+B,gCAAtB0C,SAAAqW,eAAAC,iBAAmDD,cAC5D,IAAAG,WAAAlZ,WAAwB,yBAAf0C,SAAAuW,QAAAC,UAAqCD,OAC9C,IAAAQ,QAAAzZ,WAAqB,sBAAZ0C,SAAA8W,KAAAC,OAA+BD,IACxC,IAAAS,OAAAja,WAAoB,qBAAX0C,SAAAsX,IAAAC,MAA6BD,GACtC,IAAAG,SAAAna,WAAsB,uBAAb0C,SAAAwX,MAAAC,QAAiCD,KAC1C,IAAAG,eAAAra,WAA4B,6BAAnB0C,SAAA0X,YAAAC,cAA6CD,WACtD,IAAAI,OAAAxa,WAAoB,qBAAX0C,SAAA4X,IAAAE,MAA6BF,GACtC,IAAAxO,SAAA9L,WAAsB,uBAAb0C,SAAAqJ,MAAAD,QAAiCC,KAC1C,IAAA6O,YAAA5a,WAAyB,0BAAhB0C,SAAAiY,SAAAC,WAAuCD,QAChD,IAAAG,YAAA9a,WAAyB,0BAAhB0C,SAAAmY,SAAAC,WAAuCD,QAChD,IAAA85B,YAAA30C,WAAoC,0BAA3B0C,SAAAqY,QAAA45B,WAAkD95B,QAC3D,IAAAI,cAAAjb,WAA2B,4BAAlB0C,SAAAsY,WAAAC,aAA2CD,UACpD,IAAAM,aAAAtb,WAA0B,2BAAjB0C,SAAAyY,UAAAG,YAAyCH,SAClD,IAAAK,OAAAxb,WAAoB,qBAAX0C,SAAA6Y,IAAAC,MAA6BD,GACtC,IAAAI,aAAA3b,WAA0B,2BAAjB0C,SAAA+Y,UAAAE,YAAyCF,SAClD,IAAAI,aAAA7b,WAA0B,2BAAjB0C,SAAAkZ,UAAAC,YAAyCD,SAClD,IAAAlP,qBAAA1M,WAAkC,mCAAzB0C,SAAAiK,kBAAAD,oBAAyDC,iBAClE,IAAAqP,YAAAhc,WAAyB,0BAAhB0C,SAAAqZ,SAAAC,WAAuCD,QAChD,IAAAG,aAAAlc,WAA0B,2BAAjB0C,SAAAuZ,UAAAC,YAAyCD,SAClD,IAAAI,SAAArc,WAAsB,uBAAb0C,SAAAyZ,MAAAE,QAAiCF,KAC1C,IAAAI,WAAAvc,WAAwB,yBAAf0C,SAAA4Z,QAAAC,UAAqCD,OAC9C,IAAAG,mBAAAzc,WAAgC,iCAAvB0C,SAAA8Z,gBAAAC,kBAAqDD,eAC9D,IAAAO,eAAA/c,WAA4B,6BAAnB0C,SAAAoa,YAAAC,cAA6CD,WACtD,IAAAD,iBAAA7c,WAA8B,+BAArB0C,SAAAga,cAAAG,gBAAiDH,aAC1D,IAAA1Q,QAAAhM,WAAqB,sBAAZ0C,SAAAuJ,KAAAD,OAA+BC,IACxC,IAAAkR,UAAAnd,WAAuB,wBAAd0C,SAAAwa,OAAAC,SAAmCD,MAC5C,IAAAG,UAAArd,WAAuB,wBAAd0C,SAAA0a,OAAAC,SAAmCD,MAC5C,IAAAI,cAAAxd,WAA2B,4BAAlB0C,SAAA4a,WAAAE,aAA2CF,UACpD,IAAAI,SAAA1d,WAAsB,uBAAb0C,SAAA+a,MAAAC,QAAiCD,KAC1C,IAAAG,aAAA5d,WAA0B,2BAAjB0C,SAAAib,UAAAC,YAAyCD,SAClD,IAAAglB,YAAA3iC,WAAyB,0BAAhB0C,SAAA4gC,SAAAX,WAAuCW,QAChD,IAAAxlB,UAAA9d,WAAuB,wBAAd0C,SAAAmb,OAAAC,SAAmCD,MAC5C,IAAAG,cAAAhe,WAA2B,4BAAlB0C,SAAAqb,WAAAC,aAA2CD,UACpD,IAAAG,QAAAle,WAAqB,sBAAZ0C,SAAAub,KAAAC,OAA+BD,IACxC,IAAAK,iBAAAte,WAA8B,+BAArB0C,SAAAyb,cAAAG,gBAAiDH,aAC1D,IAAAK,SAAAxe,WAAsB,uBAAb0C,SAAA6b,MAAAC,QAAiCD,KAC1C,IAAAG,eAAA1e,WAA4B,6BAAnB0C,SAAA+b,YAAAC,cAA6CD,WACtD,IAAAG,UAAA5e,WAAuB,wBAAd0C,SAAAic,OAAAC,SAAmCD,MAC5C,IAAAG,QAAA9e,WAAqB,sBAAZ0C,SAAAmc,KAAAC,OAA+BD,IACxC,IAAAG,YAAAhf,WAAyB,0BAAhB0C,SAAAqc,SAAAC,WAAuCD,QAChD,IAAAG,aAAAlf,WAA0B,2BAAjB0C,SAAAuc,UAAAC,YAAyCD,SAClD,IAAAG,aAAApf,WAA0B,2BAAjB0C,SAAAyc,UAAAC,YAAyCD,SAClD,IAAAI,aAAAvf,WAA0B,2BAAjB0C,SAAA2c,UAAAE,YAAyCF,SAQlD,IAAAY,aAAAjgB,WAA0B,2BAAjB0C,SAAAwd,UAAAD,YAAyCC,SAClD,IAAAI,aAAAtgB,WAA0B,2BAAjB0C,SAAA2d,UAAAC,YAAyCD,SAClD,IAAAG,eAAAxgB,WAA4B,6BAAnB0C,SAAA6d,YAAAC,cAA6CD,WACtD,IAAAG,QAAA1gB,WAAqB,sBAAZ0C,SAAA+d,KAAAC,OAA+BD,IACxC,IAAAG,YAAA5gB,WAAyB,0BAAhB0C,SAAAie,SAAAC,WAAuCD,QAChD,IAAAG,aAAA9gB,WAA0B,2BAAjB0C,SAAAme,UAAAC,YAAyCD,SAClD,IAAAG,aAAAhhB,WAA0B,2BAAjB0C,SAAAqe,UAAAC,YAAyCD,SAClD,IAAAjK,OAAA9W,WAAoB,qBAAX0C,SAAAqU,IAAAD,MAA6BC,GACtC,IAAAoK,YAAAnhB,WAAyB,0BAAhB0C,SAAAue,SAAAE,WAAuCF,QAChD,IAAAK,gBAAAthB,WAA6B,8BAApB0C,SAAA2e,aAAAC,eAA+CD,YACxD,IAAAE,gBAAAvhB,WAA6B,8BAApB0C,SAAA8e,aAAAD,eAA+CC,YACxD,IAAAG,WAAA3hB,WAAwB,yBAAf0C,SAAA+e,QAAAE,UAAqCF,OAC9C,IAAAK,eAAA9hB,WAA4B,6BAAnB0C,SAAAkf,YAAAE,cAA6CF,WACtD,IAAAI,aAAAhiB,WAA0B,2BAAjB0C,SAAAqf,UAAAC,YAAyCD,SAClD,IAAAG,WAAAliB,WAAwB,yBAAf0C,SAAAuf,QAAAC,UAAqCD,OAC9C,IAAAI,UAAAriB,WAAuB,wBAAd0C,SAAAyf,OAAAE,SAAmCF,MAC5C,IAAAM,eAAAziB,WAA4B,6BAAnB0C,SAAA4f,YAAAG,cAA6CH,WACtD,IAAAO,cAAA7iB,WAA2B,4BAAlB0C,SAAAia,WAAAkG,aAA2ClG,UACpD,IAAAoG,gBAAA/iB,WAA6B,8BAApB0C,SAAAogB,aAAAC,eAA+CD,YACxD,IAAAG,cAAAjjB,WAA2B,4BAAlB0C,SAAAsgB,WAAAC,aAA2CD,UACpD,IAAAG,kBAAAnjB,WAA+B,gCAAtB0C,SAAAwgB,eAAAC,iBAAmDD,cAC5D,IAAAtU,OAAA5O,WAAoB,qBAAX0C,SAAAmM,IAAAD,MAA6BC,GACtC,IAAAyU,UAAAtjB,WAAuB,wBAAd0C,SAAA2gB,OAAAC,SAAmCD,uiJCvG5C3T,uBAAA1P,WAAwC,gBAAhC0C,SAAAyN,QAAAT,UAAOS,QAAEzN,QAAA8P,iBAAA9C,UAAmC8C,gBAEpD,IAAAzS,cAAAC,WAAyB,kBAAjB0C,SAAAD,WAAA1C,aAAgC0C,WAIxCzC,WAAO,oCACPA,WAAO,wCACPA,WAAO,qCACPA,WAAO,8BACPA,WAAO,6BACPA,WAAO,6BACPA,WAAO,gCACPA,WAAO,4BACPA,WAAO,iCACPA,WAAO,wCACPA,WAAO,mCACPA,WAAO,gCACPA,WAAO,0BACPA,WAAO,gCACPA,WAAO,6BACPA,WAAO,4BACPA,WAAO,6BACPA,WAAO,0BACPA,WAAO,yCACPA,WAAO,6BACPA,WAAO,6BACPA,WAAO,6BACPA,WAAO,6BACPA,WAAO,6BACPA,WAAO,2BAGPA,WAAO,gCACPA,WAAO,qCAGPA,WAAO,4BACPA,WAAO,iCACPA,WAAO,gCACPA,WAAO,kCACPA,WAAO,gCACPA,WAAO,2BACPA,WAAO,gCACPA,WAAO,mCACPA,WAAO,4BACPA,WAAO,+BACPA,WAAO,+BACPA,WAAO,iCACPA,WAAO,2BACPA,WAAO,mCACPA,WAAO,8BACPA,WAAO,kCACPA,WAAO,oCACPA,WAAO,2BACPA,WAAO,+BACPA,WAAO,8BACPA,WAAO,0CACPA,WAAO,6CACPA,WAAO,wBACPA,WAAO,6BACPA,WAAO,gCACPA,WAAO,4BACPA,WAAO,+BACPA,WAAO,4BACPA,WAAO,6BACPA,WAAO,0BACPA,WAAO,+BACPA,WAAO,2BACPA,WAAO,6BACPA,WAAO,oCACPA,WAAO,6BACPA,WAAO,2BACPA,WAAO,+BACPA,WAAO,0BACPA,WAAO,yBACPA,WAAO,2BACPA,WAAO,yBACPA,WAAO,2BACPA,WAAO,iCACPA,WAAO,yBACPA,WAAO,2BACPA,WAAO,8BACPA,WAAO,8BACPA,WAAO,gCACPA,WAAO,+BACPA,WAAO,yBACPA,WAAO,+BACPA,WAAO,+BACPA,WAAO,uCACPA,WAAO,8BACPA,WAAO,+BACPA,WAAO,2BACPA,WAAO,6BACPA,WAAO,qCACPA,WAAO,mCACPA,WAAO,iCACPA,WAAO,0BACPA,WAAO,4BACPA,WAAO,4BACPA,WAAO,gCACPA,WAAO,2BACPA,WAAO,+BACPA,WAAO,4BACPA,WAAO,gCACPA,WAAO,0BACPA,WAAO,mCACPA,WAAO,2BACPA,WAAO,iCACPA,WAAO,4BACPA,WAAO,0BACPA,WAAO,8BACPA,WAAO,+BACPA,WAAO,+BACPA,WAAO,+BACPA,WAAO,iCACPA,WAAO,4BACPA,WAAO,+BACPA,WAAO,iCACPA,WAAO,0BACPA,WAAO,8BACPA,WAAO,+BACPA,WAAO,+BACPA,WAAO,8BACPA,WAAO,kCACPA,WAAO,kCACPA,WAAO,6BACPA,WAAO,iCACPA,WAAO,+BACPA,WAAO,6BACPA,WAAO,+BACPA,WAAO,4BACPA,WAAO,iCACPA,WAAO,gCACPA,WAAO,kCACPA,WAAO,gCACPA,WAAO,oCACPA,WAAO,yBACPA,WAAO,2BAKP,IAAA6H,gBAAA7H,WAA2B,oBAAnB0C,SAAAgG,aAAAb,eAAoCa,YAC5C,IAAAiH,cAAA3P,WAAyB,kBAAjB0C,SAAAmP,WAAAlC,aAAgCkC,UACxC,IAAA1R,gBAAAH,WAA2B,oBAAnB0C,SAAAhB,aAAAvB,eAAoCuB,YAC5C,IAAAkO,iBAAA5P,WAA4B,qBAApB0C,SAAA4N,cAAAV,gBAAsCU,aAC9C,IAAAkwB,mBAAAxgC,WAA8B,uBAAtB0C,SAAAy9B,gBAAAK,kBAA0CL,eAClD,IAAA8D,yBAAAjkC,WAAoC,wCAA5B0C,SAAAkgC,sBAAAqB,wBAAiErB,qBACzE,IAAAld,gBAAA1lB,WAA2B,oBAAnB0C,SAAAqkB,aAAArB,eAAoCqB,YAC5C,IAAAiV,cAAAh8B,WAAyB,uBAAjB0C,SAAA45B,WAAAN,aAAqCM,UAC7C,IAAA7B,2BAAAz6B,WAAsC,oCAA9B0C,SAAAg4B,wBAAAD,0BAA+DC,uBACvE,IAAAwF,2BAAAlgC,WAAsC,oCAA9B0C,SAAA69B,wBAAAL,0BAA+DK,uBACvE,IAAA4L,gBAAAnsC,WAA2B,yBAAnB0C,SAAAqpC,aAAAI,eAAyCJ,YACjD,IAAA4F,uBAAA3xC,WAAkC,gCAA1B0C,SAAA8uC,oBAAAG,sBAAuDH,mBAC/D,IAAAjwB,gBAAAvhB,WAA2B,6BAAnB0C,SAAA6gB,aAAAhC,eAA6CgC,YACrD,IAAAvB,aAAAhiB,WAAwB,2BAAhB0C,SAAAmqC,UAAA7qB,YAAwC6qB,SAChD,IAAA+H,iBAAA50C,WAA4B,6BAApB0C,SAAAqjB,cAAA6uB,gBAA8C7uB,aACtD,IAAAF,wBAAA7lB,WAAmC,sCAA3B0C,SAAAimB,qBAAA9C,uBAA8D8C,oBACtE,IAAA5Z,kBAAA/O,WAAqE,qCAAhD0C,SAAA4pB,aAAAvd,iBAAYud,aAAE5pB,QAAAgrB,UAAA3e,iBAAS2e,UAAEhrB,QAAA4qB,iBAAAve,iBAAyDue,gBACvG,IAAAggB,QAAAttC,WAAqB,iBAAZ0C,SAAA6qC,KAAAD,OAA0BC,IAEnC,IAAA/tB,QAAAxf,WAAqB,uBACrBqL,QAAArL,WAAsB,wBACtBukC,QAAAvkC,WAAsB,wBACtB60C,iBAAA70C,WAA+B,iCAK/B4vC,eAAA5vC,WAA6B,4BAC7BinC,WAAAjnC,WAAyB,wBACzBmpC,aAAAnpC,WAA2B,0BAEf80C,WAAA90C,WAAgB,iBAEf0C,SAASqyC,UAAGD,UAiBzB,IAAIrG,YACF9uB,KAAAH,OAAIG,KACJ/N,MAAA2yB,QAAK3yB,MACLuhB,eAAA0hB,iBAAc1hB,eACd3nB,MAAAH,QAAKG,MAuBH9I,SAAS+rC,UAtBXA,SAeF,IAAI8D,SACF1C,aAAAD,eAAYC,aACZjsB,WAAAulB,aAAUvlB,WACVsjB,SAAAD,WAAQC,SAKNxkC,SAAM6vC,OAJRA","file":"Rx.min.js","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create(callbackFunc: (callback: () => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<void>;\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, the\n   * last parameter must be a callback function that `func` calls when it is\n   * done.\n   *\n   * The output of `bindCallback` is a function that takes the same parameters\n   * as `func`, except the last one (the callback). When the output function\n   * is called with arguments it will return an Observable. If function `func`\n   * calls its callback with one argument the Observable will emit that value.\n   * If on the other hand the callback is called with multiple values the resulting\n   * Observable will emit an array with said values as arguments.\n   *\n   * It is very important to remember that input function `func` is not called\n   * when the output function is, but rather when the Observable returned by the output\n   * function is subscribed. This means if `func` makes an AJAX request, that request\n   * will be made every time someone subscribes to the resulting Observable, but not before.\n   *\n   * Optionally, a selector function can be passed to `bindObservable`. The selector function\n   * takes the same arguments as the callback and returns the value that will be emitted by the Observable.\n   * Even though by default multiple arguments passed to callback appear in the stream as an array\n   * the selector function will be called with arguments directly, just as the callback would.\n   * This means you can imagine the default selector (when one is not provided explicitly)\n   * as a function that aggregates all its arguments into an array, or simply returns first argument\n   * if there is only one.\n   *\n   * The last optional parameter - {@link Scheduler} - can be used to control when the call\n   * to `func` happens after someone subscribes to Observable, as well as when results\n   * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n   * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n   * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n   * and call `subscribe` on the output Observable all function calls that are currently executing\n   * will end before `func` is invoked.\n   *\n   * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n   * In particular, if the callback is called synchronously the subscription of the resulting Observable\n   * will call the `next` function synchronously as well.  If you want to defer that call,\n   * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n   * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n   *\n   * Note that the Observable created by the output function will always emit a single value\n   * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n   * calls will not appear in the stream. If you need to listen for multiple calls,\n   *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n   *\n   * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n   * will be the context that the output function has at call time. In particular, if `func`\n   * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n   * it is recommended that the context of the output function is set to that object as well.\n   *\n   * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n   * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n   * provides convenient error handling and probably is a better choice.\n   * `bindCallback` will treat such functions the same as any other and error parameters\n   * (whether passed or not) will always be interpreted as regular callback argument.\n   *\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Receive an array of arguments passed to a callback</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 5\n   *   console.log(b); // 'some string'\n   *   console.log(c); // {someProperty: 'someValue'}\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n   * boundSomeFunction().subscribe(values => {\n   *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n   * });\n   *\n   *\n   * @example <caption>Use bindCallback with a selector function</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 'a'\n   *   console.log(b); // 'b'\n   *   console.log(c); // 'c'\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n   * boundSomeFunction().subscribe(value => {\n   *   console.log(value) // 'abc'\n   * });\n   *\n   *\n   * @example <caption>Compare behaviour with and without async Scheduler</caption>\n   * function iCallMyCallbackSynchronously(cb) {\n   *   cb();\n   * }\n   *\n   * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n   * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n   *\n   * boundSyncFn().subscribe(() => console.log('I was sync!'));\n   * boundAsyncFn().subscribe(() => console.log('I was async!'));\n   * console.log('This happened...');\n   *\n   * // Logs:\n   * // I was sync!\n   * // This happened...\n   * // I was async!\n   *\n   *\n   * @example <caption>Use bindCallback on an object method</caption>\n   * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n   * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n   * .subscribe(subscriber);\n   *\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func A function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps them to a value that is emitted on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              private scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T>, context: any }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error object, signaling\n   * whether call was successful. If that object is passed to callback, it means\n   * something went wrong.\n   *\n   * The output of `bindNodeCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable.\n   * If `func` calls its callback with error parameter present, Observable will\n   * error with that value as well. If error parameter is not passed, Observable will emit\n   * second parameter. If there are more parameters (third and so on),\n   * Observable will emit an array with all arguments, except first error argument.\n   *\n   * Optionally `bindNodeCallback` accepts selector function, which allows you to\n   * make resulting Observable emit value computed by selector, instead of regular\n   * callback arguments. It works similarly to {@link bindCallback} selector, but\n   * Node.js-style error argument will never be passed to that function.\n   *\n   * Note that `func` will not be called at the same time output function is,\n   * but rather whenever resulting Observable is subscribed. By default call to\n   * `func` will happen synchronously after subscription, but that can be changed\n   * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n   * can also control when values from callback will be emitted by Observable.\n   * To find out more, check out documentation for {@link bindCallback}, where\n   * Scheduler works exactly the same.\n   *\n   * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n   * of returned function, when it is called.\n   *\n   * After Observable emits value, it will complete immediately. This means\n   * even if `func` calls callback again, values from second and consecutive\n   * calls will never appear on the stream. If you need to handle functions\n   * that call callbacks multiple times, check out {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n   * \"Node.js-style\" callbacks are just a convention, so if you write for\n   * browsers or any other environment and API you use implements that callback style,\n   * `bindNodeCallback` can be safely used on that API functions as well.\n   *\n   * Remember that Error object passed to callback does not have to be an instance\n   * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n   * Error parameter of callback function is interpreted as \"present\", when value\n   * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n   * string or boolean `true`. In all of these cases resulting Observable would error\n   * with that value. This means usually regular style callbacks will fail very often when\n   * `bindNodeCallback` is used. If your Observable errors much more often then you\n   * would expect, check if callback really is called in Node.js-style and, if not,\n   * switch to {@link bindCallback} instead.\n   *\n   * Note that even if error parameter is technically present in callback, but its value\n   * is falsy, it still won't appear in array emitted by Observable or in selector function.\n   *\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Use on function calling callback with multiple arguments</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // null\n   *   console.log(a); // 5\n   *   console.log(b); // \"some string\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // [5, \"some string\"]\n   * });\n   *\n   *\n   * @example <caption>Use with selector function</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // undefined\n   *   console.log(a); // \"abc\"\n   *   console.log(b); // \"DEF\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // \"abcDEF\"\n   * });\n   *\n   *\n   * @example <caption>Use on function calling callback in regular style</caption>\n   * someFunction(a => {\n   *   console.log(a); // 5\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(\n   *   value => {}             // never gets called\n   *   err => console.log(err) // 5\n   *);\n   *\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a Node.js-style callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              public scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n}\n\ninterface DispatchState<T> {\n  source: BoundNodeCallbackObservable<T>;\n  subscriber: Subscriber<T>;\n  context: any;\n}\n\nfunction dispatch<T>(this: Action<DispatchState<T>>, state: DispatchState<T>) {\n  const self = (<Subscription> this);\n  const { source, subscriber, context } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        self.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n    if (result === errorObject) {\n      self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import {  Observable, ObservableInput  } from '../Observable';\nimport {  IScheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: IScheduler): Observable<R>;\n\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: IScheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | IScheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | IScheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    IScheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: IScheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <IScheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * // Results in the following behavior:\n   * // If the result of Math.random() is greater than 0.5 it will listen\n   * // for clicks anywhere on the \"document\"; when document is clicked it\n   * // will log a MouseEvent object to the console. If the result is less\n   * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n   *\n   * @see {@link create}\n   *\n   * @param {function(): SubscribableOrPromise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, R>(v1: SubscribableOrPromise<T>, project: (v1: T) => R): Observable<R>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Joins last values emitted by passed Observables.\n   *\n   * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n   *\n   * <img src=\"./img/forkJoin.png\" width=\"100%\">\n   *\n   * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n   * or directly as arguments. If no input Observables are provided, resulting stream will complete\n   * immediately.\n   *\n   * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n   * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n   * array will have `n` values, where first value is the last thing emitted by the first Observable,\n   * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n   * not emit more than once and it will complete after that. If you need to emit combined values not only\n   * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n   * or {@link zip} instead.\n   *\n   * In order for resulting array to have the same length as the number of input Observables, whenever any of\n   * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n   * and it will not emit anything either, even if it already has some last values from other Observables.\n   * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n   * unless at any point some other Observable completes without emitting value, which brings us back to\n   * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n   * have to emit something at least once and complete.\n   *\n   * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n   * will be immediately unsubscribed.\n   *\n   * Optionally `forkJoin` accepts project function, that will be called with values which normally\n   * would land in emitted array. Whatever is returned by project function, will appear in output\n   * Observable instead. This means that default project can be thought of as a function that takes\n   * all its arguments and puts them into an array. Note that project function will be called only\n   * when output Observable is supposed to emit a result.\n   *\n   * @example <caption>Use forkJoin with operator emitting immediately</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.of(1, 2, 3, 4),\n   *   Rx.Observable.of(5, 6, 7, 8)\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [4, 8]\n   * // \"This is how it ends!\"\n   *\n   *\n   * @example <caption>Use forkJoin with operator emitting after some time</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [2, 3] after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   *\n   * @example <caption>Use forkJoin with project function</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n   *   (n, m) => n + m\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // 5 after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   * @see {@link combineLatest}\n   * @see {@link zip}\n   *\n   * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n   * passed directly to the operator.\n   * @param {function} [project] Function that takes values emitted by input Observables and returns value\n   * that will appear in resulting Observable instead of default array.\n   * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n   * or value from project function.\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * `fromEvent` accepts as a first argument event target, which is an object with methods\n   * for registering event handler functions. As a second argument it takes string that indicates\n   * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n   * which are described in detail below. If your event target does not match any of the ones listed,\n   * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n   * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n   * handler functions have different names, but they all accept a string describing event type\n   * and function itself, which will be called whenever said event happens.\n   *\n   * Every time resulting Observable is subscribed, event handler function will be registered\n   * to event target on given event type. When that event fires, value\n   * passed as a first argument to registered function will be emitted by output Observable.\n   * When Observable is unsubscribed, function will be unregistered from event target.\n   *\n   * Note that if event target calls registered function with more than one argument, second\n   * and following arguments will not appear in resulting stream. In order to get access to them,\n   * you can pass to `fromEvent` optional project function, which will be called with all arguments\n   * passed to event handler. Output Observable will then emit value returned by project function,\n   * instead of the usual value.\n   *\n   * Remember that event targets listed below are checked via duck typing. It means that\n   * no matter what kind of object you have and no matter what environment you work in,\n   * you can safely use `fromEvent` on that object if it exposes described methods (provided\n   * of course they behave as was described above). So for example if Node.js library exposes\n   * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n   * a good choice.\n   *\n   * If the API you use is more callback then event handler oriented (subscribed\n   * callback function fires only once and thus there is no need to manually\n   * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n   * instead.\n   *\n   * `fromEvent` supports following types of event targets:\n   *\n   * **DOM EventTarget**\n   *\n   * This is an object with `addEventListener` and `removeEventListener` methods.\n   *\n   * In the browser, `addEventListener` accepts - apart from event type string and event\n   * handler function arguments - optional third parameter, which is either an object or boolean,\n   * both used for additional configuration how and when passed function will be called. When\n   * `fromEvent` is used with event target of that type, you can provide this values\n   * as third parameter as well.\n   *\n   * **Node.js EventEmitter**\n   *\n   * An object with `addListener` and `removeListener` methods.\n   *\n   * **JQuery-style event target**\n   *\n   * An object with `on` and `off` methods\n   *\n   * **DOM NodeList**\n   *\n   * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n   *\n   * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n   * it contains and install event handler function in every of them. When returned Observable\n   * is unsubscribed, function will be removed from all Nodes.\n   *\n   * **DOM HtmlCollection**\n   *\n   * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n   * installed and removed in each of elements.\n   *\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console every time a click\n   * // occurs on the document.\n   *\n   *\n   * @example <caption>Use addEventListener with capture option</caption>\n   * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n   *                                                                          // which will be passed to addEventListener\n   * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n   *\n   * clicksInDocument.subscribe(() => console.log('document'));\n   * clicksInDiv.subscribe(() => console.log('div'));\n   *\n   * // By default events bubble UP in DOM tree, so normally\n   * // when we would click on div in document\n   * // \"div\" would be logged first and then \"document\".\n   * // Since we specified optional `capture` option, document\n   * // will catch event when it goes DOWN DOM tree, so console\n   * // will log \"document\" and then \"div\".\n   *\n   * @see {@link bindCallback}\n   * @see {@link bindNodeCallback}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOM EventTarget, Node.js\n   * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions | SelectorMethodSignature<T>,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options as EventListenerOptions | undefined);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { isFunction } from '../util/isFunction';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *\n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *\n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n   * removeHandler function will forward it.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler?: (handler: Function, signal?: any) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler?: (handler: Function, signal?: any) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    const retValue = this._callAddHandler(handler, subscriber);\n\n    if (!isFunction(removeHandler)) {\n      return;\n    }\n\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler, retValue) ;\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): any | null {\n    try {\n      return this.addHandler(handler) || null;\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * IScheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: IScheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: IScheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: IScheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: IScheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | IScheduler,\n                      scheduler?: IScheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector as ResultFunc<S, T>,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector as ResultFunc<S, T>,\n        <IScheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <IScheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { GenerateObservable } from './GenerateObservable';\n\nexport const generate = GenerateObservable.create;\n","import { Observable } from '../../Observable';\nimport { generate as staticGenerate } from '../../observable/generate';\n\nObservable.generate = staticGenerate;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof staticGenerate;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../../Observable';\nimport { race as staticRace } from '../../observable/race';\n\nObservable.race = staticRace;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof staticRace;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please note\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { onErrorResumeNextStatic } from '../operators/onErrorResumeNext';\n\nexport const onErrorResumeNext = onErrorResumeNextStatic;\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext as staticOnErrorResumeNext } from '../../observable/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = staticOnErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof staticOnErrorResumeNext;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\r\nimport { Action } from '../scheduler/Action';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(this: Action<PairsContext<T>>, state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  this.schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional IScheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional IScheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: IScheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: IScheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * IScheduler and just delivers the notifications synchronously, but may use\n   * an optional IScheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: IScheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: IScheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: IScheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create(error: any, scheduler?: IScheduler): ErrorObservable {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    subscriber.syncErrorThrowable = true;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import {  zipStatic  } from '../operators/zip';\n\nexport const zip = zipStatic;\n","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { root } from './root';\n\nexport function assignImpl(target: Object, ...sources: Object[]) {\n  const len = sources.length;\n  for (let i = 0; i < len; i++) {\n    const source = sources[i];\n    for (let k in source) {\n      if (source.hasOwnProperty(k)) {\n        target[k] = source[k];\n      }\n    }\n  }\n  return target;\n};\n\nexport function getAssign(root: any) {\n  return root.Object.assign || assignImpl;\n}\n\nexport const assign = getAssign(root);","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n   *\n   * @example <caption>Wraps browser WebSocket</caption>\n   *\n   * let socket$ = Observable.webSocket('ws://localhost:8081');\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n   *\n   * import { w3cwebsocket } from 'websocket';\n   *\n   * let socket$ = Observable.webSocket({\n   *   url: 'ws://localhost:8081',\n   *   WebSocketCtor: w3cwebsocket\n   * });\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  private _resetState() {\n    this.socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n      if (this.binaryType) {\n        this.socket.binaryType = this.binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this._resetState();\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this._resetState();\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      this._resetState();\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0) {\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this._resetState();\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { buffer as higherOrder } from '../operators/buffer';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(this: Observable<T>, closingNotifier: Observable<any>): Observable<T[]> {\n  return higherOrder(closingNotifier)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: typeof buffer;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { bufferCount as higherOrder } from '../operators/bufferCount';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(this: Observable<T>, bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return higherOrder(bufferSize, startBufferEvery)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: typeof bufferCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { bufferTime as higherOrder } from '../operators/bufferTime';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return higherOrder(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: typeof bufferTime;\n  }\n}","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { bufferToggle as higherOrder } from '../operators/bufferToggle';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(this: Observable<T>, openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return higherOrder(openings, closingSelector)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferToggle } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: typeof bufferToggle;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { bufferWhen as higherOrder } from '../operators/bufferWhen';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<T[]> {\n  return higherOrder(closingSelector)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: typeof bufferWhen;\n  }\n}","\nimport { Observable, ObservableInput } from '../Observable';\nimport { catchError as higherOrder } from '../operators/catchError';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nexport function _catch<T, R>(this: Observable<T>, selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<T | R> {\n  return higherOrder(selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { combineAll as higherOrder } from '../operators/combineAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: typeof combineAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { combineLatest as higherOrder } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function combineLatest<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function combineLatest<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function combineLatest<T, R>(this: Observable<T>, array: ObservableInput<T>[]): Observable<Array<T>>;\nexport function combineLatest<T, TOther, R>(this: Observable<T>, array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { combineLatest } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: typeof combineLatest;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { concat as higherOrder } from '../operators/concat';\n\nexport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler>): Observable<T>;\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concat } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: typeof concat;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { concatAll as higherOrder } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concatAll<T>(this: Observable<T>): T;\nexport function concatAll<T, R>(this: Observable<T>): Subscribable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(this: Observable<T>): T {\n  return <any>higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: typeof concatAll;\n  }\n}","import { concatMap as higherOrderConcatMap } from '../operators/concatMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return higherOrderConcatMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: typeof concatMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { concatMapTo as higherOrder } from '../operators/concatMapTo';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function concatMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: typeof concatMapTo;\n  }\n}","import { Observable } from '../Observable';\nimport { count as higherOrder } from '../operators/count';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { count } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: typeof count;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { dematerialize as higherOrder } from '../operators/dematerialize';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(this: Observable<Notification<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: typeof dematerialize;\n  }\n}","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { debounce as higherOrder } from '../operators/debounce';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: typeof debounce;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { debounceTime as higherOrder } from '../operators/debounceTime';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(this: Observable<T>, dueTime: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(dueTime, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: typeof debounceTime;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { defaultIfEmpty as higherOrder } from '../operators/defaultIfEmpty';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(this: Observable<T>, defaultValue?: T): Observable<T>;\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue?: R): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue: R = null): Observable<T | R> {\n  return higherOrder<T, R>(defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: typeof defaultIfEmpty;\n  }\n}","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { delay as higherOrder } from '../operators/delay';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(this: Observable<T>, delay: number|Date,\n                         scheduler: IScheduler = async): Observable<T> {\n  return higherOrder<T>(delay, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: typeof delay;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { delayWhen as higherOrder } from '../operators/delayWhen';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(this: Observable<T>, delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  return higherOrder(delayDurationSelector, subscriptionDelay)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: typeof delayWhen;\n  }\n}","import { Observable } from '../Observable';\nimport { distinct as higherOrder } from '../operators/distinct';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(this: Observable<T>,\n                               keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): Observable<T> {\n  return higherOrder(keySelector, flushes)(this);\n}\n","import { Observable } from '../../Observable';\nimport { distinct } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: typeof distinct;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { distinctUntilChanged as higherOrder } from '../operators/distinctUntilChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean): Observable<T>;\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return higherOrder(compare, keySelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: typeof distinctUntilChanged;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { distinctUntilKeyChanged as higherOrder } from '../operators/distinctUntilKeyChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string): Observable<T>;\nexport function distinctUntilKeyChanged<T, K>(this: Observable<T>, key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return higherOrder<T, T>(key, compare)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: typeof distinctUntilKeyChanged;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { tap as higherOrder } from '../operators/tap';\n\n/* tslint:disable:max-line-length */\nexport function _do<T>(this: Observable<T>, next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\nexport function _do<T>(this: Observable<T>, observer: PartialObserver<T>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(this: Observable<T>, nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return higherOrder(<any>nextOrObserver, error, complete)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: typeof _do;\n    _do: typeof _do;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { exhaust as higherOrder } from '../operators/exhaust';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: typeof exhaust;\n  }\n}","\nimport { Observable, ObservableInput } from '../Observable';\nimport { exhaustMap as higherOrder } from '../operators/exhaustMap';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: typeof exhaustMap;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { expand as higherOrder } from '../operators/expand';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(this: Observable<T>, project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return higherOrder(project, concurrent, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: typeof expand;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { elementAt as higherOrder } from '../operators/elementAt';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(this: Observable<T>, index: number, defaultValue?: T): Observable<T> {\n  return higherOrder(index, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: typeof elementAt;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { filter as higherOrderFilter } from '../operators/filter';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(this: Observable<T>,\n                                       predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): Observable<S>;\nexport function filter<T>(this: Observable<T>,\n                          predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return higherOrderFilter(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { filter } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: typeof filter;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { finalize } from '../operators/finalize';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(this: Observable<T>, callback: () => void): Observable<T> {\n  return finalize(callback)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: typeof _finally;\n    _finally: typeof _finally;\n  }\n}","import { Observable } from '../Observable';\nimport { find as higherOrder } from '../operators/find';\n\n/* tslint:disable:max-line-length */\nexport function find<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): Observable<S>;\nexport function find<T>(this: Observable<T>,\n                        predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { find } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: typeof find;\n  }\n}","import { Observable } from '../Observable';\nimport { findIndex as higherOrder } from '../operators/findIndex';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: typeof findIndex;\n  }\n}","import { Observable } from '../Observable';\nimport { first as higherOrder } from '../operators/first';\n\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function first<T, S extends T, R>(this: Observable<T>,\n                                         predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): Observable<S>;\nexport function first<T>(this: Observable<T>,\n                         predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function first<T, R>(this: Observable<T>,\n                            predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<R>;\nexport function first<T>(this: Observable<T>,\n                         predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): Observable<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { first } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: typeof first;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { groupBy as higherOrder, GroupedObservable } from '../operators/groupBy';\nexport { GroupedObservable };\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>> {\n  return higherOrder(keySelector, elementSelector as any, durationSelector, subjectSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: typeof groupBy;\n  }\n}","import { Observable } from '../Observable';\nimport { ignoreElements as higherOrder } from '../operators/ignoreElements';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: typeof ignoreElements;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { isEmpty as higherOrder } from '../operators/isEmpty';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty<T>(this: Observable<T>): Observable<boolean> {\n  return higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: typeof isEmpty;\n  }\n}","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { audit as higherOrder } from '../operators/audit';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","import { Observable } from '../../Observable';\nimport { audit } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: typeof audit;\n  }\n}","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { auditTime as higherOrder } from '../operators/auditTime';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(duration, scheduler)(this) as Observable<T>;\n}","import { Observable } from '../../Observable';\nimport { auditTime } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: typeof auditTime;\n  }\n}","import { Observable } from '../Observable';\nimport { last as higherOrder } from '../operators/last';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function last<T, S extends T, R>(this: Observable<T>,\n                                        predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): Observable<S>;\nexport function last<T>(this: Observable<T>,\n                        predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function last<T, R>(this: Observable<T>,\n                           predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): Observable<R>;\nexport function last<T>(this: Observable<T>,\n                        predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { last } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: typeof last;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(this: Observable<T>, func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: typeof letProto;\n    letBind: typeof letProto;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { every as higherOrder } from '../operators/every';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return higherOrder(predicate, thisArg)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { every } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: typeof every;\n  }\n}","import { map as higherOrderMap } from '../operators/map';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  return higherOrderMap(project, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: typeof map;\n  }\n}","import { Observable } from '../Observable';\nimport { mapTo as higherOrder } from '../operators/mapTo';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(this: Observable<T>, value: R): Observable<R> {\n  return higherOrder(value)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: typeof mapTo;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { materialize as higherOrder } from '../operators/materialize';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(this: Observable<T>): Observable<Notification<T>> {\n  return higherOrder()(this) as Observable<Notification<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: typeof materialize;\n  }\n}","import { Observable } from '../Observable';\nimport { max as higherOrderMax } from '../operators/max';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMax(comparer)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { max } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: typeof max;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { merge as higherOrder } from '../operators/merge';\n\nexport { merge as mergeStatic } from '../observable/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(this: Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler | number>): Observable<T>;\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n  return higherOrder(...observables)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: typeof merge;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { mergeAll as higherOrder } from '../operators/mergeAll';\n\nexport function mergeAll<T>(this: Observable<T>, concurrent?: number): T;\nexport function mergeAll<T, R>(this: Observable<T>, concurrent?: number): Subscribable<R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(this: Observable<T>, concurrent: number = Number.POSITIVE_INFINITY): Observable<T> {\n  return higherOrder(concurrent)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: typeof mergeAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMap as higherOrderMergeMap } from '../operators/mergeMap';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<I | R> {\n  return higherOrderMergeMap(project, <any>resultSelector, concurrent)(this) as Observable<I | R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: typeof mergeMap;\n    mergeMap: typeof mergeMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMapTo as higherOrder } from '../operators/mergeMapTo';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(innerObservable, resultSelector as any, concurrent)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: typeof mergeMapTo;\n    mergeMapTo: typeof mergeMapTo;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { mergeScan as higherOrder } from '../operators/mergeScan';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(this: Observable<T>,\n                                accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(accumulator, seed, concurrent)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: typeof mergeScan;\n  }\n}","import { Observable } from '../Observable';\nimport { min as higherOrderMin } from '../operators/min';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMin(comparer)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { min } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: typeof min;\n  }\n}","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { multicast as higherOrder } from '../operators/multicast';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): ConnectableObservable<T>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): Observable<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Allows source Observable to be subscribed only once with a Subject of choice,\n * while still sharing its values between multiple subscribers.\n *\n * <span class=\"informal\">Subscribe to Observable once, but send its values to multiple subscribers.</span>\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * `multicast` is an operator that works in two modes.\n *\n * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject\n * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be\n * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that\n * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when\n * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription\n * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,\n * even though usually it would send a request per every subscriber. Since it sends a request at the moment of\n * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.\n *\n * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,\n * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source\n * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,\n * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count\n * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least\n * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a\n * ConnectableObservable, use `refCount`.\n *\n * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.\n * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable\n * as well, which should be the input stream modified by any operators you want. Note that in this\n * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If\n * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.\n * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,\n * if inside the selector function you subscribe to the input Observable multiple times, actual source stream\n * will be subscribed only once. So if you have a chain of operators that use some Observable many times,\n * but you want to subscribe to that Observable only once, this is the mode you would use.\n *\n * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the\n * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject\n * has some special properties, Observable returned by `multicast` will have them as well. If you want to use\n * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},\n * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},\n * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually\n * just wrappers around `multicast`, with a specific Subject hardcoded inside.\n *\n * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,\n * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.\n *\n * @example <caption>Use ConnectableObservable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const connectableSeconds = seconds.multicast(new Subject());\n *\n * connectableSeconds.subscribe(value => console.log('first: ' + value));\n * connectableSeconds.subscribe(value => console.log('second: ' + value));\n *\n * // At this point still nothing happens, even though we subscribed twice.\n *\n * connectableSeconds.connect();\n *\n * // From now on `seconds` are being logged to the console,\n * // twice per every second. `seconds` Observable was however only subscribed once,\n * // so under the hood Observable.interval had only one clock started.\n *\n * @example <caption>Use selector</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds\n *     .multicast(\n *         () => new Subject(),\n *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.\n *                                         // Because we are inside selector, `seconds` is subscribed once,\n *     )                                   // thus starting only one clock used internally by Observable.interval.\n *     .subscribe();\n *\n * @see {@link publish}\n * @see {@link publishLast}\n * @see {@link publishBehavior}\n * @see {@link publishReplay}\n * @see {@link share}\n * @see {@link shareReplay}\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through\n * which the source sequence's elements will be multicast to the selector function input Observable or\n * ConnectableObservable returned by the operator.\n * @param {Function} [selector] - Optional selector function that can use the input stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the input source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector\n * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.\n *\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(this: Observable<T>, subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(<any>subjectOrSubjectFactory, selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { multicast } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: typeof multicast;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { observeOn as higherOrder } from '../operators/observeOn';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { observeOn } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: typeof observeOn;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { onErrorResumeNext as higherOrder } from '../operators/onErrorResumeNext';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R> ;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...nextSources)(this);\n}\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: typeof onErrorResumeNext;\r\n  }\r\n}","import { Observable } from '../Observable';\nimport { pairwise as higherOrder } from '../operators/pairwise';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(this: Observable<T>): Observable<[T, T]> {\n  return higherOrder()(this) as Observable<[T, T]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: typeof pairwise;\n  }\n}","import { Observable } from '../Observable';\nimport { partition as higherOrder } from '../operators/partition';\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: typeof partition;\n  }\n}","import { Observable } from '../Observable';\nimport { pluck as higherOrder } from '../operators/pluck';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(this: Observable<T>, ...properties: string[]): Observable<R> {\n  return higherOrder(...properties)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: typeof pluck;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publish as higherOrder } from '../operators/publish';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>): ConnectableObservable<T>;\nexport function publish<T>(this: Observable<T>, selector: (source: Observable<T>) => Observable<T>): Observable<T>;\nexport function publish<T, R>(this: Observable<T>, selector: (source: Observable<T>) => Observable<R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(this: Observable<T>, selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(selector)(this);\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n","\nimport { Observable } from '../../Observable';\nimport { publish } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: typeof publish;\n  }\n}","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishBehavior as higherOrder } from '../operators/publishBehavior';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(this: Observable<T>, value: T): ConnectableObservable<T> {\n  return higherOrder(value)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: typeof publishBehavior;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishReplay as higherOrder } from '../operators/publishReplay';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler): ConnectableObservable<T>;\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): Observable<T>;\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): Observable<R> | ConnectableObservable<R> {\n\n  return higherOrder<T, R>(bufferSize, windowTime, selectorOrScheduler as any, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: typeof publishReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishLast as higherOrder } from '../operators/publishLast';\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(this: Observable<T>): ConnectableObservable<T> {\n  //TODO(benlesh): correct type-flow through here.\n  return higherOrder()(this) as ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: typeof publishLast;\n  }\n}","import { Observable } from '../Observable';\nimport { race as higherOrder } from '../operators/race';\n\n// NOTE: to support backwards compatability with 5.4.* and lower\nexport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, observables: Array<Observable<T>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, observables: Array<Observable<T>>): Observable<R>;\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { race } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: typeof race;\n  }\n}","import { Observable } from '../Observable';\nimport { reduce as higherOrderReduce } from '../operators/reduce';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): Observable<T[]>;\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index?: number) => R, seed?: R): Observable<R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return higherOrderReduce(accumulator, seed)(this);\n  }\n\n  return higherOrderReduce(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: typeof reduce;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { repeat as higherOrder } from '../operators/repeat';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: typeof repeat;\n  }\n}","import { Observable } from '../Observable';\nimport { repeatWhen as higherOrder } from '../operators/repeatWhen';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(this: Observable<T>, notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: typeof repeatWhen;\n  }\n}","import { Observable } from '../Observable';\nimport { retry as higherOrder } from '../operators/retry';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: typeof retry;\n  }\n}","import { Observable } from '../Observable';\nimport { retryWhen as higherOrder } from '../operators/retryWhen';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(this: Observable<T>, notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: typeof retryWhen;\n  }\n}","import { Observable } from '../Observable';\nimport { sample as higherOrder } from '../operators/sample';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: typeof sample;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { sampleTime as higherOrder } from '../operators/sampleTime';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(this: Observable<T>, period: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(period, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: typeof sampleTime;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { scan as higherOrderScan } from '../operators/scan';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  if (arguments.length >= 2) {\n    return higherOrderScan(accumulator, seed)(this) as Observable<R>;\n  }\n  return higherOrderScan(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\n\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: typeof scan;\n  }\n}","import { Observable } from '../Observable';\nimport { sequenceEqual as higherOrder } from '../operators/sequenceEqual';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(this: Observable<T>, compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return higherOrder(compareTo, comparor)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: typeof sequenceEqual;\n  }\n}","import { Observable } from '../Observable';\nimport { share as higherOrder } from '../operators/share';\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { share } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: typeof share;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { shareReplay as higherOrder } from '../operators/shareReplay';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler):\n  Observable<T> {\n  return higherOrder(bufferSize, windowTime, scheduler)(this) as Observable<T>;\n};","\nimport { Observable } from '../../Observable';\nimport { shareReplay } from '../../operator/shareReplay';\n\nObservable.prototype.shareReplay = shareReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    shareReplay: typeof shareReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { single as higherOrder } from '../operators/single';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { single } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: typeof single;\n  }\n}","import { Observable } from '../Observable';\nimport { skip as higherOrder } from '../operators/skip';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: typeof skip;\n  }\n}","import { Observable } from '../Observable';\nimport { skipLast as higherOrder } from '../operators/skipLast';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { skipLast } from '../../operator/skipLast';\n\nObservable.prototype.skipLast = skipLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipLast: typeof skipLast;\n  }\n}","import { Observable } from '../Observable';\nimport { skipUntil as higherOrder } from '../operators/skipUntil';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: typeof skipUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { skipWhile as higherOrder } from '../operators/skipWhile';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: typeof skipWhile;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { startWith as higherOrder } from '../operators/startWith';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(this: Observable<T>, v1: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T> {\n  return higherOrder(...array)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: typeof startWith;\n  }\n}","import { Action } from '../scheduler/Action';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: IScheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: IScheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function subscribeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new SubscribeOnOperator<T>(scheduler, delay));\n  };\n}\n\nclass SubscribeOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler,\n              private delay: number) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return new SubscribeOnObservable(\n      source, this.delay, this.scheduler\n    ).subscribe(subscriber);\n  }\n}\n","\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { subscribeOn as higherOrder } from '../operators/subscribeOn';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { subscribeOn } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: typeof subscribeOn;\n  }\n}","import { Observable } from '../Observable';\nimport { switchAll as higherOrder } from '../operators/switchAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(this: Observable<Observable<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: typeof _switch;\n    _switch: typeof _switch;\n  }\n}","\nimport { Observable, ObservableInput } from '../Observable';\nimport { switchMap as higherOrderSwitchMap } from '../operators/switchMap';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<I | R> {\n  return higherOrderSwitchMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: typeof switchMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { switchMapTo as higherOrder } from '../operators/switchMapTo';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function switchMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<I | R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: typeof switchMapTo;\n  }\n}","import { Observable } from '../Observable';\nimport { take as higherOrder } from '../operators/take';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: typeof take;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { takeLast as higherOrderTakeLast } from '../operators/takeLast';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrderTakeLast(count)(this) as Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { takeLast } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: typeof takeLast;\n  }\n}","import { Observable } from '../Observable';\nimport { takeUntil as higherOrder } from '../operators/takeUntil';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: typeof takeUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { takeWhile as higherOrder } from '../operators/takeWhile';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: typeof takeWhile;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { throttle as higherOrder, ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(this: Observable<T>,\n                            durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(durationSelector, config)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: typeof throttle;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\nimport { throttleTime as higherOrder } from '../operators/throttleTime';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(this: Observable<T>,\n                                duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(duration, scheduler, config)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: typeof throttleTime;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { timeInterval } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: typeof timeInterval;\n  }\n}","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { timeout as higherOrder } from '../operators/timeout';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(this: Observable<T>,\n                           due: number | Date,\n                           scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(due, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: typeof timeout;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable, ObservableInput } from '../Observable';\nimport { timeoutWith as higherOrder } from '../operators/timeoutWith';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): Observable<T | R> {\n  return higherOrder(due, withObservable, scheduler)(this as any);\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: typeof timeoutWith;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timestamp as higherOrder } from '../operators/timestamp';\nimport { Timestamp } from '../operators/timestamp';\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<Timestamp<T>> {\n  return higherOrder(scheduler)(this) as Observable<Timestamp<T>>;\n}\n","import { Observable } from '../../Observable';\r\nimport { timestamp } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: typeof timestamp;\r\n  }\r\n}","\nimport { Observable } from '../Observable';\nimport { toArray as higherOrder } from '../operators/toArray';\n\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * <img src=\"./img/toArray.png\" width=\"100%\">\n *\n * `toArray` will wait until the source Observable completes\n * before emitting the array containing all emissions.\n * When the source Observable errors no array will be emitted.\n *\n * @example <caption>Create array from input</caption>\n * const input = Rx.Observable.interval(100).take(4);\n *\n * input.toArray()\n *   .subscribe(arr => console.log(arr)); // [0,1,2,3]\n *\n * @see {@link buffer}\n *\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(this: Observable<T>): Observable<T[]> {\n  return higherOrder()(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: typeof toArray;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { window as higherOrder } from '../operators/window';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(this: Observable<T>, windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return higherOrder(windowBoundaries)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { window } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: typeof window;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { windowCount as higherOrder } from '../operators/windowCount';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(this: Observable<T>, windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return higherOrder(windowSize, startWindowEvery)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: typeof windowCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { windowTime as higherOrder } from '../operators/windowTime';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\n\nexport function windowTime<T>(this: Observable<T>,\n                              windowTimeSpan: number): Observable<Observable<T>> {\n\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return higherOrder(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: typeof windowTime;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { windowToggle as higherOrder } from '../operators/windowToggle';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(this: Observable<T>, openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(openings, closingSelector)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: typeof windowToggle;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { windowWhen as higherOrder } from '../operators/windowWhen';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(closingSelector)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: typeof windowWhen;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { withLatestFrom as higherOrder } from '../operators/withLatestFrom';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function withLatestFrom<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function withLatestFrom<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function withLatestFrom<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(this: Observable<T>, ...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...args)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: typeof withLatestFrom;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { zip as higherOrder } from '../operators/zip';\n\n/* tslint:disable:max-line-length */\nexport function zipProto<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function zipProto<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipProto<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function zipProto<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipProto<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipProto<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipProto<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipProto<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function zipProto<T>(this: Observable<T>, ...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipProto<T, R>(this: Observable<T>, array: Array<ObservableInput<T>>): Observable<R>;\nexport function zipProto<T, TOther, R>(this: Observable<T>, array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipProto } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: typeof zipProto;\n  }\n}","import { Observable } from '../Observable';\nimport { zipAll as higherOrder } from '../operators/zipAll';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: typeof zipAll;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timeInterval as higherOrder, TimeInterval } from '../operators/timeInterval';\nexport {TimeInterval};\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<TimeInterval<T>> {\n  return higherOrder(scheduler)(this) as Observable<TimeInterval<T>>;\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (this: ColdObservable<T>, subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): ColdObservable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): HotObservable<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { map } from '../../operators/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(this: AjaxRequest): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  patch(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T>(url: string, headers?: Object): Observable<T>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxPatch(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PATCH', url, body, headers });\n};\n\nconst mapResponse = map((x: AjaxResponse, index: number) => x.response);\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return mapResponse(\n    new AjaxObservable<AjaxResponse>({\n      method: 'GET',\n      url,\n      responseType: 'json',\n      headers\n    })\n  );\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.patch = ajaxPatch;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function(this: AjaxRequest) {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // set up the events before open XHR\n      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n      // You need to add the event listeners before calling open() on the request.\n      // Otherwise the progress events will not fire.\n      this.setupEvents(xhr, request);\n      // open XHR\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout, responseType and withCredentials can be set once the XHR is open\n      if (async) {\n        xhr.timeout = request.timeout;\n        xhr.responseType = request.responseType as any;\n      }\n\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = !!request.withCredentials;\n      }\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // finally send the request\n      result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    function xhrTimeout(this: XMLHttpRequest, e: ProgressEvent) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    xhr.ontimeout = xhrTimeout;\n    (<any>xhrTimeout).request = request;\n    (<any>xhrTimeout).subscriber = this;\n    (<any>xhrTimeout).progressSubscriber = progressSubscriber;\n    if (xhr.upload && 'withCredentials' in xhr) {\n      if (progressSubscriber) {\n        let xhrProgress: (e: ProgressEvent) => void;\n        xhrProgress = function(e: ProgressEvent) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        if (root.XDomainRequest) {\n          xhr.onprogress = xhrProgress;\n        } else {\n          xhr.upload.onprogress = xhrProgress;\n        }\n        (<any>xhrProgress).progressSubscriber = progressSubscriber;\n      }\n      let xhrError: (e: ErrorEvent) => void;\n      xhrError = function(this: XMLHttpRequest, e: ErrorEvent) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      xhr.onerror = xhrError;\n      (<any>xhrError).request = request;\n      (<any>xhrError).subscriber = this;\n      (<any>xhrError).progressSubscriber = progressSubscriber;\n    }\n\n    function xhrReadyStateChange(this: XMLHttpRequest, e: ProgressEvent) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    xhr.onreadystatechange = xhrReadyStateChange;\n    (<any>xhrReadyStateChange).subscriber = this;\n    (<any>xhrReadyStateChange).progressSubscriber = progressSubscriber;\n    (<any>xhrReadyStateChange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\nfunction parseXhrResponse(responseType: string, xhr: XMLHttpRequest) {\n  switch (responseType) {\n    case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          return JSON.parse(xhr.responseText || 'null');\n        }\n      case 'xml':\n        return xhr.responseXML;\n      case 'text':\n      default:\n        return  ('response' in xhr) ? xhr.response : xhr.responseText;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: AsapAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return audit(() => timer(duration, scheduler));\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import { CombineLatestOperator } from '../operators/combineLatest';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function combineAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new CombineLatestOperator(project));\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { concat as concatStatic } from '../observable/concat';\n\nexport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: Array<ObservableInput<T> | IScheduler>): MonoTypeOperatorFunction<T>;\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(concatStatic<T, R>(source, ...observables));\n}\n","import { mergeMap } from './mergeMap';\nimport { ObservableInput } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(project: (value: T, index: number) =>  ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return mergeMap(project, resultSelector, 1);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { concatMap } from './concatMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(\n  innerObservable: Observable<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R> {\n  return concatMap(() => innerObservable, resultSelector);\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(key: string): MonoTypeOperatorFunction<T>;\nexport function distinctUntilKeyChanged<T, K>(key: string, compare: (x: K, y: K) => boolean): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T> {\n  return distinctUntilChanged((x: T, y: T) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { FindValueOperator } from '../operators/find';\nimport { OperatorFunction } from '../interfaces';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, true, thisArg)) as Observable<any>;\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  protected _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n\n  return reduce(max);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from './ArrayObservable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function merge<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll(concurrent)(new ArrayObservable(<any>observables, scheduler)) as Observable<R>;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { merge as mergeStatic } from '../observable/merge';\n\nexport { merge as mergeStatic } from '../observable/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T>(concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: Array<ObservableInput<T> | IScheduler | number>): MonoTypeOperatorFunction<T>;\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(mergeStatic(source, ...observables));\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return reduce(min);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T, index: number) => boolean,\n                             thisArg?: any): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]> {\n  return (source: Observable<T>) => [\n    filter(predicate, thisArg)(source),\n    filter(not(predicate, thisArg) as any)(source)\n  ] as [Observable<T>, Observable<T>];\n}\n","import { Observable } from '../Observable';\nimport { map } from './map';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(...properties: string[]): OperatorFunction<T, R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return (source: Observable<T>) => map(plucker(properties, length))(source as any);\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function publish<T, R>(selector: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\n  return selector ?\n    multicast(() => new Subject<T>(), selector) :\n    multicast(new Subject<T>());\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T):  UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new BehaviorSubject<T>(value))(source) as ConnectableObservable<T>;\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\nexport function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new AsyncSubject<T>())(source);\n}\n","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function publishReplay<T, R>(bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\nexport function publishReplay<T, R>(bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<R> | Observable<R>> {\n\n  if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n    scheduler = selectorOrScheduler;\n  }\n\n  const selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n  const subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n\n  return (source: Observable<T>) => multicast(() => subject, selector)(source) as Observable<R> | ConnectableObservable<R>;\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\nimport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T> {\n  return function raceOperatorFunction(source: Observable<T>) {\n    // if the only argument is an array, it was most likely called with\n    // `pair([obs1, obs2, ...])`\n    if (observables.length === 1 && isArray(observables[0])) {\n      observables = <Array<Observable<T>>>observables[0];\n    }\n\n    return source.lift.call(raceStatic<T>(source, ...observables));\n  };\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  _isComplete = false;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n};\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler ): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n}\n\nfunction shareReplayOperator<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler) {\n  let subject: ReplaySubject<T>;\n  let refCount = 0;\n  let subscription: Subscription;\n  let hasError = false;\n  let isComplete = false;\n\n  return function shareReplayOperation(this: Subscriber<T>, source: Observable<T>) {\n    refCount++;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next(value) { subject.next(value); },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subject.complete();\n        },\n      });\n    }\n\n    const innerSub = subject.subscribe(this);\n\n    return () => {\n      refCount--;\n      innerSub.unsubscribe();\n      if (subscription && refCount === 0 && isComplete) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n};\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { ObservableInput } from '../Observable';\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap(identity as (value: T, index: number) => ObservableInput<{}>, null, concurrent);\n}","\nimport { mergeAll } from './mergeAll';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): MonoTypeOperatorFunction<T> {\n  return mergeAll(1);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll()(of(...observables)) as Observable<R>;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(v1: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len === 1) {\n      return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), source);\n    } else if (len > 1) {\n      return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), source);\n    } else {\n      return concatStatic(new EmptyObservable<T>(scheduler), source);\n    }\n  };\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","import { OperatorFunction } from '../interfaces';\nimport { Observable } from '../Observable';\nimport { switchMap } from './switchMap';\nimport { identity } from '../util/identity';\n\nexport function switchAll<T>(): OperatorFunction<Observable<T>, T> {\n  return switchMap(identity);\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  protected _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\nimport { map } from './map';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(scheduler: IScheduler = async): OperatorFunction<T, Timestamp<T>> {\n  return map((value: T) => new Timestamp(value, scheduler.now()));\n  // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","import { Observable } from '../Observable';\nimport { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { pipe } from '../util/pipe';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function reduce<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): OperatorFunction<T, T[]>;\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index?: number) => R, seed?: R): OperatorFunction<T, R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source: Observable<T>): Observable<R> {\n      return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n    };\n  }\n  return function reduceOperatorFunction(source: Observable<T>): Observable<R> {\n    return pipe(scan<T, T | R>((acc, value, index) => {\n      return accumulator(<R>acc, value, index + 1);\n    }), takeLast(1))(source) as Observable<R>;\n  };\n}\n","import { reduce } from './reduce';\nimport { OperatorFunction } from '../interfaces';\n\nfunction toArrayReducer<T>(arr: T[], item: T, index: number) {\n  arr.push(item);\n  return arr;\n}\n\nexport function toArray<T>(): OperatorFunction<T, T[]> {\n  return reduce(toArrayReducer, []) as OperatorFunction<T, T[]>;\n}\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new ZipOperator(project));\n}\n","export { audit } from './operators/audit';\nexport { auditTime } from './operators/auditTime';\nexport { buffer } from './operators/buffer';\nexport { bufferCount } from './operators/bufferCount';\nexport { bufferTime } from './operators/bufferTime';\nexport { bufferToggle } from './operators/bufferToggle';\nexport { bufferWhen } from './operators/bufferWhen';\nexport { catchError } from './operators/catchError';\nexport { combineAll } from './operators/combineAll';\nexport { combineLatest } from './operators/combineLatest';\nexport { concat } from './operators/concat';\nexport { concatAll } from './operators/concatAll';\nexport { concatMap } from './operators/concatMap';\nexport { concatMapTo } from './operators/concatMapTo';\nexport { count } from './operators/count';\nexport { debounce } from './operators/debounce';\nexport { debounceTime } from './operators/debounceTime';\nexport { defaultIfEmpty } from './operators/defaultIfEmpty';\nexport { delay } from './operators/delay';\nexport { delayWhen } from './operators/delayWhen';\nexport { dematerialize } from './operators/dematerialize';\nexport { distinct } from './operators/distinct';\nexport { distinctUntilChanged } from './operators/distinctUntilChanged';\nexport { distinctUntilKeyChanged } from './operators/distinctUntilKeyChanged';\nexport { elementAt } from './operators/elementAt';\nexport { every } from './operators/every';\nexport { exhaust } from './operators/exhaust';\nexport { exhaustMap } from './operators/exhaustMap';\nexport { expand } from './operators/expand';\nexport { filter } from './operators/filter';\nexport { finalize } from './operators/finalize';\nexport { find } from './operators/find';\nexport { findIndex } from './operators/findIndex';\nexport { first } from './operators/first';\nexport { groupBy } from './operators/groupBy';\nexport { ignoreElements } from './operators/ignoreElements';\nexport { isEmpty } from './operators/isEmpty';\nexport { last } from './operators/last';\nexport { map } from './operators/map';\nexport { mapTo } from './operators/mapTo';\nexport { materialize } from './operators/materialize';\nexport { max } from './operators/max';\nexport { merge } from './operators/merge';\nexport { mergeAll } from './operators/mergeAll';\nexport { mergeMap } from './operators/mergeMap';\nexport { mergeMap as flatMap } from './operators/mergeMap';\nexport { mergeMapTo } from './operators/mergeMapTo';\nexport { mergeScan } from './operators/mergeScan';\nexport { min } from './operators/min';\nexport { multicast } from './operators/multicast';\nexport { observeOn } from './operators/observeOn';\nexport { onErrorResumeNext } from './operators/onErrorResumeNext';\nexport { pairwise } from './operators/pairwise';\nexport { partition } from './operators/partition';\nexport { pluck } from './operators/pluck';\nexport { publish } from './operators/publish';\nexport { publishBehavior } from './operators/publishBehavior';\nexport { publishLast } from './operators/publishLast';\nexport { publishReplay } from './operators/publishReplay';\nexport { race } from './operators/race';\nexport { reduce } from './operators/reduce';\nexport { repeat } from './operators/repeat';\nexport { repeatWhen } from './operators/repeatWhen';\nexport { retry } from './operators/retry';\nexport { retryWhen } from './operators/retryWhen';\nexport { refCount } from './operators/refCount';\nexport { sample } from './operators/sample';\nexport { sampleTime } from './operators/sampleTime';\nexport { scan } from './operators/scan';\nexport { sequenceEqual } from './operators/sequenceEqual';\nexport { share } from './operators/share';\nexport { shareReplay } from './operators/shareReplay';\nexport { single } from './operators/single';\nexport { skip } from './operators/skip';\nexport { skipLast } from './operators/skipLast';\nexport { skipUntil } from './operators/skipUntil';\nexport { skipWhile } from './operators/skipWhile';\nexport { startWith } from './operators/startWith';\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './operators/subscribeOn';\nexport { switchAll } from './operators/switchAll';\nexport { switchMap } from './operators/switchMap';\nexport { switchMapTo } from './operators/switchMapTo';\nexport { take } from './operators/take';\nexport { takeLast } from './operators/takeLast';\nexport { takeUntil } from './operators/takeUntil';\nexport { takeWhile } from './operators/takeWhile';\nexport { tap } from './operators/tap';\nexport { throttle } from './operators/throttle';\nexport { throttleTime } from './operators/throttleTime';\nexport { timeInterval } from './operators/timeInterval';\nexport { timeout } from './operators/timeout';\nexport { timeoutWith } from './operators/timeoutWith';\nexport { timestamp } from './operators/timestamp';\nexport { toArray } from './operators/toArray';\nexport { window } from './operators/window';\nexport { windowCount } from './operators/windowCount';\nexport { windowTime } from './operators/windowTime';\nexport { windowToggle } from './operators/windowToggle';\nexport { windowWhen } from './operators/windowWhen';\nexport { withLatestFrom } from './operators/withLatestFrom';\nexport { zip } from './operators/zip';\nexport { zipAll } from './operators/zipAll';\n","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject, AnonymousSubject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/shareReplay';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipLast';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {TimeoutError} from './util/TimeoutError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operators/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\nexport { pipe } from './util/pipe';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { rxSubscriber } from './symbol/rxSubscriber';\nimport { iterator } from './symbol/iterator';\nimport { observable } from './symbol/observable';\n\nimport * as _operators from './operators';\n\nexport const operators = _operators;\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n"]}